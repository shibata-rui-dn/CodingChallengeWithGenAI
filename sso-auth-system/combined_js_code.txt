# JavaScript Code Combination
# Generated at: 2025-07-02T03:05:20.511Z
# Total files: 43

```filename
auth-server\controllers\adminController.js
```

```javascript
import pool from '../../config/database.js';

class AdminController {
  async showDashboard(req, res) {
    try {
      const [userStats, clientStats, originStats] = await Promise.all([
        pool.query(`
          SELECT 
            COUNT(*) as total_users,
            SUM(CASE WHEN role = 'admin' THEN 1 ELSE 0 END) as admin_count,
            SUM(CASE WHEN role = 'user' THEN 1 ELSE 0 END) as user_count,
            SUM(CASE WHEN is_active = 1 THEN 1 ELSE 0 END) as active_users
          FROM users
        `),
        pool.query(`
          SELECT 
            COUNT(*) as total_clients,
            SUM(CASE WHEN is_active = 1 THEN 1 ELSE 0 END) as active_clients
          FROM clients
        `),
        pool.query(`
          SELECT 
            COUNT(*) as total_origins,
            SUM(CASE WHEN is_active = 1 THEN 1 ELSE 0 END) as active_origins
          FROM allowed_origins
        `)
      ]);

      const recentUsers = await pool.query(`
        SELECT id, username, email, role, created_at
        FROM users
        ORDER BY created_at DESC
        LIMIT 5
      `);

      const recentClients = await pool.query(`
        SELECT client_id, name, is_active, created_at
        FROM clients
        ORDER BY created_at DESC
        LIMIT 5
      `);

      res.render('admin/dashboard', {
        user: req.user,
        stats: {
          users: userStats.rows[0],
          clients: clientStats.rows[0],
          origins: originStats.rows[0]
        },
        recentUsers: recentUsers.rows,
        recentClients: recentClients.rows,
        pageTitle: 'Admin Dashboard'
      });
    } catch (error) {
      console.error('Dashboard error:', error);
      res.status(500).render('error', { 
        error: 'Failed to load dashboard',
        user: req.user 
      });
    }
  }

  async showUsers(req, res) {
    try {
      res.render('admin/users', {
        user: req.user,
        pageTitle: 'User Management'
      });
    } catch (error) {
      console.error('Users page error:', error);
      res.status(500).render('error', { 
        error: 'Failed to load users page',
        user: req.user 
      });
    }
  }

  async showClients(req, res) {
    try {
      res.render('admin/clients', {
        user: req.user,
        pageTitle: 'Client Management'
      });
    } catch (error) {
      console.error('Clients page error:', error);
      res.status(500).render('error', { 
        error: 'Failed to load clients page',
        user: req.user 
      });
    }
  }

  async showOrigins(req, res) {
    try {
      res.render('admin/origins', {
        user: req.user,
        pageTitle: 'Origin Management'
      });
    } catch (error) {
      console.error('Origins page error:', error);
      res.status(500).render('error', { 
        error: 'Failed to load origins page',
        user: req.user 
      });
    }
  }

  async showSystemInfo(req, res) {
    try {
      const systemInfo = {
        node_version: process.version,
        platform: process.platform,
        uptime: process.uptime(),
        memory_usage: process.memoryUsage(),
        environment: process.env.NODE_ENV || 'development'
      };

      const dbInfo = await pool.query(`
        SELECT 
          (SELECT COUNT(*) FROM users) as user_count,
          (SELECT COUNT(*) FROM clients) as client_count,
          (SELECT COUNT(*) FROM allowed_origins) as origin_count,
          (SELECT COUNT(*) FROM auth_codes) as active_auth_codes,
          (SELECT COUNT(*) FROM access_tokens) as active_tokens
      `);

      let cspInfo = {
        origins: [],
        clientOrigins: [],
        totalOrigins: 0
      };

      try {
        const { getCSPOrigins } = await import('../middleware/cors.js');
        const cspOrigins = await getCSPOrigins();
        
        const clientsResult = await pool.query('SELECT redirect_uris FROM clients WHERE is_active = 1');
        const clientOrigins = new Set();
        
        for (const row of clientsResult.rows) {
          try {
            const redirectUris = JSON.parse(row.redirect_uris);
            if (Array.isArray(redirectUris)) {
              for (const uri of redirectUris) {
                try {
                  const url = new URL(uri);
                  const origin = `${url.protocol}//${url.host}`;
                  clientOrigins.add(origin);
                } catch (urlError) {
                  
                }
              }
            }
          } catch (parseError) {
            
          }
        }

        cspInfo = {
          origins: cspOrigins.slice(0, 10),
          clientOrigins: Array.from(clientOrigins),
          totalOrigins: cspOrigins.length
        };
      } catch (error) {
        console.warn('Failed to get CSP info:', error.message);
      }

      res.render('admin/system', {
        user: req.user,
        pageTitle: 'System Information',
        systemInfo,
        dbInfo: dbInfo.rows[0],
        cspInfo
      });
    } catch (error) {
      console.error('System info error:', error);
      res.status(500).render('error', { 
        error: 'Failed to load system information',
        user: req.user 
      });
    }
  }
}

export default new AdminController();
```

```filename
auth-server\controllers\authController.js
```

```javascript
import bcrypt from 'bcrypt';
import { v4 as uuidv4 } from 'uuid';
import pool from '../../config/database.js';

async function getConfigSafely() {
  try {
    const { getConfig } = await import('../../config/configLoader.js');
    return getConfig();
  } catch (error) {
    console.error('Config loading error:', error);
    return {
      demo: {
        username: 'admin',
        password: 'SecurePass123'
      },
      oauth: {
        code_expiry: 600
      }
    };
  }
}

async function validateClientRedirectUri(clientId, redirectUri) {
  if (!clientId || !redirectUri) {
    return { valid: false, error: 'Missing client_id or redirect_uri' };
  }

  try {
    const clientResult = await pool.query(
      'SELECT redirect_uris, is_active FROM clients WHERE client_id = ?',
      [clientId]
    );

    if (clientResult.rows.length === 0) {
      return { valid: false, error: 'Invalid client' };
    }

    const client = clientResult.rows[0];
    
    if (!client.is_active) {
      return { valid: false, error: 'Client is inactive' };
    }

    let allowedUris;
    try {
      allowedUris = JSON.parse(client.redirect_uris);
    } catch (parseError) {
      return { valid: false, error: 'Invalid client configuration' };
    }

    if (!Array.isArray(allowedUris) || !allowedUris.includes(redirectUri)) {
      return { valid: false, error: 'Invalid redirect URI' };
    }

    return { valid: true };
    
  } catch (error) {
    console.error('Client validation error:', error);
    return { valid: false, error: 'Server error' };
  }
}

class AuthController {
  async showLogin(req, res) {
    try {
      const config = await getConfigSafely();
      const { client_id, redirect_uri, scope, state } = req.query;

      if (client_id && redirect_uri) {
        const validation = await validateClientRedirectUri(client_id, redirect_uri);
        if (!validation.valid) {
          return res.status(400).render('error', {
            error: 'Invalid authentication request. Please contact support.'
          });
        }
      }

      const error = req.flash('error');
      const message = req.flash('message');

      const urlMessage = req.query.message;
      let displayMessage = '';

      if (urlMessage === 'logged_out') {
        displayMessage = 'Successfully logged out.';
      }

      const finalMessage = message.length > 0 ? message[message.length - 1] : displayMessage;

      res.render('login', {
        client_id,
        redirect_uri,
        scope,
        state,
        error: error.length > 0 ? error[error.length - 1] : '',
        message: finalMessage,
        demo_admin_email: 'admin@company.com',
        demo_admin_password: config.demo?.admin?.password || 'SecurePass123',
        demo_user_email: 'user0@company.com',
        demo_user_password: config.demo?.user?.password || 'UserPass123'
      });
    } catch (error) {
      console.error('Login page error:', error);
      res.status(500).render('error', { error: 'Internal Server Error' });
    }
  }

  async handleLogin(req, res) {
    try {
      const config = await getConfigSafely();
      const { email, password, client_id, redirect_uri, scope, state } = req.body;

      if (!email || !password) {
        req.flash('error', 'Email and password are required');
        return res.redirect(`/auth/login?client_id=${client_id}&redirect_uri=${redirect_uri}&scope=${scope}&state=${state}`);
      }

      if (!client_id || !redirect_uri) {
        return res.status(400).render('error', {
          error: 'Invalid authentication request'
        });
      }

      const validation = await validateClientRedirectUri(client_id, redirect_uri);
      if (!validation.valid) {
        return res.status(400).render('error', {
          error: 'Authentication request validation failed'
        });
      }

      const userResult = await pool.query('SELECT * FROM users WHERE email = ?', [email]);

      if (userResult.rows.length === 0) {
        req.flash('error', 'Invalid email or password');
        return res.redirect(`/auth/login?client_id=${client_id}&redirect_uri=${redirect_uri}&scope=${scope}&state=${state}`);
      }

      const user = userResult.rows[0];
      const isValidPassword = await bcrypt.compare(password, user.password_hash);

      if (!isValidPassword) {
        req.flash('error', 'Invalid email or password');
        return res.redirect(`/auth/login?client_id=${client_id}&redirect_uri=${redirect_uri}&scope=${scope}&state=${state}`);
      }

      const authCode = uuidv4();
      const codeExpiry = config.oauth?.code_expiry || 600;
      const expiresAt = new Date(Date.now() + codeExpiry * 1000);

      await pool.query(
        'INSERT INTO auth_codes (code, user_id, client_id, redirect_uri, scope, expires_at) VALUES (?, ?, ?, ?, ?, ?)',
        [authCode, user.id, client_id, redirect_uri, scope, expiresAt.toISOString()]
      );

      const redirectUrl = new URL(redirect_uri);
      redirectUrl.searchParams.set('code', authCode);
      if (state) redirectUrl.searchParams.set('state', state);

      res.redirect(redirectUrl.toString());
    } catch (error) {
      console.error('Login error:', error);
      req.flash('error', 'Authentication error occurred');

      const { client_id, redirect_uri, scope, state } = req.body;
      const cleanRedirectUrl = `/auth/login?client_id=${client_id}&redirect_uri=${encodeURIComponent(redirect_uri)}&scope=${scope}&state=${state}`;
      res.redirect(cleanRedirectUrl);
    }
  }

  async logout(req, res) {
    req.session.destroy((err) => {
      if (err) {
        console.error('Logout error:', err);
      }
      res.redirect('/auth/login');
    });
  }
}

export default new AuthController();
```

```filename
auth-server\controllers\clientController.js
```

```javascript
import crypto from 'crypto';
import pool from '../../config/database.js';

async function refreshCSPOrigins() {
  try {
    // cors.jsの関数を呼び出してOriginをリフレッシュ
    const { refreshOrigins } = await import('../middleware/cors.js');
    await refreshOrigins();
    
    // server.jsの関数を呼び出してCSP設定を更新
    const { refreshCSPConfiguration } = await import('../server.js');
    const newCSPOrigins = await refreshCSPConfiguration();
    
    console.log('🔄 CSP origins refreshed after client change:', newCSPOrigins);
    return newCSPOrigins;
  } catch (error) {
    console.error('❌ Failed to refresh CSP origins:', error);
    return [];
  }
}

class ClientController {
  async listClients(req, res) {
    try {
      const { page = 1, limit = 10, search = '', active = '' } = req.query;
      const offset = (page - 1) * limit;

      let query = `
        SELECT client_id, name, redirect_uris, allowed_scopes, is_active, created_at, updated_at
        FROM clients
        WHERE 1=1
      `;
      let countQuery = 'SELECT COUNT(*) as total FROM clients WHERE 1=1';
      const params = [];
      const countParams = [];

      if (search) {
        query += ` AND (client_id LIKE ? OR name LIKE ?)`;
        countQuery += ` AND (client_id LIKE ? OR name LIKE ?)`;
        const searchPattern = `%${search}%`;
        params.push(searchPattern, searchPattern);
        countParams.push(searchPattern, searchPattern);
      }

      if (active) {
        const isActive = active === 'true' ? 1 : 0;
        query += ` AND is_active = ?`;
        countQuery += ` AND is_active = ?`;
        params.push(isActive);
        countParams.push(isActive);
      }

      query += ` ORDER BY created_at DESC LIMIT ? OFFSET ?`;
      params.push(parseInt(limit), offset);

      const [clientsResult, countResult] = await Promise.all([
        pool.query(query, params),
        pool.query(countQuery, countParams)
      ]);

      const clients = clientsResult.rows.map(client => ({
        ...client,
        redirect_uris: JSON.parse(client.redirect_uris),
        allowed_scopes: client.allowed_scopes.split(' '),
        client_secret: undefined
      }));

      res.json({
        clients,
        pagination: {
          page: parseInt(page),
          limit: parseInt(limit),
          total: countResult.rows[0].total,
          pages: Math.ceil(countResult.rows[0].total / limit)
        }
      });
    } catch (error) {
      console.error('List clients error:', error);
      res.status(500).json({ error: 'Internal server error' });
    }
  }

  async getClient(req, res) {
    try {
      const { client_id } = req.params;

      const result = await pool.query(
        'SELECT client_id, name, redirect_uris, allowed_scopes, is_active, created_at, updated_at FROM clients WHERE client_id = ?',
        [client_id]
      );

      if (result.rows.length === 0) {
        return res.status(404).json({ 
          error: 'client_not_found',
          error_description: 'Client not found' 
        });
      }

      const client = result.rows[0];
      client.redirect_uris = JSON.parse(client.redirect_uris);
      client.allowed_scopes = client.allowed_scopes.split(' ');

      res.json({ client });
    } catch (error) {
      console.error('Get client error:', error);
      res.status(500).json({ error: 'Internal server error' });
    }
  }

  async createClient(req, res) {
    try {
      const { client_id, name, redirect_uris, allowed_scopes } = req.body;

      if (!client_id || !name || !redirect_uris || !Array.isArray(redirect_uris) || redirect_uris.length === 0) {
        return res.status(400).json({ 
          error: 'invalid_request',
          error_description: 'client_id, name, and redirect_uris are required' 
        });
      }

      const clientIdRegex = /^[a-zA-Z0-9_-]+$/;
      if (!clientIdRegex.test(client_id)) {
        return res.status(400).json({ 
          error: 'invalid_client_id',
          error_description: 'Client ID can only contain letters, numbers, hyphens, and underscores' 
        });
      }

      for (const uri of redirect_uris) {
        try {
          new URL(uri);
        } catch (urlError) {
          return res.status(400).json({ 
            error: 'invalid_redirect_uri',
            error_description: `Invalid redirect URI: ${uri}` 
          });
        }
      }

      const scopes = allowed_scopes && Array.isArray(allowed_scopes) && allowed_scopes.length > 0 
        ? allowed_scopes 
        : ['openid', 'profile', 'email'];

      const existingClient = await pool.query(
        'SELECT client_id FROM clients WHERE client_id = ?',
        [client_id]
      );

      if (existingClient.rows.length > 0) {
        return res.status(409).json({ 
          error: 'client_exists',
          error_description: 'Client ID already exists' 
        });
      }

      const client_secret = crypto.randomBytes(32).toString('hex');

      const insertResult = await pool.query(
        `INSERT INTO clients (client_id, client_secret, name, redirect_uris, allowed_scopes, is_active) 
         VALUES (?, ?, ?, ?, ?, 1)`,
        [client_id, client_secret, name, JSON.stringify(redirect_uris), scopes.join(' ')]
      );

      // CSP設定を即座に更新
      console.log('🔄 Client created, refreshing CSP configuration...');
      await refreshCSPOrigins();

      const newClientResult = await pool.query(
        'SELECT client_id, client_secret, name, redirect_uris, allowed_scopes, is_active, created_at FROM clients WHERE client_id = ?',
        [client_id]
      );

      const newClient = newClientResult.rows[0];
      newClient.redirect_uris = JSON.parse(newClient.redirect_uris);
      newClient.allowed_scopes = newClient.allowed_scopes.split(' ');

      res.status(201).json({
        message: 'Client created successfully',
        client: newClient,
        warning: 'Store the client_secret securely. It will not be shown again.'
      });

    } catch (error) {
      console.error('Create client error:', error);
      res.status(500).json({ error: 'Internal server error' });
    }
  }

  async updateClient(req, res) {
    try {
      const { client_id } = req.params;
      const { name, redirect_uris, allowed_scopes, is_active } = req.body;

      const existingClientResult = await pool.query(
        'SELECT * FROM clients WHERE client_id = ?',
        [client_id]
      );

      if (existingClientResult.rows.length === 0) {
        return res.status(404).json({ 
          error: 'client_not_found',
          error_description: 'Client not found' 
        });
      }

      const updateFields = [];
      const updateParams = [];
      let redirectUrisChanged = false;

      if (name !== undefined) {
        updateFields.push('name = ?');
        updateParams.push(name);
      }

      if (redirect_uris !== undefined) {
        if (!Array.isArray(redirect_uris) || redirect_uris.length === 0) {
          return res.status(400).json({ 
            error: 'invalid_redirect_uris',
            error_description: 'redirect_uris must be a non-empty array' 
          });
        }

        for (const uri of redirect_uris) {
          try {
            new URL(uri);
          } catch (urlError) {
            return res.status(400).json({ 
              error: 'invalid_redirect_uri',
              error_description: `Invalid redirect URI: ${uri}` 
            });
          }
        }

        updateFields.push('redirect_uris = ?');
        updateParams.push(JSON.stringify(redirect_uris));
        redirectUrisChanged = true;
      }

      if (allowed_scopes !== undefined) {
        if (!Array.isArray(allowed_scopes)) {
          return res.status(400).json({ 
            error: 'invalid_scopes',
            error_description: 'allowed_scopes must be an array' 
          });
        }

        updateFields.push('allowed_scopes = ?');
        updateParams.push(allowed_scopes.join(' '));
      }

      if (is_active !== undefined) {
        updateFields.push('is_active = ?');
        updateParams.push(is_active ? 1 : 0);
        redirectUrisChanged = true;
      }

      if (updateFields.length === 0) {
        return res.status(400).json({ 
          error: 'no_updates',
          error_description: 'No valid fields to update' 
        });
      }

      updateFields.push('updated_at = datetime(\'now\')');

      updateParams.push(client_id);
      const updateQuery = `UPDATE clients SET ${updateFields.join(', ')} WHERE client_id = ?`;
      
      const updateResult = await pool.query(updateQuery, updateParams);

      if (updateResult.rowCount === 0) {
        return res.status(404).json({ 
          error: 'client_not_found',
          error_description: 'Client not found' 
        });
      }

      // リダイレクトURIまたはステータスが変更された場合はCSPを更新
      if (redirectUrisChanged) {
        console.log('🔄 Client updated, refreshing CSP configuration...');
        await refreshCSPOrigins();
      }

      const updatedClientResult = await pool.query(
        'SELECT client_id, name, redirect_uris, allowed_scopes, is_active, created_at, updated_at FROM clients WHERE client_id = ?',
        [client_id]
      );

      const updatedClient = updatedClientResult.rows[0];
      updatedClient.redirect_uris = JSON.parse(updatedClient.redirect_uris);
      updatedClient.allowed_scopes = updatedClient.allowed_scopes.split(' ');

      res.json({
        message: 'Client updated successfully',
        client: updatedClient
      });

    } catch (error) {
      console.error('Update client error:', error);
      res.status(500).json({ error: 'Internal server error' });
    }
  }

  async deleteClient(req, res) {
    try {
      const { client_id } = req.params;

      const existingClientResult = await pool.query(
        'SELECT name FROM clients WHERE client_id = ?',
        [client_id]
      );

      if (existingClientResult.rows.length === 0) {
        return res.status(404).json({ 
          error: 'client_not_found',
          error_description: 'Client not found' 
        });
      }

      const clientToDelete = existingClientResult.rows[0];

      const deleteResult = await pool.query('DELETE FROM clients WHERE client_id = ?', [client_id]);

      if (deleteResult.rowCount === 0) {
        return res.status(404).json({ 
          error: 'client_not_found',
          error_description: 'Client not found' 
        });
      }

      // クライアント削除後CSPを更新
      console.log('🔄 Client deleted, refreshing CSP configuration...');
      await refreshCSPOrigins();

      res.json({
        message: 'Client deleted successfully',
        deleted_client: {
          client_id,
          name: clientToDelete.name
        }
      });

    } catch (error) {
      console.error('Delete client error:', error);
      res.status(500).json({ error: 'Internal server error' });
    }
  }

  async regenerateSecret(req, res) {
    try {
      const { client_id } = req.params;

      const existingClientResult = await pool.query(
        'SELECT name FROM clients WHERE client_id = ?',
        [client_id]
      );

      if (existingClientResult.rows.length === 0) {
        return res.status(404).json({ 
          error: 'client_not_found',
          error_description: 'Client not found' 
        });
      }

      const new_client_secret = crypto.randomBytes(32).toString('hex');

      const updateResult = await pool.query(
        'UPDATE clients SET client_secret = ?, updated_at = datetime(\'now\') WHERE client_id = ?',
        [new_client_secret, client_id]
      );

      if (updateResult.rowCount === 0) {
        return res.status(404).json({ 
          error: 'client_not_found',
          error_description: 'Client not found' 
        });
      }

      res.json({
        message: 'Client secret regenerated successfully',
        client_id,
        client_secret: new_client_secret,
        warning: 'Store the new client_secret securely. The old secret is now invalid.'
      });

    } catch (error) {
      console.error('Regenerate client secret error:', error);
      res.status(500).json({ error: 'Internal server error' });
    }
  }

  async getClientStats(req, res) {
    try {
      const statsQuery = `
        SELECT 
          COUNT(*) as total_clients,
          SUM(CASE WHEN is_active = 1 THEN 1 ELSE 0 END) as active_clients,
          SUM(CASE WHEN is_active = 0 THEN 1 ELSE 0 END) as inactive_clients
        FROM clients
      `;

      const result = await pool.query(statsQuery);
      const stats = result.rows[0];

      res.json({ stats });
    } catch (error) {
      console.error('Get client stats error:', error);
      res.status(500).json({ error: 'Internal server error' });
    }
  }
}

export default new ClientController();
```

```filename
auth-server\controllers\originController.js
```

```javascript
import pool from '../../config/database.js';

async function refreshOrigins() {
  try {
    const { refreshOrigins } = await import('../middleware/cors.js');
    return await refreshOrigins();
  } catch (error) {
    console.error('Failed to refresh origins:', error);
    return [];
  }
}

// 🆕 CSP設定も含めて更新する関数
async function refreshOriginsAndCSP() {
  try {
    // Origins を更新（これにより自動的にCSPも更新される）
    const origins = await refreshOrigins();
    
    // 追加でCSP設定を確実に更新
    const { refreshCSPConfiguration } = await import('../server.js');
    await refreshCSPConfiguration();
    
    console.log('🔄 Origins and CSP refreshed:', origins);
    return origins;
  } catch (error) {
    console.error('Failed to refresh origins and CSP:', error);
    return [];
  }
}

class OriginController {
  async listOrigins(req, res) {
    try {
      const result = await pool.query(
        `SELECT o.*, u.username as added_by_username 
         FROM allowed_origins o 
         LEFT JOIN users u ON o.added_by = u.id 
         ORDER BY o.created_at DESC`
      );
      
      res.json({
        origins: result.rows,
        total: result.rows.length
      });
    } catch (error) {
      console.error('List origins error:', error);
      res.status(500).json({ error: 'Internal server error' });
    }
  }

  async addOrigin(req, res) {
    try {
      const { origin, description } = req.body;
      const userId = req.user.sub;
      
      if (!origin) {
        return res.status(400).json({ 
          error: 'invalid_request', 
          error_description: 'Origin is required' 
        });
      }
      
      try {
        new URL(origin);
      } catch (urlError) {
        return res.status(400).json({ 
          error: 'invalid_origin', 
          error_description: 'Invalid origin URL format' 
        });
      }
      
      const existingResult = await pool.query(
        'SELECT id FROM allowed_origins WHERE origin = ?',
        [origin]
      );
      
      if (existingResult.rows.length > 0) {
        return res.status(409).json({ 
          error: 'origin_exists', 
          error_description: 'Origin already exists' 
        });
      }
      
      const insertResult = await pool.query(
        `INSERT INTO allowed_origins (origin, description, added_by, is_active) 
         VALUES (?, ?, ?, 1)`,
        [origin, description || null, userId]
      );
      
      const newOriginResult = await pool.query(
        'SELECT id, origin, description, is_active, created_at FROM allowed_origins WHERE id = ?',
        [insertResult.lastInsertRowid]
      );
      
      // 🔧 修正: CSP設定も一緒に更新
      console.log('🔄 Origin added, refreshing CORS and CSP...');
      await refreshOriginsAndCSP();
      
      res.status(201).json({
        message: 'Origin added successfully',
        origin: newOriginResult.rows[0]
      });
      
    } catch (error) {
      console.error('Add origin error:', error);
      res.status(500).json({ error: 'Internal server error' });
    }
  }

  async removeOrigin(req, res) {
    try {
      const { id } = req.params;
      
      if (!id || isNaN(id)) {
        return res.status(400).json({ 
          error: 'invalid_request', 
          error_description: 'Valid origin ID is required' 
        });
      }
      
      const existingResult = await pool.query(
        'SELECT origin FROM allowed_origins WHERE id = ?',
        [id]
      );
      
      if (existingResult.rows.length === 0) {
        return res.status(404).json({ 
          error: 'origin_not_found', 
          error_description: 'Origin not found' 
        });
      }
      
      await pool.query('DELETE FROM allowed_origins WHERE id = ?', [id]);
      
      // 🔧 修正: CSP設定も一緒に更新
      console.log('🔄 Origin removed, refreshing CORS and CSP...');
      await refreshOriginsAndCSP();
      
      res.json({
        message: 'Origin removed successfully',
        removed_origin: existingResult.rows[0].origin
      });
      
    } catch (error) {
      console.error('Remove origin error:', error);
      res.status(500).json({ error: 'Internal server error' });
    }
  }

  async toggleOrigin(req, res) {
    try {
      const { id } = req.params;
      const { is_active } = req.body;
      
      if (!id || isNaN(id)) {
        return res.status(400).json({ 
          error: 'invalid_request', 
          error_description: 'Valid origin ID is required' 
        });
      }
      
      if (typeof is_active !== 'boolean') {
        return res.status(400).json({ 
          error: 'invalid_request', 
          error_description: 'is_active must be a boolean' 
        });
      }
      
      const updateResult = await pool.query(
        `UPDATE allowed_origins 
         SET is_active = ?, updated_at = datetime('now') 
         WHERE id = ?`,
        [is_active ? 1 : 0, id]
      );
      
      if (updateResult.rowCount === 0) {
        return res.status(404).json({ 
          error: 'origin_not_found', 
          error_description: 'Origin not found' 
        });
      }
      
      const updatedOriginResult = await pool.query(
        'SELECT id, origin, is_active FROM allowed_origins WHERE id = ?',
        [id]
      );
      
      // 🔧 修正: CSP設定も一緒に更新
      console.log('🔄 Origin status changed, refreshing CORS and CSP...');
      await refreshOriginsAndCSP();
      
      res.json({
        message: 'Origin status updated successfully',
        origin: updatedOriginResult.rows[0]
      });
      
    } catch (error) {
      console.error('Toggle origin error:', error);
      res.status(500).json({ error: 'Internal server error' });
    }
  }

  async refreshCors(req, res) {
    try {
      // 🔧 修正: CSP設定も一緒に更新
      console.log('🔄 Manual CORS and CSP refresh requested...');
      const origins = await refreshOriginsAndCSP();
      
      res.json({
        message: 'CORS origins and CSP configuration refreshed successfully',
        active_origins: origins,
        count: origins.length,
        timestamp: new Date().toISOString()
      });
      
    } catch (error) {
      console.error('Refresh CORS error:', error);
      res.status(500).json({ error: 'Internal server error' });
    }
  }
}

export default new OriginController();
```

```filename
auth-server\controllers\tokenController.js
```

```javascript
import { v4 as uuidv4 } from 'uuid';
import pool from '../../config/database.js';
import jwtService from '../services/jwtService.js';

async function getConfigSafely() {
  try {
    const { getConfig } = await import('../../config/configLoader.js');
    return getConfig();
  } catch (error) {
    console.error('Config loading error:', error);
    return {
      jwt: {
        access_token_expiry: 3600,
        id_token_expiry: 3600
      }
    };
  }
}

async function validateClientCredentials(clientId, clientSecret) {
  try {
    const clientResult = await pool.query(
      'SELECT client_secret, is_active FROM clients WHERE client_id = ?',
      [clientId]
    );

    if (clientResult.rows.length === 0) {
      return { valid: false, error: 'invalid_client' };
    }

    const client = clientResult.rows[0];

    if (!client.is_active) {
      return { valid: false, error: 'invalid_client' };
    }

    if (client.client_secret !== clientSecret) {
      return { valid: false, error: 'invalid_client' };
    }

    return { valid: true };
  } catch (error) {
    console.error('Client credential validation error:', error);
    return { valid: false, error: 'server_error' };
  }
}

class TokenController {
  async handleTokenRequest(req, res) {
    try {
      const config = await getConfigSafely();
      const { grant_type, code, client_id, client_secret, redirect_uri } = req.body;

      if (grant_type !== 'authorization_code') {
        return res.status(400).json({
          error: 'unsupported_grant_type',
          error_description: 'Only authorization_code grant type is supported'
        });
      }

      if (!code || !client_id || !client_secret) {
        return res.status(400).json({
          error: 'invalid_request',
          error_description: 'Missing required parameters'
        });
      }

      const clientValidation = await validateClientCredentials(client_id, client_secret);
      if (!clientValidation.valid) {
        return res.status(401).json({
          error: clientValidation.error,
          error_description: 'Client authentication failed'
        });
      }

      const codeResult = await pool.query(
        `SELECT * FROM auth_codes 
         WHERE code = ? 
         AND client_id = ? 
         AND expires_at > datetime('now')`,
        [code, client_id]
      );

      if (codeResult.rows.length === 0) {
        return res.status(400).json({
          error: 'invalid_grant',
          error_description: 'Invalid or expired authorization code'
        });
      }

      const authCode = codeResult.rows[0];

      if (redirect_uri && authCode.redirect_uri !== redirect_uri) {
        return res.status(400).json({
          error: 'invalid_grant',
          error_description: 'Redirect URI mismatch'
        });
      }

      const userResult = await pool.query('SELECT * FROM users WHERE id = ?', [authCode.user_id]);
      
      if (userResult.rows.length === 0) {
        return res.status(400).json({
          error: 'invalid_request',
          error_description: 'User not found'
        });
      }
      
      const user = userResult.rows[0];

      const accessToken = await jwtService.generateAccessToken(user, authCode.scope, client_id);
      const idToken = await jwtService.generateIdToken(user, authCode.scope, client_id);
      const refreshToken = uuidv4();

      const tokenExpiresAt = new Date(Date.now() + (config.jwt?.access_token_expiry || 3600) * 1000);
      await pool.query(
        'INSERT INTO access_tokens (token, user_id, client_id, scope, expires_at) VALUES (?, ?, ?, ?, ?)',
        [accessToken, user.id, client_id, authCode.scope, tokenExpiresAt.toISOString()]
      );

      await pool.query('DELETE FROM auth_codes WHERE code = ?', [code]);

      const includeOrg = authCode.scope && authCode.scope.includes('organization');
      console.log(`🔐 Token issued for ${user.username} (org data: ${includeOrg ? 'included' : 'excluded'})`);

      res.json({
        access_token: accessToken,
        token_type: 'Bearer',
        expires_in: config.jwt?.access_token_expiry || 3600,
        id_token: idToken,
        refresh_token: refreshToken,
        scope: authCode.scope
      });
    } catch (error) {
      console.error('Token error:', error);
      res.status(500).json({
        error: 'server_error',
        error_description: 'Internal server error'
      });
    }
  }
}

export default new TokenController();
```

```filename
auth-server\controllers\userController.js
```

```javascript
import bcrypt from 'bcrypt';
import pool from '../../config/database.js';
import { getUserRole } from '../middleware/rbac.js';

async function getConfigSafely() {
  try {
    const { getConfig } = await import('../../config/configLoader.js');
    return getConfig();
  } catch (error) {
    console.error('Config loading error:', error);
    return {
      security: {
        bcrypt_rounds: 12
      }
    };
  }
}

class UserController {
  // ユーザー一覧取得
  async listUsers(req, res) {
    try {
      const { page = 1, limit = 10, search = '', role = '' } = req.query;
      const offset = (page - 1) * limit;

      // 🔧 修正: 組織情報フィールドを追加
      let query = `
        SELECT id, username, email, first_name, last_name, department, team, supervisor, role, is_active, created_at, updated_at
        FROM users
        WHERE 1=1
      `;
      let countQuery = 'SELECT COUNT(*) as total FROM users WHERE 1=1';
      const params = [];
      const countParams = [];

      // 検索条件の追加
      if (search) {
        query += ` AND (username LIKE ? OR email LIKE ? OR first_name LIKE ? OR last_name LIKE ?)`;
        countQuery += ` AND (username LIKE ? OR email LIKE ? OR first_name LIKE ? OR last_name LIKE ?)`;
        const searchPattern = `%${search}%`;
        params.push(searchPattern, searchPattern, searchPattern, searchPattern);
        countParams.push(searchPattern, searchPattern, searchPattern, searchPattern);
      }

      // 役割フィルター
      if (role) {
        query += ` AND role = ?`;
        countQuery += ` AND role = ?`;
        params.push(role);
        countParams.push(role);
      }

      query += ` ORDER BY created_at DESC LIMIT ? OFFSET ?`;
      params.push(parseInt(limit), offset);

      const [usersResult, countResult] = await Promise.all([
        pool.query(query, params),
        pool.query(countQuery, countParams)
      ]);

      const users = usersResult.rows.map(user => ({
        ...user,
        password_hash: undefined // パスワードハッシュは除外
      }));

      res.json({
        users,
        pagination: {
          page: parseInt(page),
          limit: parseInt(limit),
          total: countResult.rows[0].total,
          pages: Math.ceil(countResult.rows[0].total / limit)
        }
      });
    } catch (error) {
      console.error('List users error:', error);
      res.status(500).json({ error: 'Internal server error' });
    }
  }

  // ユーザー詳細取得
  async getUser(req, res) {
    try {
      const { id } = req.params;

      // 🔧 修正: 組織情報フィールドを追加
      const result = await pool.query(
        'SELECT id, username, email, first_name, last_name, department, team, supervisor, role, is_active, created_at, updated_at FROM users WHERE id = ?',
        [id]
      );

      if (result.rows.length === 0) {
        return res.status(404).json({ 
          error: 'user_not_found',
          error_description: 'User not found' 
        });
      }

      res.json({ user: result.rows[0] });
    } catch (error) {
      console.error('Get user error:', error);
      res.status(500).json({ error: 'Internal server error' });
    }
  }

  // ユーザー作成
  async createUser(req, res) {
    try {
      const { username, email, password, first_name, last_name, department, team, supervisor, role = 'user' } = req.body;

      // バリデーション
      if (!username || !email || !password) {
        return res.status(400).json({ 
          error: 'invalid_request',
          error_description: 'Username, email, and password are required' 
        });
      }

      // メールフォーマットチェック
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      if (!emailRegex.test(email)) {
        return res.status(400).json({ 
          error: 'invalid_email',
          error_description: 'Invalid email format' 
        });
      }

      // パスワード強度チェック
      if (password.length < 6) {
        return res.status(400).json({ 
          error: 'weak_password',
          error_description: 'Password must be at least 6 characters long' 
        });
      }

      // 役割の検証
      if (!['admin', 'user'].includes(role)) {
        return res.status(400).json({ 
          error: 'invalid_role',
          error_description: 'Role must be either "admin" or "user"' 
        });
      }

      // 重複チェック
      const existingUser = await pool.query(
        'SELECT id FROM users WHERE username = ? OR email = ?',
        [username, email]
      );

      if (existingUser.rows.length > 0) {
        return res.status(409).json({ 
          error: 'user_exists',
          error_description: 'Username or email already exists' 
        });
      }

      // パスワードハッシュ化
      const config = await getConfigSafely();
      const bcryptRounds = config.security?.bcrypt_rounds || 12;
      const passwordHash = await bcrypt.hash(password, bcryptRounds);

      // 🔧 修正: 組織情報フィールドを含むユーザー作成
      const insertResult = await pool.query(
        `INSERT INTO users (username, email, password_hash, first_name, last_name, department, team, supervisor, role, is_active) 
         VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, 1)`,
        [
          username, 
          email, 
          passwordHash, 
          first_name || null, 
          last_name || null, 
          department || '-',
          team || '-',
          supervisor || '-',
          role
        ]
      );

      // 🔧 修正: 作成されたユーザー情報を取得（組織情報含む）
      const newUserResult = await pool.query(
        'SELECT id, username, email, first_name, last_name, department, team, supervisor, role, is_active, created_at FROM users WHERE id = ?',
        [insertResult.lastInsertRowid]
      );

      res.status(201).json({
        message: 'User created successfully',
        user: newUserResult.rows[0]
      });

    } catch (error) {
      console.error('Create user error:', error);
      res.status(500).json({ error: 'Internal server error' });
    }
  }

  // ユーザー更新
  async updateUser(req, res) {
    try {
      const { id } = req.params;
      const { username, email, first_name, last_name, department, team, supervisor, role, is_active, password } = req.body;

      // ユーザー存在確認
      const existingUserResult = await pool.query('SELECT * FROM users WHERE id = ?', [id]);
      
      if (existingUserResult.rows.length === 0) {
        return res.status(404).json({ 
          error: 'user_not_found',
          error_description: 'User not found' 
        });
      }

      const existingUser = existingUserResult.rows[0];

      // 自分のadmin権限を削除しようとしていないかチェック
      const currentUserId = req.user?.sub;
      if (currentUserId && currentUserId.toString() === id.toString() && 
          existingUser.role === 'admin' && role && role !== 'admin') {
        return res.status(400).json({ 
          error: 'cannot_remove_own_admin',
          error_description: 'Cannot remove admin role from your own account' 
        });
      }

      // 更新フィールドの準備
      const updateFields = [];
      const updateParams = [];

      if (username !== undefined) {
        // ユーザー名の重複チェック
        const duplicateCheck = await pool.query(
          'SELECT id FROM users WHERE username = ? AND id != ?',
          [username, id]
        );
        if (duplicateCheck.rows.length > 0) {
          return res.status(409).json({ 
            error: 'username_exists',
            error_description: 'Username already exists' 
          });
        }
        updateFields.push('username = ?');
        updateParams.push(username);
      }

      if (email !== undefined) {
        // メール形式チェック
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        if (!emailRegex.test(email)) {
          return res.status(400).json({ 
            error: 'invalid_email',
            error_description: 'Invalid email format' 
          });
        }
        
        // メールの重複チェック
        const duplicateCheck = await pool.query(
          'SELECT id FROM users WHERE email = ? AND id != ?',
          [email, id]
        );
        if (duplicateCheck.rows.length > 0) {
          return res.status(409).json({ 
            error: 'email_exists',
            error_description: 'Email already exists' 
          });
        }
        updateFields.push('email = ?');
        updateParams.push(email);
      }

      if (first_name !== undefined) {
        updateFields.push('first_name = ?');
        updateParams.push(first_name || null);
      }

      if (last_name !== undefined) {
        updateFields.push('last_name = ?');
        updateParams.push(last_name || null);
      }

      // 🔧 修正: 組織情報フィールドの更新処理を追加
      if (department !== undefined) {
        updateFields.push('department = ?');
        updateParams.push(department || '-');
      }

      if (team !== undefined) {
        updateFields.push('team = ?');
        updateParams.push(team || '-');
      }

      if (supervisor !== undefined) {
        updateFields.push('supervisor = ?');
        updateParams.push(supervisor || '-');
      }

      if (role !== undefined) {
        if (!['admin', 'user'].includes(role)) {
          return res.status(400).json({ 
            error: 'invalid_role',
            error_description: 'Role must be either "admin" or "user"' 
          });
        }
        updateFields.push('role = ?');
        updateParams.push(role);
      }

      if (is_active !== undefined) {
        updateFields.push('is_active = ?');
        updateParams.push(is_active ? 1 : 0);
      }

      if (password) {
        if (password.length < 6) {
          return res.status(400).json({ 
            error: 'weak_password',
            error_description: 'Password must be at least 6 characters long' 
          });
        }
        
        const config = await getConfigSafely();
        const bcryptRounds = config.security?.bcrypt_rounds || 12;
        const passwordHash = await bcrypt.hash(password, bcryptRounds);
        
        updateFields.push('password_hash = ?');
        updateParams.push(passwordHash);
      }

      if (updateFields.length === 0) {
        return res.status(400).json({ 
          error: 'no_updates',
          error_description: 'No valid fields to update' 
        });
      }

      // updated_atフィールドを追加
      updateFields.push('updated_at = datetime(\'now\')');

      // 更新実行
      updateParams.push(id);
      const updateQuery = `UPDATE users SET ${updateFields.join(', ')} WHERE id = ?`;
      
      const updateResult = await pool.query(updateQuery, updateParams);

      if (updateResult.rowCount === 0) {
        return res.status(404).json({ 
          error: 'user_not_found',
          error_description: 'User not found' 
        });
      }

      // 🔧 修正: 更新されたユーザー情報を取得（組織情報含む）
      const updatedUserResult = await pool.query(
        'SELECT id, username, email, first_name, last_name, department, team, supervisor, role, is_active, created_at, updated_at FROM users WHERE id = ?',
        [id]
      );

      res.json({
        message: 'User updated successfully',
        user: updatedUserResult.rows[0]
      });

    } catch (error) {
      console.error('Update user error:', error);
      res.status(500).json({ error: 'Internal server error' });
    }
  }

  // ユーザー削除
  async deleteUser(req, res) {
    try {
      const { id } = req.params;
      const currentUserId = req.user?.sub;

      // 自分自身を削除しようとしていないかチェック
      if (currentUserId && currentUserId.toString() === id.toString()) {
        return res.status(400).json({ 
          error: 'cannot_delete_self',
          error_description: 'Cannot delete your own account' 
        });
      }

      // ユーザー存在確認
      const existingUserResult = await pool.query(
        'SELECT username, role FROM users WHERE id = ?',
        [id]
      );

      if (existingUserResult.rows.length === 0) {
        return res.status(404).json({ 
          error: 'user_not_found',
          error_description: 'User not found' 
        });
      }

      const userToDelete = existingUserResult.rows[0];

      // 削除実行
      const deleteResult = await pool.query('DELETE FROM users WHERE id = ?', [id]);

      if (deleteResult.rowCount === 0) {
        return res.status(404).json({ 
          error: 'user_not_found',
          error_description: 'User not found' 
        });
      }

      res.json({
        message: 'User deleted successfully',
        deleted_user: {
          id: parseInt(id),
          username: userToDelete.username
        }
      });

    } catch (error) {
      console.error('Delete user error:', error);
      res.status(500).json({ error: 'Internal server error' });
    }
  }

  // ユーザー統計情報
  async getUserStats(req, res) {
    try {
      const statsQuery = `
        SELECT 
          COUNT(*) as total_users,
          SUM(CASE WHEN role = 'admin' THEN 1 ELSE 0 END) as admin_count,
          SUM(CASE WHEN role = 'user' THEN 1 ELSE 0 END) as user_count,
          SUM(CASE WHEN is_active = 1 THEN 1 ELSE 0 END) as active_users,
          SUM(CASE WHEN is_active = 0 THEN 1 ELSE 0 END) as inactive_users
        FROM users
      `;

      const result = await pool.query(statsQuery);
      const stats = result.rows[0];

      res.json({ stats });
    } catch (error) {
      console.error('Get user stats error:', error);
      res.status(500).json({ error: 'Internal server error' });
    }
  }
}

export default new UserController();
```

```filename
auth-server\middleware\auth.js
```

```javascript
import jwt from 'jsonwebtoken';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import pool from '../../config/database.js';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

async function getConfigSafely() {
  try {
    const { getConfig } = await import('../../config/configLoader.js');
    return getConfig();
  } catch (error) {
    console.error('Config loading error:', error);
    return {
      jwt: {
        algorithm: 'RS256',
        public_key_path: './keys/public.pem',
        private_key_path: './keys/private.pem'
      },
      security: {
        session_secret: 'fallback-secret'
      }
    };
  }
}

async function getVerificationKey() {
  const config = await getConfigSafely();
  
  // RSAキーを優先的に使用
  if (config.jwt.algorithm === 'RS256') {
    const publicKeyPath = path.join(__dirname, '../../', config.jwt.public_key_path);
    
    try {
      if (fs.existsSync(publicKeyPath)) {
        const publicKey = fs.readFileSync(publicKeyPath, 'utf8');
        return { key: publicKey, algorithm: 'RS256' };
      }
    } catch (error) {
      console.warn('RSA public key loading failed:', error.message);
    }
  }
  
  // フォールバックとしてHMACを使用
  const hmacSecret = process.env.JWT_SECRET || config.security?.session_secret || 'fallback-secret';
  return { key: hmacSecret, algorithm: 'HS256' };
}

const authenticateToken = async (req, res, next) => {
  try {
    const authHeader = req.headers['authorization'];
    const token = authHeader && authHeader.split(' ')[1];

    if (!token) {
      return res.status(401).json({ error: 'Access token required' });
    }

    // トークンの有効性をデータベースで確認（期限切れチェック含む）
    const tokenResult = await pool.query(
      `SELECT * FROM access_tokens 
       WHERE token = ? 
       AND expires_at > datetime('now')`,
      [token]
    );

    if (tokenResult.rows.length === 0) {
      return res.status(401).json({ error: 'Invalid or expired token' });
    }

    // JWT検証用のキーとアルゴリズムを取得
    const { key, algorithm } = await getVerificationKey();
    
    let decoded;
    try {
      // 指定されたアルゴリズムで検証
      decoded = jwt.verify(token, key, { algorithms: [algorithm] });
    } catch (jwtError) {
      // RSA検証が失敗した場合、HMACでも試行
      if (algorithm === 'RS256') {
        console.warn('RSA verification failed, trying HMAC fallback');
        const config = await getConfigSafely();
        const hmacSecret = process.env.JWT_SECRET || config.security?.session_secret || 'fallback-secret';
        
        try {
          decoded = jwt.verify(token, hmacSecret, { algorithms: ['HS256'] });
        } catch (hmacError) {
          console.error('Both RSA and HMAC verification failed:', { rsa: jwtError.message, hmac: hmacError.message });
          return res.status(403).json({ error: 'Invalid token signature' });
        }
      } else {
        console.error('JWT verification failed:', jwtError.message);
        return res.status(403).json({ error: 'Invalid token' });
      }
    }

    // デコードされたトークン情報をリクエストに追加
    req.user = decoded;
    next();
    
  } catch (error) {
    console.error('Auth middleware error:', error);
    return res.status(500).json({ error: 'Authentication service error' });
  }
};

// トークン情報だけを検証する（データベースチェックなし）
const verifyTokenOnly = async (req, res, next) => {
  try {
    const authHeader = req.headers['authorization'];
    const token = authHeader && authHeader.split(' ')[1];

    if (!token) {
      return res.status(401).json({ error: 'Access token required' });
    }

    const { key, algorithm } = await getVerificationKey();
    
    let decoded;
    try {
      decoded = jwt.verify(token, key, { algorithms: [algorithm] });
    } catch (jwtError) {
      if (algorithm === 'RS256') {
        const config = await getConfigSafely();
        const hmacSecret = process.env.JWT_SECRET || config.security?.session_secret || 'fallback-secret';
        
        try {
          decoded = jwt.verify(token, hmacSecret, { algorithms: ['HS256'] });
        } catch (hmacError) {
          return res.status(403).json({ error: 'Invalid token' });
        }
      } else {
        return res.status(403).json({ error: 'Invalid token' });
      }
    }

    req.user = decoded;
    next();
    
  } catch (error) {
    console.error('Token verification error:', error);
    return res.status(500).json({ error: 'Token verification service error' });
  }
};

export { authenticateToken, verifyTokenOnly };
```

```filename
auth-server\middleware\cors.js
```

```javascript
import cors from 'cors';
import { getConfig } from '../../config/configLoader.js';

let allowedOrigins = [];
let clientOrigins = [];
let lastUpdated = 0;
const CACHE_DURATION = 3000; // 3 seconds, 今回はデモ用に短めに設定

async function loadAllowedOrigins() {
  try {
    const { default: pool } = await import('../../config/database.js');
    
    const tableExists = pool.rawDb.prepare(
      "SELECT name FROM sqlite_master WHERE type='table' AND name='allowed_origins'"
    ).get();
    
    if (!tableExists) {
      console.log('⚠️ allowed_origins table not found, using config defaults only');
      const config = getConfig();
      allowedOrigins = [
        `http://localhost:3000`,
        config.server.auth_server_url
      ];
      lastUpdated = Date.now();
      return allowedOrigins;
    }
    
    const result = pool.query('SELECT origin FROM allowed_origins WHERE is_active = 1');
    allowedOrigins = result.rows.map(row => row.origin);
    lastUpdated = Date.now();
    
    const config = getConfig();
    const configOrigins = [
      `http://localhost:3000`,
      config.server.auth_server_url
    ];
    
    configOrigins.forEach(origin => {
      if (!allowedOrigins.includes(origin)) {
        allowedOrigins.push(origin);
      }
    });
    
    console.log('✅ Loaded allowed origins:', allowedOrigins);
    return allowedOrigins;
  } catch (error) {
    console.error('Failed to load allowed origins from database:', error);
    const config = getConfig();
    allowedOrigins = [
      `http://localhost:3000`,
      config.server.auth_server_url
    ];
    lastUpdated = Date.now();
    console.log('🔄 Using fallback origins:', allowedOrigins);
    return allowedOrigins;
  }
}

async function loadClientOrigins() {
  try {
    const { default: pool } = await import('../../config/database.js');
    
    const clientsTableExists = pool.rawDb.prepare(
      "SELECT name FROM sqlite_master WHERE type='table' AND name='clients'"
    ).get();
    
    if (!clientsTableExists) {
      console.log('⚠️ clients table not found, no client origins loaded');
      clientOrigins = [];
      return clientOrigins;
    }
    
    const result = pool.query('SELECT client_id, redirect_uris FROM clients WHERE is_active = 1');
    const origins = new Set();
    
    for (const row of result.rows) {
      try {
        const redirectUris = JSON.parse(row.redirect_uris);
        if (Array.isArray(redirectUris)) {
          for (const uri of redirectUris) {
            try {
              const url = new URL(uri);
              const origin = `${url.protocol}//${url.host}`;
              origins.add(origin);
            } catch (urlError) {
              console.warn(`⚠️ Invalid redirect URI for client ${row.client_id}: ${uri}`);
            }
          }
        }
      } catch (parseError) {
        console.warn(`⚠️ Failed to parse redirect_uris for client ${row.client_id}`);
      }
    }
    
    clientOrigins = Array.from(origins);
    console.log('✅ Loaded client origins:', clientOrigins);
    return clientOrigins;
    
  } catch (error) {
    console.error('Failed to load client origins from database:', error);
    clientOrigins = [];
    return clientOrigins;
  }
}

async function getAllowedOrigins() {
  const now = Date.now();
  if (now - lastUpdated > CACHE_DURATION || allowedOrigins.length === 0) {
    await loadAllowedOrigins();
    await loadClientOrigins();
  }
  return allowedOrigins;
}

async function getCSPOrigins() {
  const now = Date.now();
  if (now - lastUpdated > CACHE_DURATION || allowedOrigins.length === 0 || clientOrigins.length === 0) {
    await loadAllowedOrigins();
    await loadClientOrigins();
  }
  
  const cspOrigins = new Set([...allowedOrigins, ...clientOrigins]);
  const finalOrigins = Array.from(cspOrigins);
  
  console.log('🛡️ CSP origins for form-action:', finalOrigins);
  return finalOrigins;
}

async function refreshOrigins() {
  lastUpdated = 0;
  
  await loadAllowedOrigins();
  await loadClientOrigins();
  
  const combinedOrigins = new Set([...allowedOrigins, ...clientOrigins]);
  const finalOrigins = Array.from(combinedOrigins);
  
  console.log('🔄 Origins refreshed:', {
    allowedOrigins: allowedOrigins.length,
    clientOrigins: clientOrigins.length,
    total: finalOrigins.length,
    origins: finalOrigins
  });
  
  // 🆕 CSP設定も自動更新
  try {
    const { refreshCSPConfiguration } = await import('../server.js');
    await refreshCSPConfiguration();
    console.log('🛡️ CSP configuration auto-updated after origins refresh');
  } catch (error) {
    console.warn('⚠️ Failed to auto-update CSP configuration:', error.message);
  }
  
  return finalOrigins;
}

// 🆕 CSP設定のみを強制更新する関数
async function forceRefreshCSP() {
  try {
    // キャッシュを無効化
    lastUpdated = 0;
    
    // Origins を再読み込み
    await loadAllowedOrigins();
    await loadClientOrigins();
    
    // CSP設定を更新
    const { refreshCSPConfiguration } = await import('../server.js');
    const updatedOrigins = await refreshCSPConfiguration();
    
    console.log('🛡️ CSP force refresh completed:', updatedOrigins);
    return updatedOrigins;
  } catch (error) {
    console.error('❌ Failed to force refresh CSP:', error);
    throw error;
  }
}

const dynamicCors = cors({
  origin: async (origin, callback) => {
    try {
      const allowed = await getAllowedOrigins();
      
      if (!origin) {
        return callback(null, true);
      }
      
      if (origin === 'null') {
        return callback(null, true);
      }
      
      const allOrigins = new Set([...allowed, ...clientOrigins]);
      const allowedList = Array.from(allOrigins);
      
      if (allowedList.includes(origin)) {
        callback(null, true);
      } else {
        console.log(`❌ CORS blocked origin: ${origin}`);
        console.log(`   Allowed origins: ${allowedList.join(', ')}`);
        callback(new Error('Not allowed by CORS'));
      }
    } catch (error) {
      console.error('CORS check error:', error);
      callback(error);
    }
  },
  credentials: true
});

export { 
  dynamicCors, 
  getAllowedOrigins, 
  refreshOrigins, 
  loadAllowedOrigins, 
  getCSPOrigins,
  loadClientOrigins,
  forceRefreshCSP 
};
```

```filename
auth-server\middleware\rateLimit.js
```

```javascript
import rateLimit from 'express-rate-limit';
import { getConfig } from '../../config/configLoader.js';

const config = getConfig();

const createRateLimiter = (options = {}) => {
  return rateLimit({
    windowMs: options.windowMs || config.security.rate_limit.window_ms,
    max: options.max || config.security.rate_limit.max_requests,
    message: {
      error: 'too_many_requests',
      error_description: 'Too many requests, please try again later.'
    },
    standardHeaders: true,
    legacyHeaders: false,
    ...options
  });
};

const authRateLimit = createRateLimiter({
  max: 5,
  message: {
    error: 'too_many_login_attempts',
    error_description: 'Too many login attempts, please try again later.'
  }
});

const tokenRateLimit = createRateLimiter({
  max: 10,
});

const apiRateLimit = createRateLimiter();

export { 
  createRateLimiter, 
  authRateLimit, 
  tokenRateLimit, 
  apiRateLimit 
};
```

```filename
auth-server\middleware\rbac.js
```

```javascript
import pool from '../../config/database.js';

/**
 * Role-Based Access Control (RBAC) Middleware
 */

// ユーザーの役割を取得
async function getUserRole(userId) {
  try {
    const result = await pool.query('SELECT role FROM users WHERE id = ?', [userId]);
    if (result.rows.length === 0) {
      return null;
    }
    return result.rows[0].role;
  } catch (error) {
    console.error('Error fetching user role:', error);
    return null;
  }
}

// 管理者権限をチェック
const requireAdmin = async (req, res, next) => {
  try {
    const userId = req.user?.sub;
    
    if (!userId) {
      return res.status(401).json({ 
        error: 'unauthorized',
        error_description: 'Authentication required' 
      });
    }

    const userRole = await getUserRole(userId);
    
    if (userRole !== 'admin') {
      return res.status(403).json({ 
        error: 'forbidden',
        error_description: 'Admin privileges required' 
      });
    }

    req.user.role = userRole;
    next();
  } catch (error) {
    console.error('Admin authorization error:', error);
    res.status(500).json({ 
      error: 'server_error',
      error_description: 'Authorization service error' 
    });
  }
};

// 特定の役割をチェック
const requireRole = (allowedRoles) => {
  return async (req, res, next) => {
    try {
      const userId = req.user?.sub;
      
      if (!userId) {
        return res.status(401).json({ 
          error: 'unauthorized',
          error_description: 'Authentication required' 
        });
      }

      const userRole = await getUserRole(userId);
      
      if (!allowedRoles.includes(userRole)) {
        return res.status(403).json({ 
          error: 'forbidden',
          error_description: `Required role: ${allowedRoles.join(' or ')}` 
        });
      }

      req.user.role = userRole;
      next();
    } catch (error) {
      console.error('Role authorization error:', error);
      res.status(500).json({ 
        error: 'server_error',
        error_description: 'Authorization service error' 
      });
    }
  };
};

// ユーザー自身または管理者のみアクセス可能
const requireSelfOrAdmin = async (req, res, next) => {
  try {
    const userId = req.user?.sub;
    const targetUserId = req.params.id;
    
    if (!userId) {
      return res.status(401).json({ 
        error: 'unauthorized',
        error_description: 'Authentication required' 
      });
    }

    const userRole = await getUserRole(userId);
    
    // 管理者または自分自身の場合はアクセス許可
    if (userRole === 'admin' || userId.toString() === targetUserId.toString()) {
      req.user.role = userRole;
      next();
    } else {
      return res.status(403).json({ 
        error: 'forbidden',
        error_description: 'Access denied: insufficient privileges' 
      });
    }
  } catch (error) {
    console.error('Self or admin authorization error:', error);
    res.status(500).json({ 
      error: 'server_error',
      error_description: 'Authorization service error' 
    });
  }
};

export { 
  requireAdmin, 
  requireRole, 
  requireSelfOrAdmin, 
  getUserRole 
};
```

```filename
auth-server\models\User.js
```

```javascript
class User {
  constructor(data) {
    this.id = data.id;
    this.username = data.username;
    this.email = data.email;
    this.firstName = data.first_name;
    this.lastName = data.last_name;
    this.isActive = data.is_active;
    this.createdAt = data.created_at;
    this.updatedAt = data.updated_at;
  }

  static fromDatabase(row) {
    return new User(row);
  }

  toJSON() {
    return {
      id: this.id,
      username: this.username,
      email: this.email,
      firstName: this.firstName,
      lastName: this.lastName,
      isActive: this.isActive
    };
  }
}

export default User;
```

```filename
auth-server\routes\admin.js
```

```javascript
import express from 'express';
import adminController from '../controllers/adminController.js';
import { authenticateToken } from '../middleware/auth.js';
import { requireAdmin } from '../middleware/rbac.js';

const router = express.Router();

const ADMIN_CLIENT_ID = 'admin-panel';
const ADMIN_CLIENT_SECRET = 'admin-secret-change-in-production';
const ADMIN_CALLBACK_URL = 'http://localhost:3303/admin/callback';

const checkAdminAuth = async (req, res, next) => {
  if (req.session && req.session.admin_access_token) {
    req.headers.authorization = `Bearer ${req.session.admin_access_token}`;
    return next();
  }
  
  const authUrl = `/oauth2/authorize?response_type=code&client_id=${ADMIN_CLIENT_ID}&redirect_uri=${encodeURIComponent(ADMIN_CALLBACK_URL)}&scope=openid%20profile%20email%20admin&state=${encodeURIComponent(req.originalUrl)}`;
  
  res.redirect(authUrl);
};

router.get('/callback', async (req, res) => {
  try {
    const { code, state, error } = req.query;
    
    if (error) {
      console.error('OAuth error:', error);
      return res.redirect('/admin/login-error?error=' + encodeURIComponent(error));
    }
    
    if (!code) {
      return res.redirect('/admin/login-error?error=missing_code');
    }
    
    const tokenResponse = await fetch('http://localhost:3303/token', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded',
      },
      body: new URLSearchParams({
        grant_type: 'authorization_code',
        code: code,
        client_id: ADMIN_CLIENT_ID,
        client_secret: ADMIN_CLIENT_SECRET,
        redirect_uri: ADMIN_CALLBACK_URL
      })
    });
    
    if (!tokenResponse.ok) {
      console.error('Token exchange failed:', tokenResponse.status);
      return res.redirect('/admin/login-error?error=token_exchange_failed');
    }
    
    const tokenData = await tokenResponse.json();
    
    req.session.admin_access_token = tokenData.access_token;
    req.session.admin_user = tokenData;
    
    const redirectUrl = state && state !== 'undefined' ? state : '/admin/dashboard';
    res.redirect(redirectUrl);
    
  } catch (error) {
    console.error('Admin callback error:', error);
    res.redirect('/admin/login-error?error=callback_processing_failed');
  }
});

router.get('/login-error', (req, res) => {
  const error = req.query.error || 'unknown_error';
  res.render('admin/login-error', {
    error: error,
    pageTitle: 'Login Error'
  });
});

const handleLogout = (req, res) => {
  if (req.session) {
    req.session.destroy((err) => {
      if (err) {
        console.error('Logout error:', err);
      }
      res.redirect('/admin');
    });
  } else {
    res.redirect('/admin');
  }
};

router.get('/logout', handleLogout);
router.post('/logout', handleLogout);

router.get('/', (req, res) => {
  res.redirect('/admin/dashboard');
});

router.use(checkAdminAuth);
router.use(authenticateToken);
router.use(requireAdmin);

router.get('/dashboard', adminController.showDashboard);
router.get('/users', adminController.showUsers);
router.get('/clients', adminController.showClients);
router.get('/origins', adminController.showOrigins);
router.get('/system', adminController.showSystemInfo);

export default router;
```

```filename
auth-server\routes\auth.js
```

```javascript
import express from 'express';
import authController from '../controllers/authController.js';
import { authRateLimit } from '../middleware/rateLimit.js';

const router = express.Router();

router.get('/login', authController.showLogin);
router.post('/login', authRateLimit, authController.handleLogin);
router.post('/logout', authController.logout);

export default router;
```

```filename
auth-server\routes\clients.js
```

```javascript
import express from 'express';
import clientController from '../controllers/clientController.js';
import { authenticateToken } from '../middleware/auth.js';
import { requireAdmin } from '../middleware/rbac.js';
import { apiRateLimit } from '../middleware/rateLimit.js';

const router = express.Router();

// 全てのルートで認証と管理者権限が必要
router.use(authenticateToken);
router.use(requireAdmin);
router.use(apiRateLimit);

// クライアント統計情報
router.get('/stats', clientController.getClientStats);

// クライアント一覧取得
router.get('/', clientController.listClients);

// クライアント作成
router.post('/', clientController.createClient);

// クライアント詳細取得
router.get('/:client_id', clientController.getClient);

// クライアント更新
router.patch('/:client_id', clientController.updateClient);

// クライアント削除
router.delete('/:client_id', clientController.deleteClient);

// クライアントシークレット再生成
router.post('/:client_id/regenerate-secret', clientController.regenerateSecret);

export default router;
```

```filename
auth-server\routes\oauth.js
```

```javascript
import express from 'express';
import pool from '../../config/database.js';
import { apiRateLimit } from '../middleware/rateLimit.js';

const router = express.Router();

async function validateClientAndRedirectUri(clientId, redirectUri) {
  if (!clientId || !redirectUri) {
    return { valid: false, error: 'invalid_request', description: 'Missing required parameters' };
  }

  try {
    const clientResult = await pool.query(
      'SELECT client_id, redirect_uris, is_active FROM clients WHERE client_id = ?',
      [clientId]
    );

    if (clientResult.rows.length === 0) {
      return { valid: false, error: 'invalid_client', description: 'Client not found' };
    }

    const client = clientResult.rows[0];

    if (!client.is_active) {
      return { valid: false, error: 'invalid_client', description: 'Client is inactive' };
    }

    let allowedUris;
    try {
      allowedUris = JSON.parse(client.redirect_uris);
    } catch (parseError) {
      return { valid: false, error: 'server_error', description: 'Invalid client configuration' };
    }

    if (!Array.isArray(allowedUris) || !allowedUris.includes(redirectUri)) {
      return { valid: false, error: 'invalid_redirect_uri', description: 'Redirect URI not registered' };
    }

    return { valid: true, client };
    
  } catch (error) {
    console.error('OAuth validation error:', error);
    return { valid: false, error: 'server_error', description: 'Internal server error' };
  }
}

router.get('/authorize', apiRateLimit, async (req, res) => {
  const { client_id, redirect_uri, scope, state, response_type } = req.query;
  
  if (response_type !== 'code') {
    return res.status(400).json({ 
      error: 'unsupported_response_type',
      error_description: 'Only authorization_code flow is supported'
    });
  }

  const validation = await validateClientAndRedirectUri(client_id, redirect_uri);
  
  if (!validation.valid) {
    return res.status(400).json({
      error: validation.error,
      error_description: validation.description
    });
  }

  res.redirect(`/auth/login?client_id=${encodeURIComponent(client_id)}&redirect_uri=${encodeURIComponent(redirect_uri)}&scope=${encodeURIComponent(scope || '')}&state=${encodeURIComponent(state || '')}`);
});

export default router;
```

```filename
auth-server\routes\origins.js
```

```javascript
import express from 'express';
import originController from '../controllers/originController.js';
import { authenticateToken } from '../middleware/auth.js';
import { apiRateLimit } from '../middleware/rateLimit.js';

const router = express.Router();

router.use(authenticateToken);
router.use(apiRateLimit);

router.get('/', originController.listOrigins);
router.post('/', originController.addOrigin);
router.delete('/:id', originController.removeOrigin);
router.patch('/:id', originController.toggleOrigin);
router.post('/refresh', originController.refreshCors);

export default router;
```

```filename
auth-server\routes\token.js
```

```javascript
import express from 'express';
import tokenController from '../controllers/tokenController.js';
import { tokenRateLimit } from '../middleware/rateLimit.js';

const router = express.Router();

router.post('/', tokenRateLimit, tokenController.handleTokenRequest);

export default router;
```

```filename
auth-server\routes\userinfo.js
```

```javascript
import express from 'express';
import { verifyTokenOnly } from '../middleware/auth.js';
import pool from '../../config/database.js';

const router = express.Router();

// UserInfo endpoint - OAuth 2.0/OpenID Connect standard
router.get('/', verifyTokenOnly, async (req, res) => {
  try {
    const userId = req.user.sub;
    const tokenScope = req.user.scope || '';
    const requestedScopes = tokenScope.split(' ');

    // ユーザー情報を取得（組織情報含む）
    const userResult = await pool.query(
      'SELECT * FROM users WHERE id = ?',
      [userId]
    );

    if (userResult.rows.length === 0) {
      return res.status(404).json({
        error: 'user_not_found',
        error_description: 'User not found'
      });
    }

    const user = userResult.rows[0];

    // 基本的なユーザー情報
    const userInfo = {
      sub: user.id.toString(),
      preferred_username: user.username
    };

    // Email scope
    if (requestedScopes.includes('email')) {
      userInfo.email = user.email;
      userInfo.email_verified = true;
    }

    // Profile scope
    if (requestedScopes.includes('profile')) {
      userInfo.name = `${user.first_name || ''} ${user.last_name || ''}`.trim();
      userInfo.given_name = user.first_name || '';
      userInfo.family_name = user.last_name || '';
      userInfo.updated_at = user.updated_at;
    }

    // 🆕 Organization scope - 組織情報
    if (requestedScopes.includes('organization')) {
      userInfo.department = user.department || '-';
      userInfo.team = user.team || '-';
      userInfo.supervisor = user.supervisor || '-';
      userInfo.organization = {
        department: user.department || '-',
        team: user.team || '-',
        supervisor: user.supervisor || '-'
      };
    }

    // 🆕 Admin scope - 管理者情報
    if (requestedScopes.includes('admin') && user.role === 'admin') {
      userInfo.role = user.role;
    }

    res.json(userInfo);

  } catch (error) {
    console.error('UserInfo error:', error);
    res.status(500).json({
      error: 'server_error',
      error_description: 'Internal server error'
    });
  }
});

export default router;
```

```filename
auth-server\routes\users.js
```

```javascript
import express from 'express';
import userController from '../controllers/userController.js';
import { authenticateToken } from '../middleware/auth.js';
import { requireAdmin, requireSelfOrAdmin } from '../middleware/rbac.js';
import { apiRateLimit } from '../middleware/rateLimit.js';

const router = express.Router();

// 全てのルートで認証が必要
router.use(authenticateToken);
router.use(apiRateLimit);

// ユーザー統計情報（管理者のみ）
router.get('/stats', requireAdmin, userController.getUserStats);

// ユーザー一覧取得（管理者のみ）
router.get('/', requireAdmin, userController.listUsers);

// ユーザー作成（管理者のみ）
router.post('/', requireAdmin, userController.createUser);

// ユーザー詳細取得（本人または管理者）
router.get('/:id', requireSelfOrAdmin, userController.getUser);

// ユーザー更新（本人または管理者）
router.patch('/:id', requireSelfOrAdmin, userController.updateUser);

// ユーザー削除（管理者のみ）
router.delete('/:id', requireAdmin, userController.deleteUser);

export default router;
```

```filename
auth-server\routes\wellknown.js
```

```javascript
import express from 'express';
import { getConfig } from '../../config/configLoader.js';

const router = express.Router();

router.get('/openid-configuration', (req, res) => {
  const config = getConfig();
  const baseUrl = `${req.protocol}://${req.get('host')}`;
  
  const discoveryConfig = {
    issuer: config.jwt.issuer,
    authorization_endpoint: `${baseUrl}/oauth2/authorize`,
    token_endpoint: `${baseUrl}/token`,
    userinfo_endpoint: `${baseUrl}/userinfo`,
    jwks_uri: `${baseUrl}/.well-known/jwks`,
    response_types_supported: ['code'],
    grant_types_supported: ['authorization_code'],
    subject_types_supported: ['public'],
    id_token_signing_alg_values_supported: [config.jwt.algorithm],
    scopes_supported: config.oauth.default_scopes,
    token_endpoint_auth_methods_supported: ['client_secret_post', 'client_secret_basic'],
    claims_supported: ['sub', 'iss', 'aud', 'exp', 'iat', 'email', 'name', 'preferred_username']
  };
  
  res.json(discoveryConfig);
});

router.get('/jwks', async (req, res) => {
  try {
    const jwtService = await import('../services/jwtService.js');
    const jwks = await jwtService.default.getJWKS();
    res.json(jwks);
  } catch (error) {
    console.error('JWKS error:', error);
    res.status(500).json({ error: 'Internal Server Error' });
  }
});

export default router;
```

```filename
auth-server\server.js
```

```javascript
import express from 'express';
import path from 'path';
import fs from 'fs';
import { fileURLToPath } from 'url';
import morgan from 'morgan';
import helmet from 'helmet';
import session from 'express-session';
import flash from 'connect-flash';
import dotenv from 'dotenv';
import { getConfig } from '../config/configLoader.js';
import userinfoRoutes from './routes/userinfo.js';
import fetch, { Headers, Request, Response } from 'node-fetch';

if (!globalThis.fetch) {
  globalThis.fetch = fetch;
  globalThis.Headers = Headers;
  globalThis.Request = Request;
  globalThis.Response = Response;
}

import authRoutes from './routes/auth.js';
import oauthRoutes from './routes/oauth.js';
import tokenRoutes from './routes/token.js';
import wellKnownRoutes from './routes/wellknown.js';
import originRoutes from './routes/origins.js';
import adminRoutes from './routes/admin.js';
import userRoutes from './routes/users.js';
import clientRoutes from './routes/clients.js';
import { dynamicCors, loadAllowedOrigins, getCSPOrigins } from './middleware/cors.js';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

dotenv.config();

const app = express();
const config = getConfig();
const PORT = process.env.PORT || config.server.auth_port;

const projectRoot = path.resolve(__dirname, '..');
const logsDir = path.join(projectRoot, 'logs');
if (!fs.existsSync(logsDir)) {
  fs.mkdirSync(logsDir, { recursive: true });
}

await loadAllowedOrigins();

let currentHelmet = null;

async function setupDynamicCSP() {
  try {
    const cspOrigins = await getCSPOrigins();
    const formActionList = ["'self'", ...cspOrigins];
    
    console.log('🛡️ CSP form-action origins:', formActionList);
    
    const newHelmet = helmet({
      contentSecurityPolicy: {
        directives: {
          defaultSrc: ["'self'"],
          styleSrc: ["'self'", "'unsafe-inline'"],
          scriptSrc: ["'self'"],
          imgSrc: ["'self'", "data:", "https:"],
          formAction: formActionList,
        },
      },
    });
    
    currentHelmet = newHelmet;
    return newHelmet;
  } catch (error) {
    console.warn('⚠️ Failed to setup dynamic CSP, using defaults:', error.message);
    
    const fallbackHelmet = helmet({
      contentSecurityPolicy: {
        directives: {
          defaultSrc: ["'self'"],
          styleSrc: ["'self'", "'unsafe-inline'"],
          scriptSrc: ["'self'"],
          imgSrc: ["'self'", "data:", "https:"],
          formAction: ["'self'", "http://localhost:3000", "http://localhost:3303"],
        },
      },
    });
    
    currentHelmet = fallbackHelmet;
    return fallbackHelmet;
  }
}

// 🆕 動的CSPミドルウェア
const dynamicHelmetMiddleware = async (req, res, next) => {
  if (currentHelmet) {
    try {
      currentHelmet(req, res, next);
    } catch (error) {
      console.warn('⚠️ CSP middleware error:', error.message);
      next();
    }
  } else {
    console.warn('⚠️ No CSP middleware available, proceeding without CSP');
    next();
  }
};

const dynamicHelmet = await setupDynamicCSP();

// 🔧 修正: 静的なhelmetの代わりに動的ミドルウェアを使用
app.use(dynamicHelmetMiddleware);

app.use(dynamicCors);
app.use(morgan('common'));
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

app.use(session({
  secret: process.env.SESSION_SECRET || config.security.session_secret,
  resave: false,
  saveUninitialized: false,
  cookie: { 
    secure: false,
    maxAge: 3600000,
    httpOnly: true
  },
  name: 'admin.session.id'
}));

app.use(flash());
app.use(express.static(path.join(__dirname, 'public')));

app.set('view engine', 'ejs');
app.set('views', path.join(__dirname, 'views'));

app.use('/auth', authRoutes);
app.use('/oauth2', oauthRoutes);
app.use('/token', tokenRoutes);
app.use('/.well-known', wellKnownRoutes);
app.use('/userinfo', userinfoRoutes);

app.use('/admin', adminRoutes);
app.use('/admin/api/users', userRoutes);
app.use('/admin/api/clients', clientRoutes);
app.use('/admin/origins', originRoutes);

// 🆕 CSP リフレッシュエンドポイントを改良
app.post('/admin/refresh-csp', async (req, res) => {
  try {
    console.log('🔄 Manual CSP refresh requested...');
    
    // 強制的にCSP設定を更新
    const newCSPOrigins = await refreshCSPConfiguration();
    
    console.log('✅ Manual CSP configuration updated');
    
    res.json({ 
      message: 'CSP configuration refreshed successfully',
      origins: newCSPOrigins,
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    console.error('❌ Failed to refresh CSP:', error);
    res.status(500).json({ 
      error: 'Failed to refresh CSP configuration',
      details: error.message 
    });
  }
});

app.get('/health', (req, res) => {
  res.json({ 
    status: 'OK', 
    timestamp: new Date().toISOString(),
    server_port: PORT
  });
});

app.use((err, req, res, next) => {
  if (err.message === 'Not allowed by CORS') {
    return res.status(403).json({ 
      error: 'cors_error',
      error_description: 'Origin not allowed by CORS policy'
    });
  }
  
  console.error(err.stack);
  res.status(500).json({ error: 'Internal Server Error' });
});

app.use((req, res) => {
  res.status(404).json({ error: 'Not Found' });
});

app.listen(PORT, () => {
  console.log(`🔐 SSO Auth Server running on port ${PORT}`);
  console.log(`🌐 Server URL: ${config.server.auth_server_url}`);
  console.log(`🛡️ Admin Panel: ${config.server.auth_server_url}/admin`);
  console.log(`🔑 Admin OAuth Client: admin-panel`);
});

// 🔧 修正: CSP設定更新機能を改良
export async function refreshCSPConfiguration() {
  try {
    console.log('🔄 Refreshing CSP configuration...');
    
    // キャッシュを無効化してOriginを再読み込み
    const { forceRefreshCSP } = await import('./middleware/cors.js');
    
    // 新しいCSP設定をセットアップ
    const newHelmet = await setupDynamicCSP();
    
    // グローバルな現在のhelmetを更新
    currentHelmet = newHelmet;
    
    // 新しいorigin情報を取得
    const newCSPOrigins = await getCSPOrigins();
    
    console.log('✅ CSP configuration successfully refreshed');
    console.log('🛡️ Updated CSP origins:', newCSPOrigins);
    
    return newCSPOrigins;
  } catch (error) {
    console.error('❌ Failed to refresh CSP configuration:', error);
    return [];
  }
}

export default app;
```

```filename
auth-server\services\jwtService.js
```

```javascript
import jwt from 'jsonwebtoken';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import jose from 'node-jose';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

async function getConfigSafely() {
  try {
    const { getConfig } = await import('../../config/configLoader.js');
    return getConfig();
  } catch (error) {
    console.error('Config loading error in JWT service:', error);
    return {
      jwt: {
        issuer: 'http://localhost:3303',
        audience: 'http://localhost:3303',
        algorithm: 'HS256',
        access_token_expiry: 3600,
        id_token_expiry: 3600,
        private_key_path: './keys/private.pem',
        public_key_path: './keys/public.pem'
      },
      oauth: {
        default_scopes: ['openid', 'profile', 'email']
      },
      security: {
        session_secret: 'fallback-secret'
      }
    };
  }
}

class JWTService {
  async getKeyPaths() {
    const config = await getConfigSafely();
    return {
      privateKeyPath: path.join(__dirname, '../../', config.jwt.private_key_path),
      publicKeyPath: path.join(__dirname, '../../', config.jwt.public_key_path)
    };
  }

  async generateAccessToken(user, scope = '', clientId = '') {
    const config = await getConfigSafely();
    const { privateKeyPath } = await this.getKeyPaths();
    
    const requestedScopes = scope ? scope.split(' ') : config.oauth.default_scopes;
    
    const payload = {
      sub: user.id.toString(),
      iss: config.jwt.issuer,
      aud: config.jwt.audience,
      exp: Math.floor(Date.now() / 1000) + config.jwt.access_token_expiry,
      iat: Math.floor(Date.now() / 1000),
      scope: requestedScopes.join(' '),
      username: user.username,
      email: user.email,
      client_id: clientId
    };

    // 🆕 Profile scope - 基本プロフィール情報
    if (requestedScopes.includes('profile')) {
      payload.name = `${user.first_name || ''} ${user.last_name || ''}`.trim();
      payload.given_name = user.first_name || '';
      payload.family_name = user.last_name || '';
      payload.preferred_username = user.username;
    }

    // 🆕 Organization scope - 組織情報
    if (requestedScopes.includes('organization')) {
      payload.organization = {
        department: user.department || '-',
        team: user.team || '-',
        supervisor: user.supervisor || '-'
      };
      console.log(`🏢 Including organization data for ${user.username}:`, payload.organization);
    }

    // 🆕 Admin scope - 管理者情報
    if (requestedScopes.includes('admin') && user.role === 'admin') {
      payload.role = user.role;
      payload.admin = true;
    }

    try {
      if (fs.existsSync(privateKeyPath)) {
        const privateKey = fs.readFileSync(privateKeyPath, 'utf8');
        return jwt.sign(payload, privateKey, { algorithm: config.jwt.algorithm });
      }
    } catch (error) {
      console.warn('RSA key signing failed, falling back to HMAC:', error.message);
    }
    
    const fallbackSecret = process.env.JWT_SECRET || config.security.session_secret;
    return jwt.sign(payload, fallbackSecret, { algorithm: 'HS256' });
  }

  async generateIdToken(user, scope = '', clientId = '') {
    const config = await getConfigSafely();
    const { privateKeyPath } = await this.getKeyPaths();
    
    const requestedScopes = scope ? scope.split(' ') : config.oauth.default_scopes;
    
    const payload = {
      sub: user.id.toString(),
      iss: config.jwt.issuer,
      aud: clientId || config.jwt.audience,
      exp: Math.floor(Date.now() / 1000) + config.jwt.id_token_expiry,
      iat: Math.floor(Date.now() / 1000),
      auth_time: Math.floor(Date.now() / 1000),
      email: user.email,
      email_verified: true
    };

    // 🆕 Profile scope - プロフィール情報
    if (requestedScopes.includes('profile')) {
      payload.name = `${user.first_name || ''} ${user.last_name || ''}`.trim();
      payload.given_name = user.first_name || '';
      payload.family_name = user.last_name || '';
      payload.preferred_username = user.username;
    }

    // 🆕 Organization scope - 組織情報をIDトークンにも含める
    if (requestedScopes.includes('organization')) {
      payload.department = user.department || '-';
      payload.team = user.team || '-';
      payload.supervisor = user.supervisor || '-';
      payload.organization_verified = true;
    }

    // 🆕 Admin scope - 管理者情報
    if (requestedScopes.includes('admin') && user.role === 'admin') {
      payload.role = user.role;
    }

    try {
      if (fs.existsSync(privateKeyPath)) {
        const privateKey = fs.readFileSync(privateKeyPath, 'utf8');
        return jwt.sign(payload, privateKey, { algorithm: config.jwt.algorithm });
      }
    } catch (error) {
      console.warn('RSA key signing failed, falling back to HMAC:', error.message);
    }
    
    const fallbackSecret = process.env.JWT_SECRET || config.security.session_secret;
    return jwt.sign(payload, fallbackSecret, { algorithm: 'HS256' });
  }

  async getJWKS() {
    const { publicKeyPath } = await this.getKeyPaths();
    
    try {
      if (fs.existsSync(publicKeyPath)) {
        const publicKey = fs.readFileSync(publicKeyPath, 'utf8');
        const keystore = jose.JWK.createKeyStore();
        const key = await keystore.add(publicKey, 'pem');
        
        return {
          keys: [key.toJSON()]
        };
      }
    } catch (error) {
      console.warn('JWKS generation failed:', error.message);
    }
    
    return { keys: [] };
  }
}

export default new JWTService();
```

```filename
auth-server\utils\logger.js
```

```javascript
import winston from 'winston';
import path from 'path';
import fs from 'fs';
import { fileURLToPath } from 'url';
import { getConfig } from '../../config/configLoader.js';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const config = getConfig();

const projectRoot = path.resolve(__dirname, '..', '..');

const logsDir = path.join(projectRoot, 'logs');
if (!fs.existsSync(logsDir)) {
  fs.mkdirSync(logsDir, { recursive: true });
}

const logFilePath = path.isAbsolute(config.logging.file) 
  ? config.logging.file 
  : path.join(projectRoot, config.logging.file.replace(/^./, ''));

const errorLogPath = path.join(path.dirname(logFilePath), 'error.log');

const logger = winston.createLogger({
  level: config.logging.level,
  format: winston.format.combine(
    winston.format.timestamp(),
    winston.format.errors({ stack: true }),
    winston.format.json()
  ),
  defaultMeta: { service: 'sso-auth-server' },
  transports: [
    new winston.transports.File({ 
      filename: errorLogPath,
      level: 'error' 
    }),
    new winston.transports.File({ 
      filename: logFilePath
    })
  ]
});

if (process.env.NODE_ENV !== 'production' && config.logging.console) {
  logger.add(new winston.transports.Console({
    format: winston.format.simple()
  }));
}

export default logger;
```

```filename
auth-server\utils\validation.js
```

```javascript
import Joi from 'joi';
import { getConfig } from '../../config/configLoader.js';

const config = getConfig();

const loginSchema = Joi.object({
  username: Joi.string().required(),
  password: Joi.string().required(),
  client_id: Joi.string().required(),
  redirect_uri: Joi.string().uri().required(),
  scope: Joi.string().valid(...config.oauth.default_scopes.join(' ').split(' ')),
  state: Joi.string()
});

const tokenSchema = Joi.object({
  grant_type: Joi.string().valid('authorization_code').required(),
  code: Joi.string().required(),
  client_id: Joi.string().required(),
  client_secret: Joi.string(),
  redirect_uri: Joi.string().uri().required()
});

const authorizeSchema = Joi.object({
  response_type: Joi.string().valid('code').required(),
  client_id: Joi.string().required(),
  redirect_uri: Joi.string().uri().required(),
  scope: Joi.string().valid(...config.oauth.default_scopes.join(' ').split(' ')),
  state: Joi.string()
});

export {
  loginSchema,
  tokenSchema,
  authorizeSchema
};
```

```filename
auth-server\views\admin\clients.ejs
```

```javascript
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>
        <%= pageTitle %> - SSO Admin
    </title>
    <link rel="stylesheet" href="/css/style.css">
    <link rel="stylesheet" href="/css/admin.css">
</head>

<body class="admin-body">
    <!-- Navigation -->
    <nav class="admin-nav">
        <div class="nav-brand">
            <svg width="24" height="24" viewBox="0 0 24 24" fill="none">
                <path d="M12 2L22 7L12 12L2 7L12 2Z" fill="#0078d4" />
                <path d="M2 17L12 22L22 17" stroke="#0078d4" stroke-width="2" stroke-linecap="round"
                    stroke-linejoin="round" />
                <path d="M2 12L12 17L22 12" stroke="#0078d4" stroke-width="2" stroke-linecap="round"
                    stroke-linejoin="round" />
            </svg>
            <span>SSO Admin</span>
        </div>

        <div class="nav-links">
            <a href="/admin/dashboard" class="nav-link">
                <svg width="16" height="16" viewBox="0 0 16 16" fill="currentColor">
                    <path d="M8 4a4 4 0 1 1 0 8 4 4 0 0 1 0-8z" />
                </svg>
                Dashboard
            </a>
            <a href="/admin/users" class="nav-link">
                <svg width="16" height="16" viewBox="0 0 16 16" fill="currentColor">
                    <path
                        d="M15 14s1 0 1-1-1-4-5-4-5 3-5 4 1 1 1 1h8zm-7.978-1A.261.261 0 0 1 7 12.996c.001-.264.167-1.03.76-1.72C8.312 10.629 9.282 10 11 10c1.717 0 2.687.63 3.24 1.276.593.69.758 1.457.76 1.72l-.008.002a.274.274 0 0 1-.014.002H7.022zM11 7a2 2 0 1 0 0-4 2 2 0 0 0 0 4zm3-2a3 3 0 1 1-6 0 3 3 0 0 1 6 0zM6.936 9.28a5.88 5.88 0 0 0-1.23-.247A7.35 7.35 0 0 0 5 9c-4 0-5 3-5 4 0 .667.333 1 1 1h4.216A2.238 2.238 0 0 1 5 13c0-1.01.377-2.042 1.09-2.904.243-.294.526-.569.846-.816zM4.92 10A5.493 5.493 0 0 0 4 13H1c0-.26.164-1.03.76-1.724.545-.636 1.492-1.256 3.16-1.275zM1.5 5.5a3 3 0 1 1 6 0 3 3 0 0 1-6 0zm3-2a2 2 0 1 0 0 4 2 2 0 0 0 0-4z" />
                </svg>
                Users
            </a>
            <a href="/admin/clients" class="nav-link active">
                <svg width="16" height="16" viewBox="0 0 16 16" fill="currentColor">
                    <path
                        d="M1 2.828c.885-.37 2.154-.769 3.388-.893 1.33-.134 2.458.063 3.112.752v9.746c-.935-.53-2.12-.603-3.213-.493-1.18.12-2.37.461-3.287.811V2.828zm7.5-.141c.654-.689 1.782-.886 3.112-.752 1.234.124 2.503.523 3.388.893v9.923c-.918-.35-2.107-.692-3.287-.81-1.094-.111-2.278-.039-3.213.492V2.687zM8 1.783C7.015.936 5.587.81 4.287.94c-1.514.153-3.042.672-3.994 1.105A.5.5 0 0 0 0 2.5v11a.5.5 0 0 0 .707.455c.882-.4 2.303-.881 3.68-1.02 1.409-.142 2.59.087 3.223.877a.5.5 0 0 0 .78 0c.633-.79 1.814-1.019 3.222-.877 1.378.139 2.8.62 3.681 1.02A.5.5 0 0 0 16 13.5v-11a.5.5 0 0 0-.293-.455c-.952-.433-2.48-.952-3.994-1.105C10.413.809 8.985.936 8 1.783z" />
                </svg>
                Clients
            </a>
            <a href="/admin/origins" class="nav-link">
                <svg width="16" height="16" viewBox="0 0 16 16" fill="currentColor">
                    <path
                        d="M0 8a8 8 0 1 1 16 0A8 8 0 0 1 0 8zm7.5-6.923c-.67.204-1.335.82-1.887 1.855A7.97 7.97 0 0 0 5.145 4H7.5V1.077zM4.09 4a9.267 9.267 0 0 1 .64-1.539 6.7 6.7 0 0 1 .597-.933A7.025 7.025 0 0 0 2.255 4H4.09zm-.582 3.5c.03-.877.138-1.718.312-2.5H1.674a6.958 6.958 0 0 0-.656 2.5h2.49zM4.847 5a12.5 12.5 0 0 0-.338 2.5H7.5V5H4.847zM8.5 5v2.5h2.99a12.495 12.495 0 0 0-.337-2.5H8.5zM4.51 8.5a12.5 12.5 0 0 0 .337 2.5H7.5V8.5H4.51zm3.99 0V11h2.653c.187-.765.306-1.608.338-2.5H8.5zM5.145 12c.138.386.295.744.468 1.068.552 1.035 1.218 1.65 1.887 1.855V12H5.145zm.182 2.472a6.696 6.696 0 0 1-.597-.933A9.268 9.268 0 0 1 4.09 12H2.255a7.024 7.024 0 0 0 3.072 2.472zM3.82 11a13.652 13.652 0 0 1-.312-2.5h-2.49c.062.89.291 1.733.656 2.5H3.82zm6.853 3.472A7.024 7.024 0 0 0 13.745 12H11.91a9.27 9.27 0 0 1-.64 1.539 6.688 6.688 0 0 1-.597.933zM8.5 12v2.923c.67-.204 1.335-.82 1.887-1.855.173-.324.33-.682.468-1.068H8.5zm3.68-1h2.146c.365-.767.594-1.61.656-2.5h-2.49a13.65 13.65 0 0 1-.312 2.5zm2.802-6.5h-2.49A13.65 13.65 0 0 1 12.18 5h2.146c-.365-.767-.594-1.61-.656-2.5zM11.27 2.461c.247.464.462.98.64 1.539h1.835a7.024 7.024 0 0 0-3.072-2.472c.218.284.418.598.597.933zM10.855 4a7.966 7.966 0 0 0-.468-1.068C9.835 1.897 9.17 1.282 8.5 1.077V4h2.355z" />
                </svg>
                Origins
            </a>
            <a href="/admin/system" class="nav-link">
                <svg width="16" height="16" viewBox="0 0 16 16" fill="currentColor">
                    <path
                        d="M8 4.754a3.246 3.246 0 1 0 0 6.492 3.246 3.246 0 0 0 0-6.492zM5.754 8a2.246 2.246 0 1 1 4.492 0 2.246 2.246 0 0 1-4.492 0z" />
                    <path
                        d="M9.796 1.343c-.527-1.79-3.065-1.79-3.592 0l-.094.319a.873.873 0 0 1-1.255.52l-.292-.16c-1.64-.892-3.433.902-2.54 2.541l.159.292a.873.873 0 0 1-.52 1.255l-.319.094c-1.79.527-1.79 3.065 0 3.592l.319.094a.873.873 0 0 1 .52 1.255l-.16.292c-.892 1.64.901 3.434 2.541 2.54l.292-.159a.873.873 0 0 1 1.255.52l.094.319c.527 1.79 3.065 1.79 3.592 0l.094-.319a.873.873 0 0 1 1.255-.52l.292.16c1.64.893 3.434-.902 2.54-2.541l-.159-.292a.873.873 0 0 1 .52-1.255l.319-.094c1.79-.527 1.79-3.065 0-3.592l-.319-.094a.873.873 0 0 1-.52-1.255l.16-.292c.893-1.64-.902-3.433-2.541-2.54l-.292.159a.873.873 0 0 1-1.255-.52l-.094-.319zm-2.633.283c.246-.835 1.428-.835 1.674 0l.094.319a1.873 1.873 0 0 0 2.693 1.115l.291-.16c.764-.415 1.6.42 1.184 1.185l-.159.292a1.873 1.873 0 0 0 1.116 2.692l.318.094c.835.246.835 1.428 0 1.674l-.319.094a1.873 1.873 0 0 0-1.115 2.693l.16.291c.415.764-.42 1.6-1.185 1.184l-.291-.159a1.873 1.873 0 0 0-2.693 1.116l-.094.318c-.246.835-1.428.835-1.674 0l-.094-.319a1.873 1.873 0 0 0-2.692-1.115l-.292.16c-.764.415-1.6-.42-1.184-1.185l.159-.291A1.873 1.873 0 0 0 1.945 8.93l-.319-.094c-.835-.246-.835-1.428 0-1.674l.319-.094A1.873 1.873 0 0 0 3.06 4.377l-.16-.292c-.415-.764.42-1.6 1.185-1.184l.292.159a1.873 1.873 0 0 0 2.692-1.115l.094-.319z" />
                </svg>
                System
            </a>
        </div>

        <div class="nav-user">
            <div class="user-info">
                <span class="user-name">Hello, <%= user.username %></span>
                <span class="user-role">Administrator</span>
            </div>
            <a href="/admin/logout" class="logout-btn">
                <svg width="16" height="16" viewBox="0 0 16 16" fill="currentColor">
                    <path fill-rule="evenodd"
                        d="M10 12.5a.5.5 0 0 1-.5.5h-8a.5.5 0 0 1-.5-.5v-9a.5.5 0 0 1 .5-.5h8a.5.5 0 0 1 .5.5v2a.5.5 0 0 0 1 0v-2A1.5 1.5 0 0 0 9.5 2h-8A1.5 1.5 0 0 0 0 3.5v9A1.5 1.5 0 0 0 1.5 14h8a1.5 1.5 0 0 0 1.5-1.5v-2a.5.5 0 0 0-1 0v2z" />
                    <path fill-rule="evenodd"
                        d="M15.854 8.354a.5.5 0 0 0 0-.708l-3-3a.5.5 0 0 0-.708.708L14.293 7.5H5.5a.5.5 0 0 0 0 1h8.793l-2.147 2.146a.5.5 0 0 0 .708.708l3-3z" />
                </svg>
                Logout
            </a>
        </div>
    </nav>

    <!-- Main Content -->
    <main class="admin-main">
        <div class="admin-container">
            <!-- Header -->
            <header class="admin-header">
                <h1>Client Management</h1>
                <p class="header-subtitle">Manage OAuth applications and their configurations</p>
            </header>

            <!-- Controls -->
            <div class="page-controls">
                <div class="search-controls">
                    <div class="search-box">
                        <svg width="16" height="16" viewBox="0 0 16 16" fill="currentColor" class="search-icon">
                            <path
                                d="M11.742 10.344a6.5 6.5 0 1 0-1.397 1.398h-.001c.03.04.062.078.098.115l3.85 3.85a1 1 0 0 0 1.415-1.414l-3.85-3.85a1.007 1.007 0 0 0-.115-.1zM12 6.5a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0z" />
                        </svg>
                        <input type="text" id="searchInput" placeholder="Search clients..." class="search-input">
                    </div>
                    <select id="statusFilter" class="filter-select">
                        <option value="">All Status</option>
                        <option value="true">Active</option>
                        <option value="false">Inactive</option>
                    </select>
                </div>

                <button id="createClientBtn" class="btn-primary">
                    <svg width="16" height="16" viewBox="0 0 16 16" fill="currentColor">
                        <path
                            d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z" />
                    </svg>
                    Create Client
                </button>
            </div>

            <!-- Stats -->
            <div class="stats-row">
                <div class="stat-item">
                    <span class="stat-label">Total Clients</span>
                    <span class="stat-value" id="totalClients">-</span>
                </div>
                <div class="stat-item">
                    <span class="stat-label">Active</span>
                    <span class="stat-value" id="activeClients">-</span>
                </div>
                <div class="stat-item">
                    <span class="stat-label">Inactive</span>
                    <span class="stat-value" id="inactiveClients">-</span>
                </div>
            </div>

            <!-- Clients Table -->
            <div class="data-table-container">
                <div class="loading-overlay" id="loadingOverlay">
                    <div class="loading-spinner"></div>
                    <span>Loading...</span>
                </div>

                <table class="data-table" id="clientsTable">
                    <thead>
                        <tr>
                            <th>Application</th>
                            <th>Client ID</th>
                            <th>Redirect URIs</th>
                            <th>Scopes</th>
                            <th>Status</th>
                            <th>Created</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody id="clientsTableBody">
                        <!-- Clients will be loaded here via JavaScript -->
                    </tbody>
                </table>

                <div class="pagination-container">
                    <div class="pagination-info" id="paginationInfo">
                        Showing 0 of 0 clients
                    </div>
                    <div class="pagination-controls" id="paginationControls">
                        <!-- Pagination buttons will be generated here -->
                    </div>
                </div>
            </div>
        </div>
    </main>

    <!-- Create/Edit Client Modal -->
    <div class="modal" id="clientModal">
        <div class="modal-content modal-large">
            <div class="modal-header">
                <h3 id="modalTitle">Create Client</h3>
                <button class="modal-close" id="closeModal">
                    <svg width="16" height="16" viewBox="0 0 16 16" fill="currentColor">
                        <path
                            d="M.293.293a1 1 0 0 1 1.414 0L8 6.586 14.293.293a1 1 0 1 1 1.414 1.414L9.414 8l6.293 6.293a1 1 0 0 1-1.414 1.414L8 9.414l-6.293 6.293a1 1 0 0 1-1.414-1.414L6.586 8 .293 1.707a1 1 0 0 1 0-1.414z" />
                    </svg>
                </button>
            </div>

            <form id="clientForm" class="modal-form">
                <div class="form-row">
                    <div class="form-group">
                        <label for="clientId">Client ID *</label>
                        <input type="text" id="clientId" name="client_id" required>
                        <small class="form-help">Unique identifier for the application. Use letters, numbers, hyphens,
                            and underscores only.</small>
                    </div>
                    <div class="form-group">
                        <label for="clientName">Application Name *</label>
                        <input type="text" id="clientName" name="name" required>
                        <small class="form-help">Display name for the application.</small>
                    </div>
                </div>

                <div class="form-group">
                    <label for="redirectUris">Redirect URIs *</label>
                    <div class="uri-list" id="redirectUrisList">
                        <div class="uri-input-group">
                            <input type="url" class="uri-input" placeholder="https://example.com/callback" required>
                            <button type="button" class="btn-remove-uri">
                                <svg width="16" height="16" viewBox="0 0 16 16" fill="currentColor">
                                    <path
                                        d="M.293.293a1 1 0 0 1 1.414 0L8 6.586 14.293.293a1 1 0 1 1 1.414 1.414L9.414 8l6.293 6.293a1 1 0 0 1-1.414 1.414L8 9.414l-6.293 6.293a1 1 0 0 1-1.414-1.414L6.586 8 .293 1.707a1 1 0 0 1 0-1.414z" />
                                </svg>
                            </button>
                        </div>
                    </div>
                    <button type="button" id="addRedirectUri" class="btn-add-item">
                        <svg width="16" height="16" viewBox="0 0 16 16" fill="currentColor">
                            <path
                                d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z" />
                        </svg>
                        Add Redirect URI
                    </button>
                    <small class="form-help">URIs where users will be redirected after authentication.</small>
                </div>

                <div class="form-row">
                    <div class="form-group">
                        <label for="allowedScopes">Allowed Scopes</label>
                        <div class="scope-checkboxes">
                            <label class="checkbox-label">
                                <input type="checkbox" name="scopes" value="openid" checked>
                                <span>openid</span>
                            </label>
                            <label class="checkbox-label">
                                <input type="checkbox" name="scopes" value="profile" checked>
                                <span>profile</span>
                            </label>
                            <label class="checkbox-label">
                                <input type="checkbox" name="scopes" value="email" checked>
                                <span>email</span>
                            </label>
                            <!-- 🆕 組織情報スコープ -->
                            <label class="checkbox-label">
                                <input type="checkbox" name="scopes" value="organization">
                                <span>organization</span>
                            </label>
                            <!-- 🆕 管理者スコープ -->
                            <label class="checkbox-label">
                                <input type="checkbox" name="scopes" value="admin">
                                <span>admin</span>
                            </label>
                        </div>
                        <small class="form-help">OAuth scopes that this client can request. Organization scope provides
                            access to department, team, and supervisor information.</small>
                    </div>
                    <div class="form-group">
                        <label for="isActive">Status</label>
                        <select id="isActive" name="is_active">
                            <option value="1">Active</option>
                            <option value="0">Inactive</option>
                        </select>
                        <small class="form-help">Only active clients can be used for authentication.</small>
                    </div>
                </div>

                <div class="modal-actions">
                    <button type="button" class="btn-secondary" id="cancelBtn">Cancel</button>
                    <button type="submit" class="btn-primary" id="submitBtn">Create Client</button>
                </div>
            </form>
        </div>
    </div>

    <!-- Client Secret Modal -->
    <div class="modal" id="secretModal">
        <div class="modal-content">
            <div class="modal-header">
                <h3>Client Secret</h3>
                <button class="modal-close" id="closeSecretModal">
                    <svg width="16" height="16" viewBox="0 0 16 16" fill="currentColor">
                        <path
                            d="M.293.293a1 1 0 0 1 1.414 0L8 6.586 14.293.293a1 1 0 1 1 1.414 1.414L9.414 8l6.293 6.293a1 1 0 0 1-1.414 1.414L8 9.414l-6.293 6.293a1 1 0 0 1-1.414-1.414L6.586 8 .293 1.707a1 1 0 0 1 0-1.414z" />
                    </svg>
                </button>
            </div>

            <div class="modal-body">
                <div class="secret-display">
                    <svg width="48" height="48" viewBox="0 0 16 16" fill="currentColor" class="secret-icon">
                        <path
                            d="M3.5 11.5a3.5 3.5 0 1 1 7 0 3.5 3.5 0 0 1-7 0zm5-6a4.5 4.5 0 1 0-3 4.23V9.5a.5.5 0 0 0 1 0V9.73a4.5 4.5 0 0 0 2-3.73V5.5z" />
                        <path
                            d="M8 1a2 2 0 0 1 2 2v1.172a3 3 0 0 1 .5.025V3a2.5 2.5 0 0 0-5 0v1.197A3 3 0 0 1 6 4V3a2 2 0 0 1 2-2z" />
                    </svg>
                    <p><strong>Store this secret securely!</strong></p>
                    <p>This secret will not be shown again.</p>

                    <div class="secret-field">
                        <label>Client Secret:</label>
                        <div class="secret-value">
                            <input type="text" id="clientSecret" readonly>
                            <button type="button" id="copySecret" class="btn-copy">
                                <svg width="16" height="16" viewBox="0 0 16 16" fill="currentColor">
                                    <path
                                        d="M4 1.5H3a2 2 0 0 0-2 2V14a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2V3.5a2 2 0 0 0-2-2h-1v1h1a1 1 0 0 1 1 1V14a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1V3.5a1 1 0 0 1 1-1h1v-1z" />
                                    <path
                                        d="M9.5 1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5v-1a.5.5 0 0 1 .5-.5h3zm-3-1A1.5 1.5 0 0 0 5 1.5v1A1.5 1.5 0 0 0 6.5 4h3A1.5 1.5 0 0 0 11 2.5v-1A1.5 1.5 0 0 0 9.5 0h-3z" />
                                </svg>
                                Copy
                            </button>
                        </div>
                    </div>
                </div>
            </div>

            <div class="modal-actions">
                <button type="button" class="btn-primary" id="closeSecretBtn">I've Saved It</button>
            </div>
        </div>
    </div>

    <!-- Delete Confirmation Modal -->
    <div class="modal" id="deleteModal">
        <div class="modal-content modal-small">
            <div class="modal-header">
                <h3>Delete Client</h3>
                <button class="modal-close" id="closeDeleteModal">
                    <svg width="16" height="16" viewBox="0 0 16 16" fill="currentColor">
                        <path
                            d="M.293.293a1 1 0 0 1 1.414 0L8 6.586 14.293.293a1 1 0 1 1 1.414 1.414L9.414 8l6.293 6.293a1 1 0 0 1-1.414 1.414L8 9.414l-6.293 6.293a1 1 0 0 1-1.414-1.414L6.586 8 .293 1.707a1 1 0 0 1 0-1.414z" />
                    </svg>
                </button>
            </div>

            <div class="modal-body">
                <div class="delete-warning">
                    <svg width="48" height="48" viewBox="0 0 16 16" fill="currentColor">
                        <path
                            d="M7.938 2.016A.13.13 0 0 1 8.002 2a.13.13 0 0 1 .063.016.146.146 0 0 1 .054.057l6.857 11.667c.036.06.035.124.002.183a.163.163 0 0 1-.054.06.116.116 0 0 1-.066.017H1.146a.115.115 0 0 1-.066-.017.163.163 0 0 1-.054-.06.176.176 0 0 1 .002-.183L7.884 2.073a.147.147 0 0 1 .054-.057zm1.044-.45a1.13 1.13 0 0 0-2.008 0L.127 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566z" />
                        <path
                            d="M7.002 12a1 1 0 1 1 2 0 1 1 0 0 1-2 0zM7.1 5.995a.905.905 0 1 1 1.8 0l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995z" />
                    </svg>
                    <p>Are you sure you want to delete <strong id="deleteClientName"></strong>?</p>
                    <p>This action cannot be undone and will invalidate all existing tokens for this client.</p>
                </div>
            </div>

            <div class="modal-actions">
                <button type="button" class="btn-secondary" id="cancelDeleteBtn">Cancel</button>
                <button type="button" class="btn-danger" id="confirmDeleteBtn">Delete Client</button>
            </div>
        </div>
    </div>

    <!-- Toast Messages -->
    <div class="toast-container" id="toastContainer"></div>

    <script src="/js/admin.js"></script>
    <script src="/js/admin-clients.js"></script>
</body>

</html>
```

```filename
auth-server\views\admin\dashboard.ejs
```

```javascript
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= pageTitle %> - SSO Admin</title>
    <link rel="stylesheet" href="/css/style.css">
    <link rel="stylesheet" href="/css/admin.css">
</head>
<body class="admin-body">
    <!-- Navigation -->
    <nav class="admin-nav">
        <div class="nav-brand">
            <svg width="24" height="24" viewBox="0 0 24 24" fill="none">
                <path d="M12 2L22 7L12 12L2 7L12 2Z" fill="#0078d4"/>
                <path d="M2 17L12 22L22 17" stroke="#0078d4" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                <path d="M2 12L12 17L22 12" stroke="#0078d4" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
            </svg>
            <span>SSO Admin</span>
        </div>
        
        <div class="nav-links">
            <a href="/admin/dashboard" class="nav-link active">
                <svg width="16" height="16" viewBox="0 0 16 16" fill="currentColor">
                    <path d="M8 4a4 4 0 1 1 0 8 4 4 0 0 1 0-8z"/>
                </svg>
                Dashboard
            </a>
            <a href="/admin/users" class="nav-link">
                <svg width="16" height="16" viewBox="0 0 16 16" fill="currentColor">
                    <path d="M15 14s1 0 1-1-1-4-5-4-5 3-5 4 1 1 1 1h8zm-7.978-1A.261.261 0 0 1 7 12.996c.001-.264.167-1.03.76-1.72C8.312 10.629 9.282 10 11 10c1.717 0 2.687.63 3.24 1.276.593.69.758 1.457.76 1.72l-.008.002a.274.274 0 0 1-.014.002H7.022zM11 7a2 2 0 1 0 0-4 2 2 0 0 0 0 4zm3-2a3 3 0 1 1-6 0 3 3 0 0 1 6 0zM6.936 9.28a5.88 5.88 0 0 0-1.23-.247A7.35 7.35 0 0 0 5 9c-4 0-5 3-5 4 0 .667.333 1 1 1h4.216A2.238 2.238 0 0 1 5 13c0-1.01.377-2.042 1.09-2.904.243-.294.526-.569.846-.816zM4.92 10A5.493 5.493 0 0 0 4 13H1c0-.26.164-1.03.76-1.724.545-.636 1.492-1.256 3.16-1.275zM1.5 5.5a3 3 0 1 1 6 0 3 3 0 0 1-6 0zm3-2a2 2 0 1 0 0 4 2 2 0 0 0 0-4z"/>
                </svg>
                Users
            </a>
            <a href="/admin/clients" class="nav-link">
                <svg width="16" height="16" viewBox="0 0 16 16" fill="currentColor">
                    <path d="M1 2.828c.885-.37 2.154-.769 3.388-.893 1.33-.134 2.458.063 3.112.752v9.746c-.935-.53-2.12-.603-3.213-.493-1.18.12-2.37.461-3.287.811V2.828zm7.5-.141c.654-.689 1.782-.886 3.112-.752 1.234.124 2.503.523 3.388.893v9.923c-.918-.35-2.107-.692-3.287-.81-1.094-.111-2.278-.039-3.213.492V2.687zM8 1.783C7.015.936 5.587.81 4.287.94c-1.514.153-3.042.672-3.994 1.105A.5.5 0 0 0 0 2.5v11a.5.5 0 0 0 .707.455c.882-.4 2.303-.881 3.68-1.02 1.409-.142 2.59.087 3.223.877a.5.5 0 0 0 .78 0c.633-.79 1.814-1.019 3.222-.877 1.378.139 2.8.62 3.681 1.02A.5.5 0 0 0 16 13.5v-11a.5.5 0 0 0-.293-.455c-.952-.433-2.48-.952-3.994-1.105C10.413.809 8.985.936 8 1.783z"/>
                </svg>
                Clients
            </a>
            <a href="/admin/origins" class="nav-link">
                <svg width="16" height="16" viewBox="0 0 16 16" fill="currentColor">
                    <path d="M0 8a8 8 0 1 1 16 0A8 8 0 0 1 0 8zm7.5-6.923c-.67.204-1.335.82-1.887 1.855A7.97 7.97 0 0 0 5.145 4H7.5V1.077zM4.09 4a9.267 9.267 0 0 1 .64-1.539 6.7 6.7 0 0 1 .597-.933A7.025 7.025 0 0 0 2.255 4H4.09zm-.582 3.5c.03-.877.138-1.718.312-2.5H1.674a6.958 6.958 0 0 0-.656 2.5h2.49zM4.847 5a12.5 12.5 0 0 0-.338 2.5H7.5V5H4.847zM8.5 5v2.5h2.99a12.495 12.495 0 0 0-.337-2.5H8.5zM4.51 8.5a12.5 12.5 0 0 0 .337 2.5H7.5V8.5H4.51zm3.99 0V11h2.653c.187-.765.306-1.608.338-2.5H8.5zM5.145 12c.138.386.295.744.468 1.068.552 1.035 1.218 1.65 1.887 1.855V12H5.145zm.182 2.472a6.696 6.696 0 0 1-.597-.933A9.268 9.268 0 0 1 4.09 12H2.255a7.024 7.024 0 0 0 3.072 2.472zM3.82 11a13.652 13.652 0 0 1-.312-2.5h-2.49c.062.89.291 1.733.656 2.5H3.82zm6.853 3.472A7.024 7.024 0 0 0 13.745 12H11.91a9.27 9.27 0 0 1-.64 1.539 6.688 6.688 0 0 1-.597.933zM8.5 12v2.923c.67-.204 1.335-.82 1.887-1.855.173-.324.33-.682.468-1.068H8.5zm3.68-1h2.146c.365-.767.594-1.61.656-2.5h-2.49a13.65 13.65 0 0 1-.312 2.5zm2.802-6.5h-2.49A13.65 13.65 0 0 1 12.18 5h2.146c-.365-.767-.594-1.61-.656-2.5zM11.27 2.461c.247.464.462.98.64 1.539h1.835a7.024 7.024 0 0 0-3.072-2.472c.218.284.418.598.597.933zM10.855 4a7.966 7.966 0 0 0-.468-1.068C9.835 1.897 9.17 1.282 8.5 1.077V4h2.355z"/>
                </svg>
                Origins
            </a>
            <a href="/admin/system" class="nav-link">
                <svg width="16" height="16" viewBox="0 0 16 16" fill="currentColor">
                    <path d="M8 4.754a3.246 3.246 0 1 0 0 6.492 3.246 3.246 0 0 0 0-6.492zM5.754 8a2.246 2.246 0 1 1 4.492 0 2.246 2.246 0 0 1-4.492 0z"/>
                    <path d="M9.796 1.343c-.527-1.79-3.065-1.79-3.592 0l-.094.319a.873.873 0 0 1-1.255.52l-.292-.16c-1.64-.892-3.433.902-2.54 2.541l.159.292a.873.873 0 0 1-.52 1.255l-.319.094c-1.79.527-1.79 3.065 0 3.592l.319.094a.873.873 0 0 1 .52 1.255l-.16.292c-.892 1.64.901 3.434 2.541 2.54l.292-.159a.873.873 0 0 1 1.255.52l.094.319c.527 1.79 3.065 1.79 3.592 0l.094-.319a.873.873 0 0 1 1.255-.52l.292.16c1.64.893 3.434-.902 2.54-2.541l-.159-.292a.873.873 0 0 1 .52-1.255l.319-.094c1.79-.527 1.79-3.065 0-3.592l-.319-.094a.873.873 0 0 1-.52-1.255l.16-.292c.893-1.64-.902-3.433-2.541-2.54l-.292.159a.873.873 0 0 1-1.255-.52l-.094-.319zm-2.633.283c.246-.835 1.428-.835 1.674 0l.094.319a1.873 1.873 0 0 0 2.693 1.115l.291-.16c.764-.415 1.6.42 1.184 1.185l-.159.292a1.873 1.873 0 0 0 1.116 2.692l.318.094c.835.246.835 1.428 0 1.674l-.319.094a1.873 1.873 0 0 0-1.115 2.693l.16.291c.415.764-.42 1.6-1.185 1.184l-.291-.159a1.873 1.873 0 0 0-2.693 1.116l-.094.318c-.246.835-1.428.835-1.674 0l-.094-.319a1.873 1.873 0 0 0-2.692-1.115l-.292.16c-.764.415-1.6-.42-1.184-1.185l.159-.291A1.873 1.873 0 0 0 1.945 8.93l-.319-.094c-.835-.246-.835-1.428 0-1.674l.319-.094A1.873 1.873 0 0 0 3.06 4.377l-.16-.292c-.415-.764.42-1.6 1.185-1.184l.292.159a1.873 1.873 0 0 0 2.692-1.115l.094-.319z"/>
                </svg>
                System
            </a>
        </div>
        
        <div class="nav-user">
            <div class="user-info">
                <span class="user-name">Hello, <%= user.username %></span>
                <span class="user-role">Administrator</span>
            </div>
            <a href="/admin/logout" class="logout-btn">
                <svg width="16" height="16" viewBox="0 0 16 16" fill="currentColor">
                    <path fill-rule="evenodd" d="M10 12.5a.5.5 0 0 1-.5.5h-8a.5.5 0 0 1-.5-.5v-9a.5.5 0 0 1 .5-.5h8a.5.5 0 0 1 .5.5v2a.5.5 0 0 0 1 0v-2A1.5 1.5 0 0 0 9.5 2h-8A1.5 1.5 0 0 0 0 3.5v9A1.5 1.5 0 0 0 1.5 14h8a1.5 1.5 0 0 0 1.5-1.5v-2a.5.5 0 0 0-1 0v2z"/>
                    <path fill-rule="evenodd" d="M15.854 8.354a.5.5 0 0 0 0-.708l-3-3a.5.5 0 0 0-.708.708L14.293 7.5H5.5a.5.5 0 0 0 0 1h8.793l-2.147 2.146a.5.5 0 0 0 .708.708l3-3z"/>
                </svg>
                Logout
            </a>
        </div>
    </nav>

    <!-- Main Content -->
    <main class="admin-main">
        <div class="admin-container">
            <!-- Header -->
            <header class="admin-header">
                <h1>Admin Dashboard</h1>
                <p class="header-subtitle">Manage your SSO authentication system</p>
            </header>

            <!-- Stats Grid -->
            <div class="stats-grid">
                <div class="stat-card">
                    <div class="stat-icon users">
                        <svg width="24" height="24" viewBox="0 0 16 16" fill="currentColor">
                            <path d="M15 14s1 0 1-1-1-4-5-4-5 3-5 4 1 1 1 1h8zm-7.978-1A.261.261 0 0 1 7 12.996c.001-.264.167-1.03.76-1.72C8.312 10.629 9.282 10 11 10c1.717 0 2.687.63 3.24 1.276.593.69.758 1.457.76 1.72l-.008.002a.274.274 0 0 1-.014.002H7.022zM11 7a2 2 0 1 0 0-4 2 2 0 0 0 0 4zm3-2a3 3 0 1 1-6 0 3 3 0 0 1 6 0z"/>
                        </svg>
                    </div>
                    <div class="stat-content">
                        <h3>Users</h3>
                        <div class="stat-number"><%= stats.users.total_users %></div>
                        <div class="stat-details">
                            <span><%= stats.users.admin_count %> admins</span>
                            <span><%= stats.users.active_users %> active</span>
                        </div>
                    </div>
                </div>

                <div class="stat-card">
                    <div class="stat-icon clients">
                        <svg width="24" height="24" viewBox="0 0 16 16" fill="currentColor">
                            <path d="M1 2.828c.885-.37 2.154-.769 3.388-.893 1.33-.134 2.458.063 3.112.752v9.746c-.935-.53-2.12-.603-3.213-.493-1.18.12-2.37.461-3.287.811V2.828zm7.5-.141c.654-.689 1.782-.886 3.112-.752 1.234.124 2.503.523 3.388.893v9.923c-.918-.35-2.107-.692-3.287-.81-1.094-.111-2.278-.039-3.213.492V2.687z"/>
                        </svg>
                    </div>
                    <div class="stat-content">
                        <h3>Applications</h3>
                        <div class="stat-number"><%= stats.clients.total_clients %></div>
                        <div class="stat-details">
                            <span><%= stats.clients.active_clients %> active</span>
                        </div>
                    </div>
                </div>

                <div class="stat-card">
                    <div class="stat-icon origins">
                        <svg width="24" height="24" viewBox="0 0 16 16" fill="currentColor">
                            <path d="M0 8a8 8 0 1 1 16 0A8 8 0 0 1 0 8zm7.5-6.923c-.67.204-1.335.82-1.887 1.855-.173.324-.33.682-.468 1.068H7.5V1.077zM4.09 4a9.267 9.267 0 0 1 .64-1.539 6.7 6.7 0 0 1 .597-.933A7.025 7.025 0 0 0 2.255 4H4.09z"/>
                        </svg>
                    </div>
                    <div class="stat-content">
                        <h3>Origins</h3>
                        <div class="stat-number"><%= stats.origins.total_origins %></div>
                        <div class="stat-details">
                            <span><%= stats.origins.active_origins %> active</span>
                        </div>
                    </div>
                </div>

                <div class="stat-card">
                    <div class="stat-icon system">
                        <svg width="24" height="24" viewBox="0 0 16 16" fill="currentColor">
                            <path d="M8 4.754a3.246 3.246 0 1 0 0 6.492 3.246 3.246 0 0 0 0-6.492zM5.754 8a2.246 2.246 0 1 1 4.492 0 2.246 2.246 0 0 1-4.492 0z"/>
                            <path d="M9.796 1.343c-.527-1.79-3.065-1.79-3.592 0l-.094.319a.873.873 0 0 1-1.255.52l-.292-.16c-1.64-.892-3.433.902-2.54 2.541l.159.292a.873.873 0 0 1-.52 1.255l-.319.094c-1.79.527-1.79 3.065 0 3.592l.319.094a.873.873 0 0 1 .52 1.255l-.16.292c-.892 1.64.901 3.434 2.541 2.54l.292-.159a.873.873 0 0 1 1.255.52l.094.319c.527 1.79 3.065 1.79 3.592 0l.094-.319a.873.873 0 0 1 1.255-.52l.292.16c1.64.893 3.434-.902 2.54-2.541l-.159-.292a.873.873 0 0 1 .52-1.255l.319-.094c1.79-.527 1.79-3.065 0-3.592l-.319-.094a.873.873 0 0 1-.52-1.255l.16-.292c.893-1.64-.902-3.433-2.541-2.54l-.292.159a.873.873 0 0 1-1.255-.52l-.094-.319zm-2.633.283c.246-.835 1.428-.835 1.674 0l.094.319a1.873 1.873 0 0 0 2.693 1.115l.291-.16c.764-.415 1.6.42 1.184 1.185l-.159.292a1.873 1.873 0 0 0 1.116 2.692l.318.094c.835.246.835 1.428 0 1.674l-.319.094a1.873 1.873 0 0 0-1.115 2.693l.16.291c.415.764-.42 1.6-1.185 1.184l-.291-.159a1.873 1.873 0 0 0-2.693 1.116l-.094.318c-.246.835-1.428.835-1.674 0l-.094-.319a1.873 1.873 0 0 0-2.692-1.115l-.292.16c-.764.415-1.6-.42-1.184-1.185l.159-.291A1.873 1.873 0 0 0 1.945 8.93l-.319-.094c-.835-.246-.835-1.428 0-1.674l.319-.094A1.873 1.873 0 0 0 3.06 4.377l-.16-.292c-.415-.764.42-1.6 1.185-1.184l.292.159a1.873 1.873 0 0 0 2.692-1.115l.094-.319z"/>
                        </svg>
                    </div>
                    <div class="stat-content">
                        <h3>System</h3>
                        <div class="stat-number">Active</div>
                        <div class="stat-details">
                            <span>All services running</span>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Recent Activity -->
            <div class="dashboard-grid">
                <div class="dashboard-card">
                    <div class="card-header">
                        <h3>Recent Users</h3>
                        <a href="/admin/users" class="view-all-link">View All</a>
                    </div>
                    <div class="card-content">
                        <% if (recentUsers.length === 0) { %>
                            <div class="empty-state">
                                <p>No users found</p>
                            </div>
                        <% } else { %>
                            <div class="recent-list">
                                <% recentUsers.forEach(user => { %>
                                    <div class="recent-item">
                                        <div class="item-icon">
                                            <% if (user.role === 'admin') { %>
                                                <span class="role-badge admin">A</span>
                                            <% } else { %>
                                                <span class="role-badge user">U</span>
                                            <% } %>
                                        </div>
                                        <div class="item-content">
                                            <div class="item-title"><%= user.username %></div>
                                            <div class="item-subtitle"><%= user.email %></div>
                                        </div>
                                        <div class="item-meta">
                                            <span class="role-label"><%= user.role %></span>
                                        </div>
                                    </div>
                                <% }); %>
                            </div>
                        <% } %>
                    </div>
                </div>

                <div class="dashboard-card">
                    <div class="card-header">
                        <h3>Recent Applications</h3>
                        <a href="/admin/clients" class="view-all-link">View All</a>
                    </div>
                    <div class="card-content">
                        <% if (recentClients.length === 0) { %>
                            <div class="empty-state">
                                <p>No applications found</p>
                            </div>
                        <% } else { %>
                            <div class="recent-list">
                                <% recentClients.forEach(client => { %>
                                    <div class="recent-item">
                                        <div class="item-icon">
                                            <svg width="16" height="16" viewBox="0 0 16 16" fill="currentColor">
                                                <path d="M1 2.828c.885-.37 2.154-.769 3.388-.893 1.33-.134 2.458.063 3.112.752v9.746c-.935-.53-2.12-.603-3.213-.493-1.18.12-2.37.461-3.287.811V2.828z"/>
                                            </svg>
                                        </div>
                                        <div class="item-content">
                                            <div class="item-title"><%= client.name %></div>
                                            <div class="item-subtitle"><%= client.client_id %></div>
                                        </div>
                                        <div class="item-meta">
                                            <% if (client.is_active) { %>
                                                <span class="status-badge active">Active</span>
                                            <% } else { %>
                                                <span class="status-badge inactive">Inactive</span>
                                            <% } %>
                                        </div>
                                    </div>
                                <% }); %>
                            </div>
                        <% } %>
                    </div>
                </div>
            </div>

            <!-- Quick Actions -->
            <div class="quick-actions">
                <h3>Quick Actions</h3>
                <div class="action-buttons">
                    <a href="/admin/users" class="action-btn primary">
                        <svg width="16" height="16" viewBox="0 0 16 16" fill="currentColor">
                            <path d="M8 8a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm2-3a2 2 0 1 1-4 0 2 2 0 0 1 4 0zm4 8c0 1-1 1-1 1H3s-1 0-1-1 1-4 6-4 6 3 6 4zm-1-.004c-.001-.246-.154-.986-.832-1.664C11.516 10.68 10.289 10 8 10c-2.29 0-3.516.68-4.168 1.332-.678.678-.83 1.418-.832 1.664h10z"/>
                            <path d="M8 8a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm0-1a2 2 0 1 1 0-4 2 2 0 0 1 0 4z"/>
                        </svg>
                        Create User
                    </a>
                    <a href="/admin/clients" class="action-btn secondary">
                        <svg width="16" height="16" viewBox="0 0 16 16" fill="currentColor">
                            <path d="M1 2.828c.885-.37 2.154-.769 3.388-.893 1.33-.134 2.458.063 3.112.752v9.746c-.935-.53-2.12-.603-3.213-.493-1.18.12-2.37.461-3.287.811V2.828z"/>
                        </svg>
                        Add Application
                    </a>
                    <a href="/admin/origins" class="action-btn secondary">
                        <svg width="16" height="16" viewBox="0 0 16 16" fill="currentColor">
                            <path d="M0 8a8 8 0 1 1 16 0A8 8 0 0 1 0 8zm7.5-6.923c-.67.204-1.335.82-1.887 1.855-.173.324-.33.682-.468 1.068H7.5V1.077z"/>
                        </svg>
                        Add Origin
                    </a>
                </div>
            </div>
        </div>
    </main>

    <script src="/js/admin.js"></script>
    
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // システム情報のリフレッシュボタンがある場合の処理
            const refreshButtons = document.querySelectorAll('[data-action="refresh"]');
            refreshButtons.forEach(button => {
                button.addEventListener('click', function() {
                    location.reload();
                });
            });
        });
    </script>
</body>
</html>
```

```filename
auth-server\views\admin\login-error.ejs
```

```javascript
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= pageTitle %> - SSO Admin</title>
    <link rel="stylesheet" href="/css/style.css">
    <link rel="stylesheet" href="/css/admin.css">
</head>
<body>
    <div class="error-container">
        <div class="error-box">
            <div class="error-header">
                <div class="app-logo">
                    <svg width="24" height="24" viewBox="0 0 24 24" fill="none">
                        <path d="M12 2L22 7L12 12L2 7L12 2Z" fill="#d13438"/>
                        <path d="M2 17L12 22L22 17" stroke="#d13438" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                        <path d="M2 12L12 17L22 12" stroke="#d13438" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                    </svg>
                </div>
                <h1>Admin Login Error</h1>
            </div>
            
            <div class="error-details">
                <div class="error-message">
                    <svg width="20" height="20" viewBox="0 0 20 20" fill="currentColor" style="color: #d13438; margin-bottom: 16px;">
                        <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd"/>
                    </svg>
                    <p>
                        <% if (error === 'missing_code') { %>
                            Authorization code was not provided by the authentication server.
                        <% } else if (error === 'token_exchange_failed') { %>
                            Failed to exchange authorization code for access token.
                        <% } else if (error === 'callback_processing_failed') { %>
                            An error occurred while processing the authentication callback.
                        <% } else { %>
                            An unexpected error occurred during admin panel authentication.
                        <% } %>
                    </p>
                    <p style="font-size: 14px; color: #605e5c; margin-top: 8px;">
                        Error code: <code><%= error %></code>
                    </p>
                </div>
                
                <div class="error-suggestions">
                    <h3>Troubleshooting Steps:</h3>
                    <ul>
                        <li>Ensure you have admin privileges</li>
                        <li>Check that the admin-panel OAuth client is properly configured</li>
                        <li>Verify the callback URL is correct: <code>http://localhost:3303/admin/callback</code></li>
                        <li>Try clearing your browser cache and cookies</li>
                        <li>Contact your system administrator if the problem persists</li>
                    </ul>
                </div>
            </div>
            
            <div class="error-actions">
                <a href="/admin" class="error-btn primary">
                    <svg width="16" height="16" viewBox="0 0 16 16" fill="currentColor" style="margin-right: 8px;">
                        <path d="M8 0a8 8 0 1 1 0 16A8 8 0 0 1 8 0zM1.5 8a6.5 6.5 0 1 0 13 0 6.5 6.5 0 0 0-13 0z"/>
                        <path d="M6.5 7.5A.5.5 0 0 1 7 7h3a.5.5 0 0 1 .5.5v3a.5.5 0 0 1-.5.5H7a.5.5 0 0 1-.5-.5v-3z"/>
                    </svg>
                    Try Again
                </a>
                <a href="/" class="error-btn secondary">
                    <svg width="16" height="16" viewBox="0 0 16 16" fill="currentColor" style="margin-right: 8px;">
                        <path fill-rule="evenodd" d="M15 8a.5.5 0 0 0-.5-.5H2.707l3.147-3.146a.5.5 0 1 0-.708-.708l-4 4a.5.5 0 0 0 0 .708l4 4a.5.5 0 0 0 .708-.708L2.707 8.5H14.5A.5.5 0 0 0 15 8z"/>
                    </svg>
                    Return to Main Site
                </a>
            </div>
        </div>
    </div>
</body>
</html>
```

```filename
auth-server\views\admin\origins.ejs
```

```javascript
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= pageTitle %> - SSO Admin</title>
    <link rel="stylesheet" href="/css/style.css">
    <link rel="stylesheet" href="/css/admin.css">
</head>
<body class="admin-body">
    <!-- Navigation -->
    <nav class="admin-nav">
        <div class="nav-brand">
            <svg width="24" height="24" viewBox="0 0 24 24" fill="none">
                <path d="M12 2L22 7L12 12L2 7L12 2Z" fill="#0078d4"/>
                <path d="M2 17L12 22L22 17" stroke="#0078d4" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                <path d="M2 12L12 17L22 12" stroke="#0078d4" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
            </svg>
            <span>SSO Admin</span>
        </div>
        
        <div class="nav-links">
            <a href="/admin/dashboard" class="nav-link">
                <svg width="16" height="16" viewBox="0 0 16 16" fill="currentColor">
                    <path d="M8 4a4 4 0 1 1 0 8 4 4 0 0 1 0-8z"/>
                </svg>
                Dashboard
            </a>
            <a href="/admin/users" class="nav-link">
                <svg width="16" height="16" viewBox="0 0 16 16" fill="currentColor">
                    <path d="M15 14s1 0 1-1-1-4-5-4-5 3-5 4 1 1 1 1h8zm-7.978-1A.261.261 0 0 1 7 12.996c.001-.264.167-1.03.76-1.72C8.312 10.629 9.282 10 11 10c1.717 0 2.687.63 3.24 1.276.593.69.758 1.457.76 1.72l-.008.002a.274.274 0 0 1-.014.002H7.022zM11 7a2 2 0 1 0 0-4 2 2 0 0 0 0 4zm3-2a3 3 0 1 1-6 0 3 3 0 0 1 6 0zM6.936 9.28a5.88 5.88 0 0 0-1.23-.247A7.35 7.35 0 0 0 5 9c-4 0-5 3-5 4 0 .667.333 1 1 1h4.216A2.238 2.238 0 0 1 5 13c0-1.01.377-2.042 1.09-2.904.243-.294.526-.569.846-.816zM4.92 10A5.493 5.493 0 0 0 4 13H1c0-.26.164-1.03.76-1.724.545-.636 1.492-1.256 3.16-1.275zM1.5 5.5a3 3 0 1 1 6 0 3 3 0 0 1-6 0zm3-2a2 2 0 1 0 0 4 2 2 0 0 0 0-4z"/>
                </svg>
                Users
            </a>
            <a href="/admin/clients" class="nav-link">
                <svg width="16" height="16" viewBox="0 0 16 16" fill="currentColor">
                    <path d="M1 2.828c.885-.37 2.154-.769 3.388-.893 1.33-.134 2.458.063 3.112.752v9.746c-.935-.53-2.12-.603-3.213-.493-1.18.12-2.37.461-3.287.811V2.828zm7.5-.141c.654-.689 1.782-.886 3.112-.752 1.234.124 2.503.523 3.388.893v9.923c-.918-.35-2.107-.692-3.287-.81-1.094-.111-2.278-.039-3.213.492V2.687zM8 1.783C7.015.936 5.587.81 4.287.94c-1.514.153-3.042.672-3.994 1.105A.5.5 0 0 0 0 2.5v11a.5.5 0 0 0 .707.455c.882-.4 2.303-.881 3.68-1.02 1.409-.142 2.59.087 3.223.877a.5.5 0 0 0 .78 0c.633-.79 1.814-1.019 3.222-.877 1.378.139 2.8.62 3.681 1.02A.5.5 0 0 0 16 13.5v-11a.5.5 0 0 0-.293-.455c-.952-.433-2.48-.952-3.994-1.105C10.413.809 8.985.936 8 1.783z"/>
                </svg>
                Clients
            </a>
            <a href="/admin/origins" class="nav-link active">
                <svg width="16" height="16" viewBox="0 0 16 16" fill="currentColor">
                    <path d="M0 8a8 8 0 1 1 16 0A8 8 0 0 1 0 8zm7.5-6.923c-.67.204-1.335.82-1.887 1.855A7.97 7.97 0 0 0 5.145 4H7.5V1.077zM4.09 4a9.267 9.267 0 0 1 .64-1.539 6.7 6.7 0 0 1 .597-.933A7.025 7.025 0 0 0 2.255 4H4.09zm-.582 3.5c.03-.877.138-1.718.312-2.5H1.674a6.958 6.958 0 0 0-.656 2.5h2.49zM4.847 5a12.5 12.5 0 0 0-.338 2.5H7.5V5H4.847zM8.5 5v2.5h2.99a12.495 12.495 0 0 0-.337-2.5H8.5zM4.51 8.5a12.5 12.5 0 0 0 .337 2.5H7.5V8.5H4.51zm3.99 0V11h2.653c.187-.765.306-1.608.338-2.5H8.5zM5.145 12c.138.386.295.744.468 1.068.552 1.035 1.218 1.65 1.887 1.855V12H5.145zm.182 2.472a6.696 6.696 0 0 1-.597-.933A9.268 9.268 0 0 1 4.09 12H2.255a7.024 7.024 0 0 0 3.072 2.472zM3.82 11a13.652 13.652 0 0 1-.312-2.5h-2.49c.062.89.291 1.733.656 2.5H3.82zm6.853 3.472A7.024 7.024 0 0 0 13.745 12H11.91a9.27 9.27 0 0 1-.64 1.539 6.688 6.688 0 0 1-.597.933zM8.5 12v2.923c.67-.204 1.335-.82 1.887-1.855.173-.324.33-.682.468-1.068H8.5zm3.68-1h2.146c.365-.767.594-1.61.656-2.5h-2.49a13.65 13.65 0 0 1-.312 2.5zm2.802-6.5h-2.49A13.65 13.65 0 0 1 12.18 5h2.146c-.365-.767-.594-1.61-.656-2.5zM11.27 2.461c.247.464.462.98.64 1.539h1.835a7.024 7.024 0 0 0-3.072-2.472c.218.284.418.598.597.933zM10.855 4a7.966 7.966 0 0 0-.468-1.068C9.835 1.897 9.17 1.282 8.5 1.077V4h2.355z"/>
                </svg>
                Origins
            </a>
            <a href="/admin/system" class="nav-link">
                <svg width="16" height="16" viewBox="0 0 16 16" fill="currentColor">
                    <path d="M8 4.754a3.246 3.246 0 1 0 0 6.492 3.246 3.246 0 0 0 0-6.492zM5.754 8a2.246 2.246 0 1 1 4.492 0 2.246 2.246 0 0 1-4.492 0z"/>
                    <path d="M9.796 1.343c-.527-1.79-3.065-1.79-3.592 0l-.094.319a.873.873 0 0 1-1.255.52l-.292-.16c-1.64-.892-3.433.902-2.54 2.541l.159.292a.873.873 0 0 1-.52 1.255l-.319.094c-1.79.527-1.79 3.065 0 3.592l.319.094a.873.873 0 0 1 .52 1.255l-.16.292c-.892 1.64.901 3.434 2.541 2.54l.292-.159a.873.873 0 0 1 1.255.52l.094.319c.527 1.79 3.065 1.79 3.592 0l.094-.319a.873.873 0 0 1 1.255-.52l.292.16c1.64.893 3.434-.902 2.54-2.541l-.159-.292a.873.873 0 0 1 .52-1.255l.319-.094c1.79-.527 1.79-3.065 0-3.592l-.319-.094a.873.873 0 0 1-.52-1.255l.16-.292c.893-1.64-.902-3.433-2.541-2.54l-.292.159a.873.873 0 0 1-1.255-.52l-.094-.319zm-2.633.283c.246-.835 1.428-.835 1.674 0l.094.319a1.873 1.873 0 0 0 2.693 1.115l.291-.16c.764-.415 1.6.42 1.184 1.185l-.159.292a1.873 1.873 0 0 0 1.116 2.692l.318.094c.835.246.835 1.428 0 1.674l-.319.094a1.873 1.873 0 0 0-1.115 2.693l.16.291c.415.764-.42 1.6-1.185 1.184l-.291-.159a1.873 1.873 0 0 0-2.693 1.116l-.094.318c-.246.835-1.428.835-1.674 0l-.094-.319a1.873 1.873 0 0 0-2.692-1.115l-.292.16c-.764.415-1.6-.42-1.184-1.185l.159-.291A1.873 1.873 0 0 0 1.945 8.93l-.319-.094c-.835-.246-.835-1.428 0-1.674l.319-.094A1.873 1.873 0 0 0 3.06 4.377l-.16-.292c-.415-.764.42-1.6 1.185-1.184l.292.159a1.873 1.873 0 0 0 2.692-1.115l.094-.319z"/>
                </svg>
                System
            </a>
        </div>
        
        <div class="nav-user">
            <div class="user-info">
                <span class="user-name">Hello, <%= user.username %></span>
                <span class="user-role">Administrator</span>
            </div>
            <a href="/admin/logout" class="logout-btn">
                <svg width="16" height="16" viewBox="0 0 16 16" fill="currentColor">
                    <path fill-rule="evenodd" d="M10 12.5a.5.5 0 0 1-.5.5h-8a.5.5 0 0 1-.5-.5v-9a.5.5 0 0 1 .5-.5h8a.5.5 0 0 1 .5.5v2a.5.5 0 0 0 1 0v-2A1.5 1.5 0 0 0 9.5 2h-8A1.5 1.5 0 0 0 0 3.5v9A1.5 1.5 0 0 0 1.5 14h8a1.5 1.5 0 0 0 1.5-1.5v-2a.5.5 0 0 0-1 0v2z"/>
                    <path fill-rule="evenodd" d="M15.854 8.354a.5.5 0 0 0 0-.708l-3-3a.5.5 0 0 0-.708.708L14.293 7.5H5.5a.5.5 0 0 0 0 1h8.793l-2.147 2.146a.5.5 0 0 0 .708.708l3-3z"/>
                </svg>
                Logout
            </a>
        </div>
    </nav>

    <!-- Main Content -->
    <main class="admin-main">
        <div class="admin-container">
            <!-- Header -->
            <header class="admin-header">
                <h1>Origin Management</h1>
                <p class="header-subtitle">Manage CORS allowed origins for cross-origin requests</p>
            </header>

            <!-- Controls -->
            <div class="page-controls">
                <div class="search-controls">
                    <div class="search-box">
                        <svg width="16" height="16" viewBox="0 0 16 16" fill="currentColor" class="search-icon">
                            <path d="M11.742 10.344a6.5 6.5 0 1 0-1.397 1.398h-.001c.03.04.062.078.098.115l3.85 3.85a1 1 0 0 0 1.415-1.414l-3.85-3.85a1.007 1.007 0 0 0-.115-.1zM12 6.5a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0z"/>
                        </svg>
                        <input type="text" id="searchInput" placeholder="Search origins..." class="search-input">
                    </div>
                    <select id="statusFilter" class="filter-select">
                        <option value="">All Status</option>
                        <option value="active">Active</option>
                        <option value="inactive">Inactive</option>
                    </select>
                    <button id="refreshBtn" class="btn-secondary">
                        <svg width="16" height="16" viewBox="0 0 16 16" fill="currentColor">
                            <path d="M8 3a5 5 0 1 0 4.546 2.914.5.5 0 0 1 .908-.417A6 6 0 1 1 8 2v1z"/>
                            <path d="M8 4.466V.534a.25.25 0 0 1 .41-.192l2.36 1.966c.12.1.12.284 0 .384L8.41 4.658A.25.25 0 0 1 8 4.466z"/>
                        </svg>
                        Refresh CORS
                    </button>
                </div>
                
                <button id="createOriginBtn" class="btn-primary">
                    <svg width="16" height="16" viewBox="0 0 16 16" fill="currentColor">
                        <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z"/>
                    </svg>
                    Add Origin
                </button>
            </div>

            <!-- Origins Table -->
            <div class="data-table-container">
                <div class="loading-overlay hidden" id="loadingOverlay">
                    <div class="loading-spinner"></div>
                    <span>Loading...</span>
                </div>

                <table class="data-table" id="originsTable">
                    <thead>
                        <tr>
                            <th>Origin URL</th>
                            <th>Description</th>
                            <th>Added By</th>
                            <th>Status</th>
                            <th>Created</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody id="originsTableBody">
                        <!-- Origins will be loaded here via JavaScript -->
                    </tbody>
                </table>

                <div class="pagination-container">
                    <div class="pagination-info" id="paginationInfo">
                        Loading origins...
                    </div>
                </div>
            </div>
        </div>
    </main>

    <!-- Create/Edit Origin Modal -->
    <div class="modal" id="originModal">
        <div class="modal-content">
            <div class="modal-header">
                <h3 id="modalTitle">Add Origin</h3>
                <button class="modal-close" id="closeModal">
                    <svg width="16" height="16" viewBox="0 0 16 16" fill="currentColor">
                        <path d="M.293.293a1 1 0 0 1 1.414 0L8 6.586 14.293.293a1 1 0 1 1 1.414 1.414L9.414 8l6.293 6.293a1 1 0 0 1-1.414 1.414L8 9.414l-6.293 6.293a1 1 0 0 1-1.414-1.414L6.586 8 .293 1.707a1 1 0 0 1 0-1.414z"/>
                    </svg>
                </button>
            </div>
            
            <form id="originForm" class="modal-form">
                <div class="form-group">
                    <label for="origin">Origin URL *</label>
                    <input type="url" id="origin" name="origin" required placeholder="https://example.com">
                    <small class="form-help">Full URL including protocol (https:// or http://)</small>
                </div>
                
                <div class="form-group">
                    <label for="description">Description</label>
                    <input type="text" id="description" name="description" placeholder="Description of this origin">
                    <small class="form-help">Optional description to help identify this origin</small>
                </div>
                
                <div class="modal-actions">
                    <button type="button" class="btn-secondary" id="cancelBtn">Cancel</button>
                    <button type="submit" class="btn-primary" id="submitBtn">Add Origin</button>
                </div>
            </form>
        </div>
    </div>

    <!-- Delete Confirmation Modal -->
    <div class="modal" id="deleteModal">
        <div class="modal-content modal-small">
            <div class="modal-header">
                <h3>Delete Origin</h3>
                <button class="modal-close" id="closeDeleteModal">
                    <svg width="16" height="16" viewBox="0 0 16 16" fill="currentColor">
                        <path d="M.293.293a1 1 0 0 1 1.414 0L8 6.586 14.293.293a1 1 0 1 1 1.414 1.414L9.414 8l6.293 6.293a1 1 0 0 1-1.414 1.414L8 9.414l-6.293 6.293a1 1 0 0 1-1.414-1.414L6.586 8 .293 1.707a1 1 0 0 1 0-1.414z"/>
                    </svg>
                </button>
            </div>
            
            <div class="modal-body">
                <div class="delete-warning">
                    <svg width="48" height="48" viewBox="0 0 16 16" fill="currentColor">
                        <path d="M7.938 2.016A.13.13 0 0 1 8.002 2a.13.13 0 0 1 .063.016.146.146 0 0 1 .054.057l6.857 11.667c.036.06.035.124.002.183a.163.163 0 0 1-.054.06.116.116 0 0 1-.066.017H1.146a.115.115 0 0 1-.066-.017.163.163 0 0 1-.054-.06.176.176 0 0 1 .002-.183L7.884 2.073a.147.147 0 0 1 .054-.057zm1.044-.45a1.13 1.13 0 0 0-2.008 0L.127 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566z"/>
                        <path d="M7.002 12a1 1 0 1 1 2 0 1 1 0 0 1-2 0zM7.1 5.995a.905.905 0 1 1 1.8 0l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995z"/>
                    </svg>
                    <p>Are you sure you want to delete the origin <strong id="deleteOriginUrl"></strong>?</p>
                    <p>This will immediately block requests from this origin.</p>
                </div>
            </div>
            
            <div class="modal-actions">
                <button type="button" class="btn-secondary" id="cancelDeleteBtn">Cancel</button>
                <button type="button" class="btn-danger" id="confirmDeleteBtn">Delete Origin</button>
            </div>
        </div>
    </div>

    <!-- Toast Messages -->
    <div class="toast-container" id="toastContainer"></div>

    <script src="/js/admin.js"></script>
    <script src="/js/admin-origins.js"></script>
</body>
</html>
```

```filename
auth-server\views\admin\system.ejs
```

```javascript
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= pageTitle %> - SSO Admin</title>
    <link rel="stylesheet" href="/css/style.css">
    <link rel="stylesheet" href="/css/admin.css">
</head>
<body class="admin-body">
    <nav class="admin-nav">
        <div class="nav-brand">
            <svg width="24" height="24" viewBox="0 0 24 24" fill="none">
                <path d="M12 2L22 7L12 12L2 7L12 2Z" fill="#0078d4"/>
                <path d="M2 17L12 22L22 17" stroke="#0078d4" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                <path d="M2 12L12 17L22 12" stroke="#0078d4" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
            </svg>
            <span>SSO Admin</span>
        </div>
        
        <div class="nav-links">
            <a href="/admin/dashboard" class="nav-link">
                <svg width="16" height="16" viewBox="0 0 16 16" fill="currentColor">
                    <path d="M8 4a4 4 0 1 1 0 8 4 4 0 0 1 0-8z"/>
                </svg>
                Dashboard
            </a>
            <a href="/admin/users" class="nav-link">
                <svg width="16" height="16" viewBox="0 0 16 16" fill="currentColor">
                    <path d="M15 14s1 0 1-1-1-4-5-4-5 3-5 4 1 1 1 1h8zm-7.978-1A.261.261 0 0 1 7 12.996c.001-.264.167-1.03.76-1.72C8.312 10.629 9.282 10 11 10c1.717 0 2.687.63 3.24 1.276.593.69.758 1.457.76 1.72l-.008.002a.274.274 0 0 1-.014.002H7.022zM11 7a2 2 0 1 0 0-4 2 2 0 0 0 0 4zm3-2a3 3 0 1 1-6 0 3 3 0 0 1 6 0zM6.936 9.28a5.88 5.88 0 0 0-1.23-.247A7.35 7.35 0 0 0 5 9c-4 0-5 3-5 4 0 .667.333 1 1 1h4.216A2.238 2.238 0 0 1 5 13c0-1.01.377-2.042 1.09-2.904.243-.294.526-.569.846-.816zM4.92 10A5.493 5.493 0 0 0 4 13H1c0-.26.164-1.03.76-1.724.545-.636 1.492-1.256 3.16-1.275zM1.5 5.5a3 3 0 1 1 6 0 3 3 0 0 1-6 0zm3-2a2 2 0 1 0 0 4 2 2 0 0 0 0-4z"/>
                </svg>
                Users
            </a>
            <a href="/admin/clients" class="nav-link">
                <svg width="16" height="16" viewBox="0 0 16 16" fill="currentColor">
                    <path d="M1 2.828c.885-.37 2.154-.769 3.388-.893 1.33-.134 2.458.063 3.112.752v9.746c-.935-.53-2.12-.603-3.213-.493-1.18.12-2.37.461-3.287.811V2.828zm7.5-.141c.654-.689 1.782-.886 3.112-.752 1.234.124 2.503.523 3.388.893v9.923c-.918-.35-2.107-.692-3.287-.81-1.094-.111-2.278-.039-3.213.492V2.687zM8 1.783C7.015.936 5.587.81 4.287.94c-1.514.153-3.042.672-3.994 1.105A.5.5 0 0 0 0 2.5v11a.5.5 0 0 0 .707.455c.882-.4 2.303-.881 3.68-1.02 1.409-.142 2.59.087 3.223.877a.5.5 0 0 0 .78 0c.633-.79 1.814-1.019 3.222-.877 1.378.139 2.8.62 3.681 1.02A.5.5 0 0 0 16 13.5v-11a.5.5 0 0 0-.293-.455c-.952-.433-2.48-.952-3.994-1.105C10.413.809 8.985.936 8 1.783z"/>
                </svg>
                Clients
            </a>
            <a href="/admin/origins" class="nav-link">
                <svg width="16" height="16" viewBox="0 0 16 16" fill="currentColor">
                    <path d="M0 8a8 8 0 1 1 16 0A8 8 0 0 1 0 8zm7.5-6.923c-.67.204-1.335.82-1.887 1.855A7.97 7.97 0 0 0 5.145 4H7.5V1.077zM4.09 4a9.267 9.267 0 0 1 .64-1.539 6.7 6.7 0 0 1 .597-.933A7.025 7.025 0 0 0 2.255 4H4.09zm-.582 3.5c.03-.877.138-1.718.312-2.5H1.674a6.958 6.958 0 0 0-.656 2.5h2.49zM4.847 5a12.5 12.5 0 0 0-.338 2.5H7.5V5H4.847zM8.5 5v2.5h2.99a12.495 12.495 0 0 0-.337-2.5H8.5zM4.51 8.5a12.5 12.5 0 0 0 .337 2.5H7.5V8.5H4.51zm3.99 0V11h2.653c.187-.765.306-1.608.338-2.5H8.5zM5.145 12c.138.386.295.744.468 1.068.552 1.035 1.218 1.65 1.887 1.855V12H5.145zm.182 2.472a6.696 6.696 0 0 1-.597-.933A9.268 9.268 0 0 1 4.09 12H2.255a7.024 7.024 0 0 0 3.072 2.472zM3.82 11a13.652 13.652 0 0 1-.312-2.5h-2.49c.062.89.291 1.733.656 2.5H3.82zm6.853 3.472A7.024 7.024 0 0 0 13.745 12H11.91a9.27 9.27 0 0 1-.64 1.539 6.688 6.688 0 0 1-.597.933zM8.5 12v2.923c.67-.204 1.335-.82 1.887-1.855.173-.324.33-.682.468-1.068H8.5zm3.68-1h2.146c.365-.767.594-1.61.656-2.5h-2.49a13.65 13.65 0 0 1-.312 2.5zm2.802-6.5h-2.49A13.65 13.65 0 0 1 12.18 5h2.146c-.365-.767-.594-1.61-.656-2.5zM11.27 2.461c.247.464.462.98.64 1.539h1.835a7.024 7.024 0 0 0-3.072-2.472c.218.284.418.598.597.933zM10.855 4a7.966 7.966 0 0 0-.468-1.068C9.835 1.897 9.17 1.282 8.5 1.077V4h2.355z"/>
                </svg>
                Origins
            </a>
            <a href="/admin/system" class="nav-link active">
                <svg width="16" height="16" viewBox="0 0 16 16" fill="currentColor">
                    <path d="M8 4.754a3.246 3.246 0 1 0 0 6.492 3.246 3.246 0 0 0 0-6.492zM5.754 8a2.246 2.246 0 1 1 4.492 0 2.246 2.246 0 0 1-4.492 0z"/>
                    <path d="M9.796 1.343c-.527-1.79-3.065-1.79-3.592 0l-.094.319a.873.873 0 0 1-1.255.52l-.292-.16c-1.64-.892-3.433.902-2.54 2.541l.159.292a.873.873 0 0 1-.52 1.255l-.319.094c-1.79.527-1.79 3.065 0 3.592l.319.094a.873.873 0 0 1 .52 1.255l-.16.292c-.892 1.64.901 3.434 2.541 2.54l.292-.159a.873.873 0 0 1 1.255.52l.094.319c.527 1.79 3.065 1.79 3.592 0l.094-.319a.873.873 0 0 1 1.255-.52l.292.16c1.64.893 3.434-.902 2.54-2.541l-.159-.292a.873.873 0 0 1 .52-1.255l.319-.094c1.79-.527 1.79-3.065 0-3.592l-.319-.094a.873.873 0 0 1-.52-1.255l.16-.292c.893-1.64-.902-3.433-2.541-2.54l-.292.159a.873.873 0 0 1-1.255-.52l-.094-.319zm-2.633.283c.246-.835 1.428-.835 1.674 0l.094.319a1.873 1.873 0 0 0 2.693 1.115l.291-.16c.764-.415 1.6.42 1.184 1.185l-.159.292a1.873 1.873 0 0 0 1.116 2.692l.318.094c.835.246.835 1.428 0 1.674l-.319.094a1.873 1.873 0 0 0-1.115 2.693l.16.291c.415.764-.42 1.6-1.185 1.184l-.291-.159a1.873 1.873 0 0 0-2.693 1.116l-.094.318c-.246.835-1.428.835-1.674 0l-.094-.319a1.873 1.873 0 0 0-2.692-1.115l-.292.16c-.764.415-1.6-.42-1.184-1.185l.159-.291A1.873 1.873 0 0 0 1.945 8.93l-.319-.094c-.835-.246-.835-1.428 0-1.674l.319-.094A1.873 1.873 0 0 0 3.06 4.377l-.16-.292c-.415-.764.42-1.6 1.185-1.184l.292.159a1.873 1.873 0 0 0 2.692-1.115l.094-.319z"/>
                </svg>
                System
            </a>
        </div>
        
        <div class="nav-user">
            <div class="user-info">
                <span class="user-name">Hello, <%= user.username %></span>
                <span class="user-role">Administrator</span>
            </div>
            <a href="/admin/logout" class="logout-btn">
                <svg width="16" height="16" viewBox="0 0 16 16" fill="currentColor">
                    <path fill-rule="evenodd" d="M10 12.5a.5.5 0 0 1-.5.5h-8a.5.5 0 0 1-.5-.5v-9a.5.5 0 0 1 .5-.5h8a.5.5 0 0 1 .5.5v2a.5.5 0 0 0 1 0v-2A1.5 1.5 0 0 0 9.5 2h-8A1.5 1.5 0 0 0 0 3.5v9A1.5 1.5 0 0 0 1.5 14h8a1.5 1.5 0 0 0 1.5-1.5v-2a.5.5 0 0 0-1 0v2z"/>
                    <path fill-rule="evenodd" d="M15.854 8.354a.5.5 0 0 0 0-.708l-3-3a.5.5 0 0 0-.708.708L14.293 7.5H5.5a.5.5 0 0 0 0 1h8.793l-2.147 2.146a.5.5 0 0 0 .708.708l3-3z"/>
                </svg>
                Logout
            </a>
        </div>
    </nav>

    <main class="admin-main">
        <div class="admin-container">
            <header class="admin-header">
                <h1>System Information</h1>
                <p class="header-subtitle">Server status and configuration details</p>
            </header>

            <div class="dashboard-grid">
                <div class="dashboard-card">
                    <div class="card-header">
                        <h3>Server Information</h3>
                    </div>
                    <div class="card-content" style="padding: 24px;">
                        <div class="system-info-grid">
                            <div class="info-item">
                                <span class="info-label">Node.js Version</span>
                                <span class="info-value"><%= systemInfo.node_version %></span>
                            </div>
                            <div class="info-item">
                                <span class="info-label">Platform</span>
                                <span class="info-value"><%= systemInfo.platform %></span>
                            </div>
                            <div class="info-item">
                                <span class="info-label">Environment</span>
                                <span class="info-value"><%= systemInfo.environment %></span>
                            </div>
                            <div class="info-item">
                                <span class="info-label">Uptime</span>
                                <span class="info-value"><%= Math.floor(systemInfo.uptime / 3600) %>h <%= Math.floor((systemInfo.uptime % 3600) / 60) %>m</span>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="dashboard-card">
                    <div class="card-header">
                        <h3>Memory Usage</h3>
                    </div>
                    <div class="card-content" style="padding: 24px;">
                        <div class="system-info-grid">
                            <div class="info-item">
                                <span class="info-label">RSS</span>
                                <span class="info-value"><%= Math.round(systemInfo.memory_usage.rss / 1024 / 1024) %> MB</span>
                            </div>
                            <div class="info-item">
                                <span class="info-label">Heap Used</span>
                                <span class="info-value"><%= Math.round(systemInfo.memory_usage.heapUsed / 1024 / 1024) %> MB</span>
                            </div>
                            <div class="info-item">
                                <span class="info-label">Heap Total</span>
                                <span class="info-value"><%= Math.round(systemInfo.memory_usage.heapTotal / 1024 / 1024) %> MB</span>
                            </div>
                            <div class="info-item">
                                <span class="info-label">External</span>
                                <span class="info-value"><%= Math.round(systemInfo.memory_usage.external / 1024 / 1024) %> MB</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="dashboard-card" style="margin-bottom: 24px;">
                <div class="card-header">
                    <h3>Database Statistics</h3>
                </div>
                <div class="card-content" style="padding: 24px;">
                    <div class="system-info-grid">
                        <div class="info-item">
                            <span class="info-label">Total Users</span>
                            <span class="info-value"><%= dbInfo.user_count %></span>
                        </div>
                        <div class="info-item">
                            <span class="info-label">Total Clients</span>
                            <span class="info-value"><%= dbInfo.client_count %></span>
                        </div>
                        <div class="info-item">
                            <span class="info-label">Allowed Origins</span>
                            <span class="info-value"><%= dbInfo.origin_count %></span>
                        </div>
                        <div class="info-item">
                            <span class="info-label">Active Auth Codes</span>
                            <span class="info-value"><%= dbInfo.active_auth_codes %></span>
                        </div>
                        <div class="info-item">
                            <span class="info-label">Active Tokens</span>
                            <span class="info-value"><%= dbInfo.active_tokens %></span>
                        </div>
                    </div>
                </div>
            </div>

            <div class="dashboard-card" style="margin-bottom: 24px;">
                <div class="card-header">
                    <h3>CSP Configuration</h3>
                </div>
                <div class="card-content" style="padding: 24px;">
                    <div class="csp-status">
                        <div class="info-item">
                            <span class="info-label">Total CSP Origins</span>
                            <span class="info-value"><%= cspInfo.totalOrigins %></span>
                        </div>
                        <div class="info-item">
                            <span class="info-label">Client Origins</span>
                            <span class="info-value"><%= cspInfo.clientOrigins.length %></span>
                        </div>
                    </div>
                    
                    <% if (cspInfo.clientOrigins.length > 0) { %>
                    <div style="margin-top: 16px;">
                        <h4 style="font-size: 14px; font-weight: 600; margin-bottom: 8px;">Client Origins:</h4>
                        <div class="origin-list">
                            <% cspInfo.clientOrigins.forEach(origin => { %>
                            <span class="origin-tag"><%= origin %></span>
                            <% }); %>
                        </div>
                    </div>
                    <% } %>
                </div>
            </div>

            <div class="dashboard-card">
                <div class="card-header">
                    <h3>Configuration Status</h3>
                </div>
                <div class="card-content" style="padding: 24px;">
                    <div class="config-status-grid">
                        <div class="status-item">
                            <div class="status-indicator active"></div>
                            <span class="status-label">JWT Service</span>
                            <span class="status-text">Active</span>
                        </div>
                        <div class="status-item">
                            <div class="status-indicator active"></div>
                            <span class="status-label">CORS Protection</span>
                            <span class="status-text">Enabled</span>
                        </div>
                        <div class="status-item">
                            <div class="status-indicator active"></div>
                            <span class="status-label">Rate Limiting</span>
                            <span class="status-text">Enabled</span>
                        </div>
                        <div class="status-item">
                            <div class="status-indicator active"></div>
                            <span class="status-label">Security Headers</span>
                            <span class="status-text">Active</span>
                        </div>
                        <div class="status-item">
                            <div class="status-indicator active"></div>
                            <span class="status-label">Session Management</span>
                            <span class="status-text">Active</span>
                        </div>
                        <div class="status-item">
                            <div class="status-indicator active"></div>
                            <span class="status-label">Database</span>
                            <span class="status-text">Connected</span>
                        </div>
                    </div>
                </div>
            </div>

            <div class="quick-actions">
                <h3>System Actions</h3>
                <div class="action-buttons">
                    <button id="refreshStatusBtn" class="action-btn secondary">
                        <svg width="16" height="16" viewBox="0 0 16 16" fill="currentColor">
                            <path d="M8 3a5 5 0 1 0 4.546 2.914.5.5 0 0 1 .908-.417A6 6 0 1 1 8 2v1z"/>
                            <path d="M8 4.466V.534a.25.25 0 0 1 .41-.192l2.36 1.966c.12.1.12.284 0 .384L8.41 4.658A.25.25 0 0 1 8 4.466z"/>
                        </svg>
                        Refresh Status
                    </button>
                    <button id="refreshCSPBtn" class="action-btn primary">
                        <svg width="16" height="16" viewBox="0 0 16 16" fill="currentColor">
                            <path d="M8.5 6a.5.5 0 0 0-1 0v1.5H6a.5.5 0 0 0 0 1h1.5V10a.5.5 0 0 0 1 0V8.5H10a.5.5 0 0 0 0-1H8.5V6z"/>
                            <path d="M8 1a2.5 2.5 0 0 1 2.5 2.5V4h-5v-.5A2.5 2.5 0 0 1 8 1zm3.5 3v-.5a3.5 3.5 0 1 0-7 0V4H1v10a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2V4h-3.5zM2 5h12v9a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1V5z"/>
                        </svg>
                        Refresh CSP
                    </button>
                    <a href="/health" target="_blank" class="action-btn secondary">
                        <svg width="16" height="16" viewBox="0 0 16 16" fill="currentColor">
                            <path d="M8.5 2.687c.654-.689 1.782-.886 3.112-.752 1.234.124 2.503.523 3.388.893v9.923c-.918-.35-2.107-.692-3.287-.81-1.094-.111-2.278-.039-3.213.492V2.687zM8 1.783C7.015.936 5.587.81 4.287.94c-1.514.153-3.042.672-3.994 1.105A.5.5 0 0 0 0 2.5v11a.5.5 0 0 0 .707.455c.882-.4 2.303-.881 3.68-1.02 1.409-.142 2.59.087 3.223.877a.5.5 0 0 0 .78 0c.633-.79 1.814-1.019 3.222-.877 1.378.139 2.8.62 3.681 1.02A.5.5 0 0 0 16 13.5v-11a.5.5 0 0 0-.293-.455c-.952-.433-2.48-.952-3.994-1.105C10.413.809 8.985.936 8 1.783z"/>
                        </svg>
                        View Health Check
                    </a>
                    <a href="/.well-known/openid-configuration" target="_blank" class="action-btn secondary">
                        <svg width="16" height="16" viewBox="0 0 16 16" fill="currentColor">
                            <path d="M6 0a.5.5 0 0 1 .5.5V3h3V.5a.5.5 0 0 1 1 0V3h1a.5.5 0 0 1 .5.5v3a.5.5 0 0 1-.5.5H10v1a.5.5 0 0 1-.5.5H6.5V6.5a.5.5 0 0 1-.5-.5V3H1a.5.5 0 0 1-.5-.5V.5A.5.5 0 0 1 1 0h5zM1 4v7.5a.5.5 0 0 0 .5.5h8a.5.5 0 0 0 .5-.5V4H1z"/>
                        </svg>
                        OpenID Configuration
                    </a>
                </div>
            </div>
        </div>
    </main>

    <script src="/js/admin.js"></script>
    
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const refreshStatusBtn = document.getElementById('refreshStatusBtn');
            if (refreshStatusBtn) {
                refreshStatusBtn.addEventListener('click', function() {
                    location.reload();
                });
            }

            const refreshCSPBtn = document.getElementById('refreshCSPBtn');
            if (refreshCSPBtn) {
                refreshCSPBtn.addEventListener('click', async function() {
                    const originalText = this.innerHTML;
                    this.disabled = true;
                    this.innerHTML = `
                        <svg width="16" height="16" viewBox="0 0 16 16" fill="currentColor" style="animation: spin 1s linear infinite;">
                            <path d="M8 3a5 5 0 1 0 4.546 2.914.5.5 0 0 1 .908-.417A6 6 0 1 1 8 2v1z"/>
                            <path d="M8 4.466V.534a.25.25 0 0 1 .41-.192l2.36 1.966c.12.1.12.284 0 .384L8.41 4.658A.25.25 0 0 1 8 4.466z"/>
                        </svg>
                        Refreshing CSP...
                    `;

                    try {
                        const response = await fetch('/admin/refresh-csp', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            }
                        });

                        if (response.ok) {
                            window.adminAPI.toastManager.success('Success', 'CSP configuration refreshed successfully');
                            setTimeout(() => location.reload(), 1000);
                        } else {
                            throw new Error('Failed to refresh CSP');
                        }
                    } catch (error) {
                        window.adminAPI.toastManager.error('Error', 'Failed to refresh CSP configuration');
                    } finally {
                        this.disabled = false;
                        this.innerHTML = originalText;
                    }
                });
            }
        });
    </script>
    
    <style>
        .system-info-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 16px;
        }
        
        .info-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 12px 0;
            border-bottom: 1px solid #f3f2f1;
        }
        
        .info-item:last-child {
            border-bottom: none;
        }
        
        .info-label {
            font-size: 14px;
            color: #605e5c;
            font-weight: 500;
        }
        
        .info-value {
            font-size: 14px;
            color: #323130;
            font-weight: 600;
            font-family: 'Consolas', 'Monaco', monospace;
        }
        
        .config-status-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 16px;
        }
        
        .status-item {
            display: flex;
            align-items: center;
            gap: 12px;
            padding: 12px 0;
        }
        
        .status-indicator {
            width: 12px;
            height: 12px;
            border-radius: 50%;
            background-color: #d13438;
        }
        
        .status-indicator.active {
            background-color: #107c10;
        }
        
        .status-label {
            font-size: 14px;
            color: #323130;
            font-weight: 500;
            flex: 1;
        }
        
        .status-text {
            font-size: 12px;
            color: #605e5c;
        }

        .csp-status {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 16px;
            margin-bottom: 16px;
        }

        .origin-list {
            display: flex;
            flex-wrap: wrap;
            gap: 8px;
        }

        .origin-tag {
            background-color: #deecf9;
            color: #004578;
            padding: 4px 8px;
            border-radius: 4px;
            font-size: 12px;
            font-family: 'Consolas', 'Monaco', monospace;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        
        @media (max-width: 768px) {
            .system-info-grid {
                grid-template-columns: 1fr;
            }
            
            .config-status-grid {
                grid-template-columns: 1fr;
            }

            .csp-status {
                grid-template-columns: 1fr;
            }
        }
    </style>
</body>
</html>
```

```filename
auth-server\views\admin\users.ejs
```

```javascript
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>
        <%= pageTitle %> - SSO Admin
    </title>
    <link rel="stylesheet" href="/css/style.css">
    <link rel="stylesheet" href="/css/admin.css">
</head>

<body class="admin-body">
    <!-- Navigation -->
    <nav class="admin-nav">
        <div class="nav-brand">
            <svg width="24" height="24" viewBox="0 0 24 24" fill="none">
                <path d="M12 2L22 7L12 12L2 7L12 2Z" fill="#0078d4" />
                <path d="M2 17L12 22L22 17" stroke="#0078d4" stroke-width="2" stroke-linecap="round"
                    stroke-linejoin="round" />
                <path d="M2 12L12 17L22 12" stroke="#0078d4" stroke-width="2" stroke-linecap="round"
                    stroke-linejoin="round" />
            </svg>
            <span>SSO Admin</span>
        </div>

        <div class="nav-links">
            <a href="/admin/dashboard" class="nav-link">
                <svg width="16" height="16" viewBox="0 0 16 16" fill="currentColor">
                    <path d="M8 4a4 4 0 1 1 0 8 4 4 0 0 1 0-8z" />
                </svg>
                Dashboard
            </a>
            <a href="/admin/users" class="nav-link active">
                <svg width="16" height="16" viewBox="0 0 16 16" fill="currentColor">
                    <path
                        d="M15 14s1 0 1-1-1-4-5-4-5 3-5 4 1 1 1 1h8zm-7.978-1A.261.261 0 0 1 7 12.996c.001-.264.167-1.03.76-1.72C8.312 10.629 9.282 10 11 10c1.717 0 2.687.63 3.24 1.276.593.69.758 1.457.76 1.72l-.008.002a.274.274 0 0 1-.014.002H7.022zM11 7a2 2 0 1 0 0-4 2 2 0 0 0 0 4zm3-2a3 3 0 1 1-6 0 3 3 0 0 1 6 0zM6.936 9.28a5.88 5.88 0 0 0-1.23-.247A7.35 7.35 0 0 0 5 9c-4 0-5 3-5 4 0 .667.333 1 1 1h4.216A2.238 2.238 0 0 1 5 13c0-1.01.377-2.042 1.09-2.904.243-.294.526-.569.846-.816zM4.92 10A5.493 5.493 0 0 0 4 13H1c0-.26.164-1.03.76-1.724.545-.636 1.492-1.256 3.16-1.275zM1.5 5.5a3 3 0 1 1 6 0 3 3 0 0 1-6 0zm3-2a2 2 0 1 0 0 4 2 2 0 0 0 0-4z" />
                </svg>
                Users
            </a>
            <a href="/admin/clients" class="nav-link">
                <svg width="16" height="16" viewBox="0 0 16 16" fill="currentColor">
                    <path
                        d="M1 2.828c.885-.37 2.154-.769 3.388-.893 1.33-.134 2.458.063 3.112.752v9.746c-.935-.53-2.12-.603-3.213-.493-1.18.12-2.37.461-3.287.811V2.828zm7.5-.141c.654-.689 1.782-.886 3.112-.752 1.234.124 2.503.523 3.388.893v9.923c-.918-.35-2.107-.692-3.287-.81-1.094-.111-2.278-.039-3.213.492V2.687zM8 1.783C7.015.936 5.587.81 4.287.94c-1.514.153-3.042.672-3.994 1.105A.5.5 0 0 0 0 2.5v11a.5.5 0 0 0 .707.455c.882-.4 2.303-.881 3.68-1.02 1.409-.142 2.59.087 3.223.877a.5.5 0 0 0 .78 0c.633-.79 1.814-1.019 3.222-.877 1.378.139 2.8.62 3.681 1.02A.5.5 0 0 0 16 13.5v-11a.5.5 0 0 0-.293-.455c-.952-.433-2.48-.952-3.994-1.105C10.413.809 8.985.936 8 1.783z" />
                </svg>
                Clients
            </a>
            <a href="/admin/origins" class="nav-link">
                <svg width="16" height="16" viewBox="0 0 16 16" fill="currentColor">
                    <path
                        d="M0 8a8 8 0 1 1 16 0A8 8 0 0 1 0 8zm7.5-6.923c-.67.204-1.335.82-1.887 1.855A7.97 7.97 0 0 0 5.145 4H7.5V1.077zM4.09 4a9.267 9.267 0 0 1 .64-1.539 6.7 6.7 0 0 1 .597-.933A7.025 7.025 0 0 0 2.255 4H4.09zm-.582 3.5c.03-.877.138-1.718.312-2.5H1.674a6.958 6.958 0 0 0-.656 2.5h2.49zM4.847 5a12.5 12.5 0 0 0-.338 2.5H7.5V5H4.847zM8.5 5v2.5h2.99a12.495 12.495 0 0 0-.337-2.5H8.5zM4.51 8.5a12.5 12.5 0 0 0 .337 2.5H7.5V8.5H4.51zm3.99 0V11h2.653c.187-.765.306-1.608.338-2.5H8.5zM5.145 12c.138.386.295.744.468 1.068.552 1.035 1.218 1.65 1.887 1.855V12H5.145zm.182 2.472a6.696 6.696 0 0 1-.597-.933A9.268 9.268 0 0 1 4.09 12H2.255a7.024 7.024 0 0 0 3.072 2.472zM3.82 11a13.652 13.652 0 0 1-.312-2.5h-2.49c.062.89.291 1.733.656 2.5H3.82zm6.853 3.472A7.024 7.024 0 0 0 13.745 12H11.91a9.27 9.27 0 0 1-.64 1.539 6.688 6.688 0 0 1-.597.933zM8.5 12v2.923c.67-.204 1.335-.82 1.887-1.855.173-.324.33-.682.468-1.068H8.5zm3.68-1h2.146c.365-.767.594-1.61.656-2.5h-2.49a13.65 13.65 0 0 1-.312 2.5zm2.802-6.5h-2.49A13.65 13.65 0 0 1 12.18 5h2.146c-.365-.767-.594-1.61-.656-2.5zM11.27 2.461c.247.464.462.98.64 1.539h1.835a7.024 7.024 0 0 0-3.072-2.472c.218.284.418.598.597.933zM10.855 4a7.966 7.966 0 0 0-.468-1.068C9.835 1.897 9.17 1.282 8.5 1.077V4h2.355z" />
                </svg>
                Origins
            </a>
            <a href="/admin/system" class="nav-link">
                <svg width="16" height="16" viewBox="0 0 16 16" fill="currentColor">
                    <path
                        d="M8 4.754a3.246 3.246 0 1 0 0 6.492 3.246 3.246 0 0 0 0-6.492zM5.754 8a2.246 2.246 0 1 1 4.492 0 2.246 2.246 0 0 1-4.492 0z" />
                    <path
                        d="M9.796 1.343c-.527-1.79-3.065-1.79-3.592 0l-.094.319a.873.873 0 0 1-1.255.52l-.292-.16c-1.64-.892-3.433.902-2.54 2.541l.159.292a.873.873 0 0 1-.52 1.255l-.319.094c-1.79.527-1.79 3.065 0 3.592l.319.094a.873.873 0 0 1 .52 1.255l-.16.292c-.892 1.64.901 3.434 2.541 2.54l.292-.159a.873.873 0 0 1 1.255.52l.094.319c.527 1.79 3.065 1.79 3.592 0l.094-.319a.873.873 0 0 1 1.255-.52l.292.16c1.64.893 3.434-.902 2.54-2.541l-.159-.292a.873.873 0 0 1 .52-1.255l.319-.094c1.79-.527 1.79-3.065 0-3.592l-.319-.094a.873.873 0 0 1-.52-1.255l.16-.292c.893-1.64-.902-3.433-2.541-2.54l-.292.159a.873.873 0 0 1-1.255-.52l-.094-.319zm-2.633.283c.246-.835 1.428-.835 1.674 0l.094.319a1.873 1.873 0 0 0 2.693 1.115l.291-.16c.764-.415 1.6.42 1.184 1.185l-.159.292a1.873 1.873 0 0 0 1.116 2.692l.318.094c.835.246.835 1.428 0 1.674l-.319.094a1.873 1.873 0 0 0-1.115 2.693l.16.291c.415.764-.42 1.6-1.185 1.184l-.291-.159a1.873 1.873 0 0 0-2.693 1.116l-.094.318c-.246.835-1.428.835-1.674 0l-.094-.319a1.873 1.873 0 0 0-2.692-1.115l-.292.16c-.764.415-1.6-.42-1.184-1.185l.159-.291A1.873 1.873 0 0 0 1.945 8.93l-.319-.094c-.835-.246-.835-1.428 0-1.674l.319-.094A1.873 1.873 0 0 0 3.06 4.377l-.16-.292c-.415-.764.42-1.6 1.185-1.184l.292.159a1.873 1.873 0 0 0 2.692-1.115l.094-.319z" />
                </svg>
                System
            </a>
        </div>

        <div class="nav-user">
            <div class="user-info">
                <span class="user-name">Hello, <%= user.username %></span>
                <span class="user-role">Administrator</span>
            </div>
            <a href="/admin/logout" class="logout-btn">
                <svg width="16" height="16" viewBox="0 0 16 16" fill="currentColor">
                    <path fill-rule="evenodd"
                        d="M10 12.5a.5.5 0 0 1-.5.5h-8a.5.5 0 0 1-.5-.5v-9a.5.5 0 0 1 .5-.5h8a.5.5 0 0 1 .5.5v2a.5.5 0 0 0 1 0v-2A1.5 1.5 0 0 0 9.5 2h-8A1.5 1.5 0 0 0 0 3.5v9A1.5 1.5 0 0 0 1.5 14h8a1.5 1.5 0 0 0 1.5-1.5v-2a.5.5 0 0 0-1 0v2z" />
                    <path fill-rule="evenodd"
                        d="M15.854 8.354a.5.5 0 0 0 0-.708l-3-3a.5.5 0 0 0-.708.708L14.293 7.5H5.5a.5.5 0 0 0 0 1h8.793l-2.147 2.146a.5.5 0 0 0 .708.708l3-3z" />
                </svg>
                Logout
            </a>
        </div>
    </nav>

    <!-- Main Content -->
    <main class="admin-main">
        <div class="admin-container">
            <!-- Header -->
            <header class="admin-header">
                <h1>User Management</h1>
                <p class="header-subtitle">Manage user accounts and permissions</p>
            </header>

            <!-- Controls -->
            <div class="page-controls">
                <div class="search-controls">
                    <div class="search-box">
                        <svg width="16" height="16" viewBox="0 0 16 16" fill="currentColor" class="search-icon">
                            <path
                                d="M11.742 10.344a6.5 6.5 0 1 0-1.397 1.398h-.001c.03.04.062.078.098.115l3.85 3.85a1 1 0 0 0 1.415-1.414l-3.85-3.85a1.007 1.007 0 0 0-.115-.1zM12 6.5a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0z" />
                        </svg>
                        <input type="text" id="searchInput" placeholder="Search users..." class="search-input">
                    </div>
                    <select id="roleFilter" class="filter-select">
                        <option value="">All Roles</option>
                        <option value="admin">Admin</option>
                        <option value="user">User</option>
                    </select>
                    <select id="statusFilter" class="filter-select">
                        <option value="">All Status</option>
                        <option value="active">Active</option>
                        <option value="inactive">Inactive</option>
                    </select>
                </div>

                <button id="createUserBtn" class="btn-primary">
                    <svg width="16" height="16" viewBox="0 0 16 16" fill="currentColor">
                        <path
                            d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z" />
                    </svg>
                    Create User
                </button>
            </div>

            <!-- Stats -->
            <div class="stats-row">
                <div class="stat-item">
                    <span class="stat-label">Total Users</span>
                    <span class="stat-value" id="totalUsers">-</span>
                </div>
                <div class="stat-item">
                    <span class="stat-label">Admins</span>
                    <span class="stat-value" id="adminCount">-</span>
                </div>
                <div class="stat-item">
                    <span class="stat-label">Active</span>
                    <span class="stat-value" id="activeUsers">-</span>
                </div>
            </div>

            <!-- Users Table -->
            <div class="data-table-container">
                <div class="loading-overlay" id="loadingOverlay">
                    <div class="loading-spinner"></div>
                    <span>Loading...</span>
                </div>

                <table class="data-table" id="usersTable">
                    <thead>
                        <tr>
                            <th>User</th>
                            <th>Email</th>
                            <th>Organization</th>
                            <th>Role</th>
                            <th>Status</th>
                            <th>Created</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody id="usersTableBody">
                        <!-- Users will be loaded here via JavaScript -->
                    </tbody>
                </table>

                <div class="pagination-container">
                    <div class="pagination-info" id="paginationInfo">
                        Showing 0 of 0 users
                    </div>
                    <div class="pagination-controls" id="paginationControls">
                        <!-- Pagination buttons will be generated here -->
                    </div>
                </div>
            </div>
        </div>
    </main>

    <!-- Create/Edit User Modal -->
    <div class="modal" id="userModal">
        <div class="modal-content modal-large"> <!-- 🆕 モーダルサイズ拡大 -->
            <div class="modal-header">
                <h3 id="modalTitle">Create User</h3>
                <button class="modal-close" id="closeModal">
                    <svg width="16" height="16" viewBox="0 0 16 16" fill="currentColor">
                        <path
                            d="M.293.293a1 1 0 0 1 1.414 0L8 6.586 14.293.293a1 1 0 1 1 1.414 1.414L9.414 8l6.293 6.293a1 1 0 0 1-1.414 1.414L8 9.414l-6.293 6.293a1 1 0 0 1-1.414-1.414L6.586 8 .293 1.707a1 1 0 0 1 0-1.414z" />
                    </svg>
                </button>
            </div>

            <form id="userForm" class="modal-form">
                <div class="form-row">
                    <div class="form-group">
                        <label for="username">Username *</label>
                        <input type="text" id="username" name="username" required>
                    </div>
                    <div class="form-group">
                        <label for="email">Email *</label>
                        <input type="email" id="email" name="email" required>
                    </div>
                </div>

                <div class="form-row">
                    <div class="form-group">
                        <label for="firstName">First Name</label>
                        <input type="text" id="firstName" name="first_name">
                    </div>
                    <div class="form-group">
                        <label for="lastName">Last Name</label>
                        <input type="text" id="lastName" name="last_name">
                    </div>
                </div>

                <!-- 🆕 組織情報セクション -->
                <div class="form-row">
                    <div class="form-group">
                        <label for="department">Department</label>
                        <input type="text" id="department" name="department" placeholder="e.g., Engineering, Sales, HR">
                        <small class="form-help">User's department or division</small>
                    </div>
                    <div class="form-group">
                        <label for="team">Team</label>
                        <input type="text" id="team" name="team" placeholder="e.g., Backend Team, Marketing Team">
                        <small class="form-help">User's team within the department</small>
                    </div>
                </div>

                <div class="form-row">
                    <div class="form-group">
                        <label for="supervisor">Supervisor</label>
                        <input type="text" id="supervisor" name="supervisor" placeholder="e.g., John Smith, Manager">
                        <small class="form-help">User's direct supervisor or manager</small>
                    </div>
                    <div class="form-group">
                        <label for="role">Role *</label>
                        <select id="role" name="role" required>
                            <option value="user">User</option>
                            <option value="admin">Administrator</option>
                        </select>
                    </div>
                </div>

                <div class="form-row">
                    <div class="form-group">
                        <label for="isActive">Status</label>
                        <select id="isActive" name="is_active">
                            <option value="1">Active</option>
                            <option value="0">Inactive</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="password">Password <span id="passwordRequired">*</span></label>
                        <input type="password" id="password" name="password">
                        <small class="form-help" id="passwordHelp">Minimum 6 characters. Leave blank to keep current
                            password when editing.</small>
                    </div>
                </div>

                <div class="modal-actions">
                    <button type="button" class="btn-secondary" id="cancelBtn">Cancel</button>
                    <button type="submit" class="btn-primary" id="submitBtn">Create User</button>
                </div>
            </form>
        </div>
    </div>


    <!-- Delete Confirmation Modal -->
    <div class="modal" id="deleteModal">
        <div class="modal-content modal-small">
            <div class="modal-header">
                <h3>Delete User</h3>
                <button class="modal-close" id="closeDeleteModal">
                    <svg width="16" height="16" viewBox="0 0 16 16" fill="currentColor">
                        <path
                            d="M.293.293a1 1 0 0 1 1.414 0L8 6.586 14.293.293a1 1 0 1 1 1.414 1.414L9.414 8l6.293 6.293a1 1 0 0 1-1.414 1.414L8 9.414l-6.293 6.293a1 1 0 0 1-1.414-1.414L6.586 8 .293 1.707a1 1 0 0 1 0-1.414z" />
                    </svg>
                </button>
            </div>

            <div class="modal-body">
                <div class="delete-warning">
                    <svg width="48" height="48" viewBox="0 0 16 16" fill="currentColor">
                        <path
                            d="M7.938 2.016A.13.13 0 0 1 8.002 2a.13.13 0 0 1 .063.016.146.146 0 0 1 .054.057l6.857 11.667c.036.06.035.124.002.183a.163.163 0 0 1-.054.06.116.116 0 0 1-.066.017H1.146a.115.115 0 0 1-.066-.017.163.163 0 0 1-.054-.06.176.176 0 0 1 .002-.183L7.884 2.073a.147.147 0 0 1 .054-.057zm1.044-.45a1.13 1.13 0 0 0-2.008 0L.127 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566z" />
                        <path
                            d="M7.002 12a1 1 0 1 1 2 0 1 1 0 0 1-2 0zM7.1 5.995a.905.905 0 1 1 1.8 0l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995z" />
                    </svg>
                    <p>Are you sure you want to delete <strong id="deleteUserName"></strong>?</p>
                    <p>This action cannot be undone.</p>
                </div>
            </div>

            <div class="modal-actions">
                <button type="button" class="btn-secondary" id="cancelDeleteBtn">Cancel</button>
                <button type="button" class="btn-danger" id="confirmDeleteBtn">Delete User</button>
            </div>
        </div>
    </div>

    <!-- Toast Messages -->
    <div class="toast-container" id="toastContainer"></div>

    <script src="/js/admin.js"></script>
    <script src="/js/admin-users.js"></script>
</body>

</html>
```

```filename
auth-server\views\error.ejs
```

```javascript
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Demo SSO Authentication - Error</title>
    <link rel="stylesheet" href="/css/style.css">
</head>
<body>
    <div class="error-container">
        <div class="error-box">
            <div class="error-header">
                <div class="app-logo">
                    <svg width="24" height="24" viewBox="0 0 24 24" fill="none">
                        <path d="M12 2L22 7L12 12L2 7L12 2Z" fill="#d13438"/>
                        <path d="M2 17L12 22L22 17" stroke="#d13438" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                        <path d="M2 12L12 17L22 12" stroke="#d13438" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                    </svg>
                </div>
                <h1>Authentication Error</h1>
            </div>
            
            <div class="error-details">
                <div class="error-message">
                    <svg width="20" height="20" viewBox="0 0 20 20" fill="currentColor" style="color: #d13438; margin-bottom: 16px;">
                        <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd"/>
                    </svg>
                    <p>The authentication request could not be processed.</p>
                </div>
                
                <div class="error-suggestions">
                    <h3>What you can try:</h3>
                    <ul>
                        <li>Verify you accessed this page from a valid application</li>
                        <li>Contact the application provider for support</li>
                        <li>Try accessing the application again from the beginning</li>
                        <li>Clear your browser cookies and try again</li>
                    </ul>
                </div>
            </div>
            
            <div class="error-actions">
                <button type="button" id="goBackBtn" class="error-btn primary">
                    <svg width="16" height="16" viewBox="0 0 16 16" fill="currentColor" style="margin-right: 8px;">
                        <path fill-rule="evenodd" d="M15 8a.5.5 0 0 0-.5-.5H2.707l3.147-3.146a.5.5 0 1 0-.708-.708l-4 4a.5.5 0 0 0 0 .708l4 4a.5.5 0 0 0 .708-.708L2.707 8.5H14.5A.5.5 0 0 0 15 8z"/>
                    </svg>
                    Return to Application
                </button>
            </div>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const goBackBtn = document.getElementById('goBackBtn');
            if (goBackBtn) {
                goBackBtn.addEventListener('click', function() {
                    if (window.history.length > 1) {
                        window.history.back();
                    } else {
                        window.close();
                    }
                });
            }
        });
    </script>
</body>
</html>
```

```filename
auth-server\views\login.ejs
```

```javascript
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sign In - Enterprise SSO</title>
    <link rel="stylesheet" href="/css/style.css">
</head>

<body>
    <div class="login-container">
        <div class="login-card">
            <div class="login-header">
                <div class="app-logo">
                    <svg width="20" height="20" viewBox="0 0 24 24" fill="none">
                        <path d="M12 2L22 7L12 12L2 7L12 2Z" fill="#0078d4" />
                        <path d="M2 17L12 22L22 17" stroke="#0078d4" stroke-width="2" stroke-linecap="round"
                            stroke-linejoin="round" />
                        <path d="M2 12L12 17L22 12" stroke="#0078d4" stroke-width="2" stroke-linecap="round"
                            stroke-linejoin="round" />
                    </svg>
                </div>
                <h1>SSO Sign In</h1>
            </div>

            <div class="message-area">
                <% if (error && error.length> 0) { %>
                    <div class="alert alert-error">
                        <svg width="14" height="14" viewBox="0 0 16 16" fill="currentColor">
                            <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z" />
                            <path
                                d="M7.002 11a1 1 0 1 1 2 0 1 1 0 0 1-2 0zM7.1 4.995a.905.905 0 1 1 1.8 0l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 4.995z" />
                        </svg>
                        <%= error %>
                    </div>
                    <% } else if (message && message.length> 0) { %>
                        <div class="alert alert-info">
                            <svg width="14" height="14" viewBox="0 0 16 16" fill="currentColor">
                                <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z" />
                                <path
                                    d="m8.93 6.588-2.29.287-.082.38.45.083c.294.07.352.176.288.469l-.738 3.468c-.194.897.105 1.319.808 1.319.545 0 1.178-.252 1.465-.598l.088-.416c-.2.176-.492.246-.686.246-.275 0-.375-.193-.304-.533L8.93 6.588zM9 4.5a1 1 0 1 1-2 0 1 1 0 0 1 2 0z" />
                            </svg>
                            <%= message %>
                        </div>
                        <% } %>
            </div>

            <!-- ログインフォーム -->
            <form method="POST" action="/auth/login" class="login-form">
                <input type="hidden" name="client_id" value="<%= client_id %>">
                <input type="hidden" name="redirect_uri" value="<%= redirect_uri %>">
                <input type="hidden" name="scope" value="<%= scope %>">
                <input type="hidden" name="state" value="<%= state %>">

                <div class="form-group">
                    <label for="email">Email Address</label>
                    <input type="email" id="email" name="email" required autocomplete="email" class="form-input">
                </div>

                <div class="form-group">
                    <label for="password">Password</label>
                    <input type="password" id="password" name="password" required autocomplete="current-password"
                        class="form-input">
                </div>

                <button type="submit" class="btn-primary">Sign In</button>
            </form>

            <div class="demo-section">
                <div class="demo-title">Demo Accounts</div>
                <div class="demo-accounts">
                    <div class="demo-account" data-email="admin@company.com" data-password="<%= demo_admin_password %>">
                        <span class="demo-label">Admin</span>
                        <span class="demo-credentials">admin@company.com / <%= demo_admin_password %></span>
                        <button type="button" class="demo-btn">Use</button>
                    </div>
                    <div class="demo-account" data-email="user0@company.com" data-password="<%= demo_user_password %>">
                        <span class="demo-label">User</span>
                        <span class="demo-credentials">user0@company.com / <%= demo_user_password %></span>
                        <button type="button" class="demo-btn">Use</button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="/js/login.js"></script>
</body>

</html>
```

```filename
check-client.js
```

```javascript
// scripts/check-client.js
import { fileURLToPath } from 'url';
import path from 'path';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

async function checkClient() {
  try {
    const { default: pool } = await import('./config/database.js');
    
    console.log('🔍 Checking org-viewer-client configuration...\n');
    
    // クライアント情報を取得
    const result = await pool.query(
      'SELECT * FROM clients WHERE client_id = ?',
      ['org-viewer-client']
    );
    
    if (result.rows.length === 0) {
      console.log('❌ Client "org-viewer-client" not found in database');
      
      // 全クライアント一覧を表示
      const allClients = await pool.query('SELECT client_id, name, is_active FROM clients');
      console.log('\n📋 Available clients:');
      allClients.rows.forEach(client => {
        console.log(`  - ${client.client_id} (${client.name}) - ${client.is_active ? 'Active' : 'Inactive'}`);
      });
      return;
    }
    
    const client = result.rows[0];
    
    console.log('✅ Client found:');
    console.log('  Client ID:', client.client_id);
    console.log('  Client Secret:', client.client_secret);
    console.log('  Name:', client.name);
    console.log('  Status:', client.is_active ? '✅ Active' : '❌ Inactive');
    console.log('  Redirect URIs:', client.redirect_uris);
    console.log('  Allowed Scopes:', client.allowed_scopes);
    console.log('  Created:', client.created_at);
    
    console.log('\n📋 Environment Variables for your client:');
    console.log(`OAUTH_CLIENT_ID=org-viewer-client`);
    console.log(`OAUTH_CLIENT_SECRET=${client.client_secret}`);
    console.log(`OAUTH_REDIRECT_URI=http://localhost:4001/oauth/callback`);
    console.log(`OAUTH_AUTH_URL=http://localhost:3303/oauth2/authorize`);
    console.log(`OAUTH_TOKEN_URL=http://localhost:3303/token`);
    console.log(`OAUTH_USERINFO_URL=http://localhost:3303/userinfo`);
    
    // Redirect URIをパース
    try {
      const redirectUris = JSON.parse(client.redirect_uris);
      console.log('\n🔗 Configured Redirect URIs:');
      redirectUris.forEach((uri, index) => {
        console.log(`  ${index + 1}. ${uri}`);
      });
      
      if (!redirectUris.includes('http://localhost:4001/oauth/callback')) {
        console.log('\n⚠️  WARNING: http://localhost:4001/oauth/callback is not in the redirect URIs list!');
      }
    } catch (e) {
      console.log('\n❌ Invalid redirect_uris JSON format');
    }
    
  } catch (error) {
    console.error('❌ Error checking client:', error.message);
  }
}

checkClient();
```

```filename
config\configLoader.js
```

```javascript
import yaml from 'yaml';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

let cachedConfig = null;

function loadConfig() {
  if (cachedConfig) {
    return cachedConfig;
  }

  const configPath = path.join(__dirname, 'config.yaml');
  
  try {
    const configFile = fs.readFileSync(configPath, 'utf8');
    cachedConfig = yaml.parse(configFile);
    return cachedConfig;
  } catch (error) {
    console.error('Failed to load configuration:', error.message);
    return {
      server: {
        auth_domain: 'localhost',
        auth_server_url: 'http://localhost:3303',
        auth_port: 3303
      },
      database: {
        name: "auth_db.sqlite"
      },
      jwt: {
        issuer: 'http://localhost:3303',
        audience: 'http://localhost:3303',
        algorithm: 'RS256',
        access_token_expiry: 3600,
        id_token_expiry: 3600,
        private_key_path: './keys/private.pem',
        public_key_path: './keys/public.pem'
      },
      oauth: {
        code_expiry: 600,
        default_scopes: ['openid', 'profile', 'email']
      },
      security: {
        bcrypt_rounds: 12,
        session_secret: 'change-this-in-production',
        rate_limit: {
          window_ms: 900000,
          max_requests: 100
        }
      },
      logging: {
        level: 'info',
        file: './logs/auth-server.log',
        console: true
      },
      demo: {
        admin: {
          username: 'admin',
          password: 'SecurePass123'
        },
        user: {
          username: 'user0',
          password: 'UserPass123'
        }
      }
    };
  }
}

function getConfig(path) {
  const config = loadConfig();
  
  if (!path) {
    return config;
  }
  
  return path.split('.').reduce((obj, key) => obj && obj[key], config);
}

function refreshConfig() {
  cachedConfig = null;
  return loadConfig();
}

export { loadConfig, getConfig, refreshConfig };
export default { loadConfig, getConfig, refreshConfig };
```

```filename
config\database.js
```

```javascript
import Database from 'better-sqlite3';
import dotenv from 'dotenv';
import path from 'path';
import fs from 'fs';
import { fileURLToPath } from 'url';
import { getConfig } from './configLoader.js';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

dotenv.config();

const config = getConfig();

const projectRoot = path.resolve(__dirname, '..');
const dbDir = path.join(projectRoot, 'auth-server', 'database');

let dbPath;
if (process.env.DATABASE_PATH) {
  dbPath = path.isAbsolute(process.env.DATABASE_PATH) 
    ? process.env.DATABASE_PATH 
    : path.resolve(projectRoot, process.env.DATABASE_PATH);
} else if (config.database?.path) {
  dbPath = path.isAbsolute(config.database.path) 
    ? path.join(config.database.path, config.database.name || 'auth_db.sqlite')
    : path.resolve(projectRoot, config.database.path, config.database.name || 'auth_db.sqlite');
} else {
  dbPath = path.join(dbDir, config.database.name || 'auth_db.sqlite');
}

const dbFileDir = path.dirname(dbPath);

if (!fs.existsSync(dbFileDir)) {
  fs.mkdirSync(dbFileDir, { recursive: true });
}

const db = new Database(dbPath, {
  verbose: config.logging?.level === 'debug' ? console.log : null
});

db.pragma('journal_mode = WAL');
db.pragma('foreign_keys = ON');

class DatabaseWrapper {
  constructor(database) {
    this.db = database;
  }

  query(sql, params = []) {
    try {
      if (sql.trim().toUpperCase().startsWith('SELECT')) {
        const stmt = this.db.prepare(sql);
        const rows = stmt.all(...params);
        return { rows };
      } else {
        const stmt = this.db.prepare(sql);
        const result = stmt.run(...params);
        return { 
          rows: [], 
          rowCount: result.changes,
          lastInsertRowid: result.lastInsertRowid 
        };
      }
    } catch (error) {
      console.error('Database query error:', error);
      throw error;
    }
  }

  transaction(callback) {
    const trx = this.db.transaction(callback);
    return trx;
  }

  close() {
    this.db.close();
  }

  get rawDb() {
    return this.db;
  }
}

const pool = new DatabaseWrapper(db);

console.log(`📁 SQLite database initialized: ${dbPath}`);

export default pool;
```

```filename
create_employee.js
```

```javascript
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const organizationStructure = {
    "経営陣": {
        teams: ["CEO Office"],
        positions: [
            { title: "CEO", level: 1, maxCount: 1 },
            { title: "CTO", level: 2, maxCount: 1 },
            { title: "CPO", level: 2, maxCount: 1 },
            { title: "CFO", level: 2, maxCount: 1 },
            { title: "CHRO", level: 2, maxCount: 1 }
        ]
    },
    "開発部": {
        teams: ["フロントエンド", "バックエンド", "インフラ", "モバイル", "AI・ML", "QA"],
        positions: [
            { title: "部長", level: 3, maxCount: 1 },
            { title: "チームリーダー", level: 4, maxCount: 6 },
            { title: "シニアエンジニア", level: 5, maxCount: 90 },
            { title: "エンジニア", level: 6, maxCount: 240 },
            { title: "ジュニアエンジニア", level: 7, maxCount: 150 }
        ]
    },
    "プロダクト部": {
        teams: ["プロダクトマネジメント", "UI/UX", "データアナリスト"],
        positions: [
            { title: "部長", level: 3, maxCount: 1 },
            { title: "チームリーダー", level: 4, maxCount: 3 },
            { title: "シニアスペシャリスト", level: 5, maxCount: 24 },
            { title: "スペシャリスト", level: 6, maxCount: 48 },
            { title: "アソシエイト", level: 7, maxCount: 32 }
        ]
    },
    "営業部": {
        teams: ["エンタープライズ", "SMB", "パートナー"],
        positions: [
            { title: "部長", level: 3, maxCount: 1 },
            { title: "マネージャー", level: 4, maxCount: 3 },
            { title: "シニアセールス", level: 5, maxCount: 30 },
            { title: "セールス", level: 6, maxCount: 60 },
            { title: "セールスアソシエイト", level: 7, maxCount: 40 }
        ]
    },
    "マーケティング部": {
        teams: ["デジタルマーケティング", "コンテンツ", "イベント"],
        positions: [
            { title: "部長", level: 3, maxCount: 1 },
            { title: "マネージャー", level: 4, maxCount: 3 },
            { title: "シニアマーケター", level: 5, maxCount: 18 },
            { title: "マーケター", level: 6, maxCount: 36 },
            { title: "アシスタント", level: 7, maxCount: 24 }
        ]
    },
    "人事部": {
        teams: ["採用", "労務", "人事企画"],
        positions: [
            { title: "部長", level: 3, maxCount: 1 },
            { title: "マネージャー", level: 4, maxCount: 3 },
            { title: "シニアスペシャリスト", level: 5, maxCount: 15 },
            { title: "スペシャリスト", level: 6, maxCount: 30 },
            { title: "アソシエイト", level: 7, maxCount: 20 }
        ]
    },
    "総務・経理部": {
        teams: ["総務", "経理", "法務"],
        positions: [
            { title: "部長", level: 3, maxCount: 1 },
            { title: "マネージャー", level: 4, maxCount: 3 },
            { title: "シニアスペシャリスト", level: 5, maxCount: 18 },
            { title: "スペシャリスト", level: 6, maxCount: 36 },
            { title: "アソシエイト", level: 7, maxCount: 24 }
        ]
    },
    "カスタマーサクセス部": {
        teams: ["サポート", "オンボーディング", "アカウントマネジメント"],
        positions: [
            { title: "部長", level: 3, maxCount: 1 },
            { title: "マネージャー", level: 4, maxCount: 3 },
            { title: "シニアスペシャリスト", level: 5, maxCount: 24 },
            { title: "スペシャリスト", level: 6, maxCount: 48 },
            { title: "アソシエイト", level: 7, maxCount: 36 }
        ]
    }
};

const surnames = [
    "田中", "佐藤", "鈴木", "高橋", "渡辺", "伊藤", "中村", "小林", "加藤", "吉田",
    "山田", "佐々木", "山口", "松本", "井上", "木村", "林", "清水", "山崎", "池田",
    "橋本", "阿部", "石川", "山本", "森", "近藤", "斎藤", "坂本", "前田", "藤田",
    "後藤", "岡田", "長谷川", "村上", "石田", "原", "小川", "竹内", "中島", "金子",
    "藤井", "西村", "福田", "三浦", "藤原", "太田", "松田", "岡本", "中川", "中野",
    "河野", "安田", "柴田", "宮崎", "酒井", "工藤", "横山", "宮本", "内田", "高木",
    "安藤", "島田", "谷口", "大野", "高田", "丸山", "今井", "河合", "武田", "上田",
    "杉山", "千葉", "村田", "増田", "小野", "田村", "原田", "服部", "野口", "古川",
    "関", "青木", "菊地", "久保", "遠藤", "菅原", "大塚", "北村", "水野", "尾崎",
    "土屋", "樋口", "望月", "新井", "石井", "中田", "東", "松井", "秋山", "上野"
];

const givenNames = {
    male: [
        "太郎", "次郎", "三郎", "健", "誠", "学", "明", "博", "和彦", "裕介",
        "大輔", "雄一", "隆", "浩", "勇", "智", "淳", "薫", "聡", "正",
        "亮", "翔", "駿", "蓮", "樹", "悠", "翼", "陸", "海", "空",
        "拓也", "雅人", "直樹", "康弘", "秀樹", "豊", "茂", "克己", "昭", "進",
        "秀", "純", "光", "功", "実", "修", "武", "忠", "勝", "哲",
        "信", "治", "清", "良", "一", "二", "三", "四", "五", "六",
        "達也", "慎一", "貴志", "和也", "英樹", "康介", "優", "涼", "湊", "新",
        "颯", "朝陽", "晴", "奏", "陽太", "悠真", "悠人", "颯太", "陽向", "蒼"
    ],
    female: [
        "花子", "恵子", "美和", "由美", "真理", "香織", "美香", "愛", "麻衣", "瞳",
        "さくら", "美穂", "彩", "絵美", "理恵", "智子", "優子", "千尋", "夏美", "春香",
        "美咲", "あゆみ", "みなみ", "ひなた", "結衣", "美月", "葵", "詩織", "舞", "栞",
        "七海", "莉子", "美優", "凛", "心", "陽菜", "結愛", "咲良", "美羽", "琴音",
        "幸", "恵", "みき", "みゆき", "みどり", "ゆかり", "あき", "あきこ", "みのり", "かおり",
        "ひろみ", "なおみ", "さとみ", "みほ", "きよみ", "とも", "ともこ", "みさき", "りえ", "まい",
        "みお", "りお", "あお", "ももか", "ひまり", "あかり", "ひな", "さな", "えま", "みく",
        "さくらこ", "りこ", "ももこ", "ひかり", "みらい", "つばき", "いろは", "あんな", "えみ", "なな"
    ]
};

const kanjiToRomaji = {
    "田中": "tanaka", "佐藤": "sato", "鈴木": "suzuki", "高橋": "takahashi", "渡辺": "watanabe",
    "伊藤": "ito", "中村": "nakamura", "小林": "kobayashi", "加藤": "kato", "吉田": "yoshida",
    "山田": "yamada", "佐々木": "sasaki", "山口": "yamaguchi", "松本": "matsumoto", "井上": "inoue",
    "木村": "kimura", "林": "hayashi", "清水": "shimizu", "山崎": "yamazaki", "池田": "ikeda",
    "橋本": "hashimoto", "阿部": "abe", "石川": "ishikawa", "山本": "yamamoto", "森": "mori",
    "近藤": "kondo", "斎藤": "saito", "坂本": "sakamoto", "前田": "maeda", "藤田": "fujita",
    "後藤": "goto", "岡田": "okada", "長谷川": "hasegawa", "村上": "murakami", "石田": "ishida",
    "原": "hara", "小川": "ogawa", "竹内": "takeuchi", "中島": "nakajima", "金子": "kaneko",
    "藤井": "fujii", "西村": "nishimura", "福田": "fukuda", "三浦": "miura", "藤原": "fujiwara",
    "太田": "ota", "松田": "matsuda", "岡本": "okamoto", "中川": "nakagawa", "中野": "nakano",
    "河野": "kono", "安田": "yasuda", "柴田": "shibata", "宮崎": "miyazaki", "酒井": "sakai",
    "工藤": "kudo", "横山": "yokoyama", "宮本": "miyamoto", "内田": "uchida", "高木": "takagi",
    "安藤": "ando", "島田": "shimada", "谷口": "taniguchi", "大野": "ono", "高田": "takada",
    "太郎": "taro", "次郎": "jiro", "三郎": "saburo", "健": "ken", "誠": "makoto",
    "学": "manabu", "明": "akira", "博": "hiroshi", "和彦": "kazuhiko", "裕介": "yusuke",
    "大輔": "daisuke", "雄一": "yuichi", "隆": "takashi", "浩": "hiroshi", "勇": "yu",
    "智": "satoshi", "淳": "jun", "薫": "kaoru", "聡": "satoshi", "正": "tadashi",
    "亮": "ryo", "翔": "sho", "駿": "shun", "蓮": "ren", "樹": "itsuki",
    "悠": "yu", "翼": "tsubasa", "陸": "riku", "海": "kai", "空": "sora",
    "拓也": "takuya", "雅人": "masato", "直樹": "naoki", "康弘": "yasuhiro", "秀樹": "hideki",
    "豊": "yutaka", "茂": "shigeru", "克己": "katsumi", "昭": "akira", "進": "susumu",
    "花子": "hanako", "恵子": "keiko", "美和": "miwa", "由美": "yumi", "真理": "mari",
    "香織": "kaori", "美香": "mika", "愛": "ai", "麻衣": "mai", "瞳": "hitomi",
    "さくら": "sakura", "美穂": "miho", "彩": "aya", "絵美": "emi", "理恵": "rie",
    "智子": "tomoko", "優子": "yuko", "千尋": "chihiro", "夏美": "natsumi", "春香": "haruka",
    "美咲": "misaki", "あゆみ": "ayumi", "みなみ": "minami", "ひなた": "hinata", "結衣": "yui",
    "美月": "mitsuki", "葵": "aoi", "詩織": "shiori", "舞": "mai", "栞": "shiori",
    "七海": "nanami", "莉子": "riko", "美優": "miyu", "凛": "rin", "心": "kokoro",
    "陽菜": "hina", "結愛": "yua", "咲良": "sakura", "美羽": "miu", "琴音": "kotone"
};

const usedEmails = new Set();
const usedIds = new Set();

function generateEmail(surname, givenName, employeeId) {
    const surnameRomaji = kanjiToRomaji[surname] || generateRandomString(4, 6);
    const givenNameRomaji = kanjiToRomaji[givenName] || generateRandomString(3, 5);

    const baseEmail = `${surnameRomaji}.${givenNameRomaji}`;
    let email = `${baseEmail}@kk.co.com`;

    let counter = 1;
    while (usedEmails.has(email)) {
        email = `${baseEmail}${counter}@kk.co.com`;
        counter++;
    }

    usedEmails.add(email);
    return email;
}

function generateRandomString(minLength, maxLength) {
    const chars = 'abcdefghijklmnopqrstuvwxyz';
    const length = Math.floor(Math.random() * (maxLength - minLength + 1)) + minLength;
    let result = '';
    for (let i = 0; i < length; i++) {
        result += chars.charAt(Math.floor(Math.random() * chars.length));
    }
    return result;
}

function generateEmployeeId() {
    let id;
    do {
        id = `KK${String(Math.floor(Math.random() * 100000)).padStart(5, '0')}`;
    } while (usedIds.has(id));

    usedIds.add(id);
    return id;
}

function getRandomItem(array) {
    return array[Math.floor(Math.random() * array.length)];
}

function generateEmployees() {
    const employees = [];

    // 1. 経営陣を最初に生成
    const executivePositions = organizationStructure["経営陣"].positions;
    executivePositions.forEach(position => {
        for (let i = 0; i < position.maxCount; i++) {
            const executive = generateEmployee("経営陣", "CEO Office", position.title, position.level);

            if (position.title === 'CEO') {
                executive.supervisor = null;
            } else {
                const ceo = employees.find(emp => emp.position === 'CEO');
                executive.supervisor = ceo ? ceo.email : null;
            }

            employees.push(executive);
        }
    });

    // 2. 他の部署を生成
    Object.entries(organizationStructure).forEach(([department, config]) => {
        if (department === "経営陣") return;

        // 部長を生成
        const deptHeadPosition = config.positions.find(p => p.level === 3);
        if (deptHeadPosition) {
            const deptHead = generateEmployee(department, config.teams[0], deptHeadPosition.title, 3);

            const executives = employees.filter(emp => emp.department === "経営陣" && emp.level === 2);
            if (executives.length > 0) {
                deptHead.supervisor = getRandomItem(executives).email;
            }
            employees.push(deptHead);
        }

        // チームリーダー/マネージャーを各チームに1人ずつ配置
        const managerPosition = config.positions.find(p => p.level === 4);
        if (managerPosition) {
            config.teams.forEach(team => {
                const teamLeader = generateEmployee(department, team, managerPosition.title, 4);

                const deptHead = employees.find(emp => emp.department === department && emp.level === 3);
                teamLeader.supervisor = deptHead ? deptHead.email : null;

                employees.push(teamLeader);
            });
        }

        // その他の職位をチームに分散配置
        config.positions.filter(p => p.level > 4).forEach(position => {
            const countPerTeam = Math.floor(position.maxCount / config.teams.length);
            const remainder = position.maxCount % config.teams.length;

            config.teams.forEach((team, teamIndex) => {
                let countForThisTeam = countPerTeam;
                if (teamIndex < remainder) {
                    countForThisTeam++;
                }

                for (let i = 0; i < countForThisTeam; i++) {
                    const employee = generateEmployee(department, team, position.title, position.level);

                    const teamLeader = employees.find(emp =>
                        emp.department === department &&
                        emp.team === team &&
                        emp.level === 4
                    );

                    employee.supervisor = teamLeader ? teamLeader.email : null;

                    employees.push(employee);
                }
            });
        });
    });

    // 管理職で部下がいない場合は部下を追加
    const managerPositions = ['CEO', 'CTO', 'CPO', 'CFO', 'CHRO', '部長', 'チームリーダー', 'マネージャー'];
    const managers = employees.filter(emp => managerPositions.includes(emp.position));

    managers.forEach(manager => {
        const subordinates = employees.filter(emp => emp.supervisor === manager.email);
        if (subordinates.length === 0 && manager.position !== 'CEO') {
            const subordinate = generateEmployee(
                manager.department,
                manager.team,
                getAppropriateSubordinatePosition(manager.department),
                7
            );
            subordinate.supervisor = manager.email;
            employees.push(subordinate);
        }
    });

    return employees.map(emp => {
        const { level, ...finalEmployee } = emp;
        return finalEmployee;
    });
}

function getAppropriateSubordinatePosition(department) {
    const positionMap = {
        "経営陣": "アシスタント",
        "開発部": "ジュニアエンジニア",
        "プロダクト部": "アソシエイト",
        "営業部": "セールスアソシエイト",
        "マーケティング部": "アシスタント",
        "人事部": "アソシエイト",
        "総務・経理部": "アソシエイト",
        "カスタマーサクセス部": "アソシエイト"
    };
    return positionMap[department] || "アソシエイト";
}

function generateEmployee(department, team, position, level) {
    const gender = Math.random() > 0.6 ? 'female' : 'male';
    const surname = getRandomItem(surnames);
    const givenName = getRandomItem(givenNames[gender]);
    const employeeId = generateEmployeeId();
    const email = generateEmail(surname, givenName, employeeId);

    return {
        employeeId: employeeId,
        name: `${surname} ${givenName}`,
        email: email,
        department: department,
        team: team,
        position: position,
        role: position,
        supervisor: null,
        level: level
    };
}

function validateEmployeeData(employees) {
    const validationResults = {
        isValid: true,
        errors: [],
        warnings: []
    };

    const emailSet = new Set();
    const idSet = new Set();
    const nameCountMap = new Map();

    employees.forEach(emp => {
        if (emailSet.has(emp.email)) {
            validationResults.errors.push(`重複メールアドレス: ${emp.email}`);
            validationResults.isValid = false;
        }
        emailSet.add(emp.email);

        if (idSet.has(emp.employeeId)) {
            validationResults.errors.push(`重複従業員ID: ${emp.employeeId}`);
            validationResults.isValid = false;
        }
        idSet.add(emp.employeeId);

        nameCountMap.set(emp.name, (nameCountMap.get(emp.name) || 0) + 1);
    });

    const duplicateNames = Array.from(nameCountMap.entries()).filter(([name, count]) => count > 1);
    if (duplicateNames.length > 0) {
        const totalDuplicates = duplicateNames.reduce((sum, [name, count]) => sum + count, 0);
        validationResults.warnings.push(`氏名重複: ${duplicateNames.length}組 (合計${totalDuplicates}人)`);
    }

    const ceos = employees.filter(emp => emp.position === 'CEO');
    if (ceos.length !== 1) {
        validationResults.errors.push(`CEOは1人である必要があります（現在: ${ceos.length}人）`);
        validationResults.isValid = false;
    } else if (ceos[0].supervisor !== null) {
        validationResults.errors.push(`CEOに上司が設定されています: ${ceos[0].supervisor}`);
        validationResults.isValid = false;
    }

    const nonCeoEmployees = employees.filter(emp => emp.position !== 'CEO');
    nonCeoEmployees.forEach(emp => {
        if (!emp.supervisor) {
            validationResults.errors.push(`${emp.name} (${emp.position}) に上司が設定されていません`);
            validationResults.isValid = false;
        } else {
            const supervisor = employees.find(s => s.email === emp.supervisor);
            if (!supervisor) {
                validationResults.errors.push(`${emp.name} の上司 ${emp.supervisor} が従業員リストに存在しません`);
                validationResults.isValid = false;
            }
        }
    });

    const deptStats = {};
    const teamStats = {};

    employees.forEach(emp => {
        if (!deptStats[emp.department]) {
            deptStats[emp.department] = 0;
        }
        deptStats[emp.department]++;

        const teamKey = `${emp.department}/${emp.team}`;
        if (!teamStats[teamKey]) {
            teamStats[teamKey] = 0;
        }
        teamStats[teamKey]++;
    });

    Object.entries(deptStats).forEach(([dept, count]) => {
        if (count < 2) {
            validationResults.errors.push(`部署 ${dept} の人数が不足しています（${count}人）`);
            validationResults.isValid = false;
        }
    });

    Object.entries(teamStats).forEach(([team, count]) => {
        if (count < 2) {
            validationResults.errors.push(`チーム ${team} の人数が不足しています（${count}人）`);
            validationResults.isValid = false;
        }
    });

    return validationResults;
}

function checkOrganizationStructure() {
    let output = "";
    
    let totalPlanned = 0;
    Object.values(organizationStructure).forEach(dept => {
        dept.positions.forEach(pos => {
            totalPlanned += pos.maxCount;
        });
    });
    
    output += `KK Company (${totalPlanned}人)\n`;
    
    const departments = Object.entries(organizationStructure);
    departments.forEach(([department, config], deptIndex) => {
        const isLastDept = deptIndex === departments.length - 1;
        const deptPrefix = isLastDept ? "└── " : "├── ";
        
        const deptTotal = config.positions.reduce((sum, pos) => sum + pos.maxCount, 0);
        output += `${deptPrefix}${department} (${deptTotal}人)\n`;
        
        config.teams.forEach((team, teamIndex) => {
            const isLastTeam = teamIndex === config.teams.length - 1;
            const teamPrefix = isLastDept ? "    " : "│   ";
            const teamBranch = isLastTeam ? "└── " : "├── ";
            
            let teamEmployees = [];
            
            config.positions.forEach(position => {
                let countForThisTeam = 0;
                
                if (position.level === 3) {
                    if (teamIndex === 0) {
                        countForThisTeam = position.maxCount;
                    }
                } else if (position.level === 4) {
                    countForThisTeam = 1;
                } else {
                    const countPerTeam = Math.floor(position.maxCount / config.teams.length);
                    const remainder = position.maxCount % config.teams.length;
                    countForThisTeam = countPerTeam;
                    if (teamIndex < remainder) {
                        countForThisTeam++;
                    }
                }
                
                if (countForThisTeam > 0) {
                    teamEmployees.push({
                        title: position.title,
                        count: countForThisTeam,
                        level: position.level
                    });
                }
            });
            
            const teamTotal = teamEmployees.reduce((sum, emp) => sum + emp.count, 0);
            output += `${teamPrefix}${teamBranch}${team} (${teamTotal}人)\n`;
            
            teamEmployees.forEach((emp, empIndex) => {
                const isLastEmp = empIndex === teamEmployees.length - 1;
                const empPrefix = isLastDept ? "    " : "│   ";
                const empSubPrefix = isLastTeam ? "    " : "│   ";
                const empBranch = isLastEmp ? "└── " : "├── ";
                
                output += `${teamPrefix}${empSubPrefix}${empBranch}${emp.title} (${emp.count}人)\n`;
            });
        });
        
        if (!isLastDept) {
            output += "│\n";
        }
    });
    
    return output;
}

function generateHierarchyTree(employees) {
    const ceo = employees.find(emp => emp.position === 'CEO');
    if (!ceo) {
        return "CEOが見つかりません";
    }

    let output = "";
    
    function buildTree(person, level = 0, isLast = true, parentPrefix = "") {
        const prefix = level === 0 ? "" : (isLast ? "└── " : "├── ");
        const indent = parentPrefix + (level > 0 ? (isLast ? "    " : "│   ") : "");
        
        const subordinates = employees.filter(emp => emp.supervisor === person.email);
        const subordinateCount = subordinates.length;
        
        output += `${parentPrefix}${prefix}${person.name} (${person.position}) - ${person.department}/${person.team}`;
        if (subordinateCount > 0) {
            output += ` [部下: ${subordinateCount}人]`;
        }
        output += "\n";
        
        subordinates.sort((a, b) => {
            if (a.department !== b.department) {
                return a.department.localeCompare(b.department);
            }
            if (a.position !== b.position) {
                return a.position.localeCompare(b.position);
            }
            return a.name.localeCompare(b.name);
        });
        
        subordinates.forEach((subordinate, index) => {
            const isLastSubordinate = index === subordinates.length - 1;
            buildTree(subordinate, level + 1, isLastSubordinate, indent);
        });
    }

    buildTree(ceo);
    return output;
}

function exportToMarkdown(employees, filename = 'organization_structure.md') {
    try {
        const outputDir = ensureOutputDirectory();
        const fullPath = path.join(outputDir, filename);

        let markdown = "";
        
        markdown += "# KK Company 組織構造レポート\n\n";
        markdown += `生成日時: ${new Date().toLocaleString('ja-JP')}\n`;
        markdown += `総従業員数: ${employees.length}人\n\n`;
        
        markdown += "## 1. 組織構造（計画）\n\n";
        markdown += "```\n";
        markdown += checkOrganizationStructure();
        markdown += "```\n\n";
        
        markdown += "## 2. 実際の上司-部下関係\n\n";
        markdown += "```\n";
        markdown += generateHierarchyTree(employees);
        markdown += "```\n\n";
        
        const stats = generateStatistics(employees);
        
        markdown += "## 3. 部署別統計\n\n";
        markdown += "| 部署 | 人数 |\n";
        markdown += "|------|------|\n";
        Object.entries(stats.departmentStats).forEach(([dept, count]) => {
            markdown += `| ${dept} | ${count} |\n`;
        });
        
        markdown += "\n## 4. 職位別統計\n\n";
        markdown += "| 職位 | 人数 |\n";
        markdown += "|------|------|\n";
        Object.entries(stats.positionStats).forEach(([position, count]) => {
            markdown += `| ${position} | ${count} |\n`;
        });
        
        markdown += "\n## 5. 管理職の部下数\n\n";
        markdown += "| 管理職 | 部下数 |\n";
        markdown += "|--------|--------|\n";
        Object.entries(stats.supervisorStats)
            .sort((a, b) => b[1] - a[1])
            .forEach(([supervisorEmail, count]) => {
                const manager = employees.find(emp => emp.email === supervisorEmail);
                const name = manager ? manager.name : '不明';
                const position = manager ? manager.position : '不明';
                markdown += `| ${name} (${position}) | ${count} |\n`;
            });
        
        markdown += "\n## 6. チーム別詳細\n\n";
        Object.entries(stats.teamStats).forEach(([team, count]) => {
            markdown += `### ${team}\n`;
            markdown += `人数: ${count}人\n\n`;
            
            const teamMembers = employees.filter(emp => `${emp.department}/${emp.team}` === team);
            const positionCounts = {};
            teamMembers.forEach(emp => {
                positionCounts[emp.position] = (positionCounts[emp.position] || 0) + 1;
            });
            
            markdown += "| 職位 | 人数 |\n";
            markdown += "|------|------|\n";
            Object.entries(positionCounts).forEach(([position, count]) => {
                markdown += `| ${position} | ${count} |\n`;
            });
            markdown += "\n";
        });

        fs.writeFileSync(fullPath, markdown, 'utf8');
        console.log(`組織構造レポートを保存しました: ${fullPath}`);
        console.log(`ファイルサイズ: ${(fs.statSync(fullPath).size / 1024).toFixed(2)} KB`);

        return {
            success: true,
            filename: filename,
            fullPath: fullPath,
            size: fs.statSync(fullPath).size
        };

    } catch (error) {
        console.error(`Markdownファイル保存エラー: ${error.message}`);
        return { success: false, error: error.message };
    }
}

function ensureOutputDirectory() {
    const outputDir = path.join(__dirname, 'data');
    if (!fs.existsSync(outputDir)) {
        fs.mkdirSync(outputDir, { recursive: true });
    }
    return outputDir;
}

function exportToJSON(employees, filename = 'employee.json') {
    try {
        const outputDir = ensureOutputDirectory();
        const fullPath = path.join(outputDir, filename);

        const exportData = {
            metadata: {
                generatedAt: new Date().toISOString(),
                totalEmployees: employees.length,
                company: "KK Company",
                filename: filename,
                nodeVersion: process.version,
                platform: process.platform,
                moduleType: "ES Module"
            },
            employees: employees
        };

        const jsonString = JSON.stringify(exportData, null, 2);

        fs.writeFileSync(fullPath, jsonString, 'utf8');
        console.log(`JSONファイルを保存しました: ${fullPath}`);
        console.log(`ファイルサイズ: ${(fs.statSync(fullPath).size / 1024).toFixed(2)} KB`);

        return {
            success: true,
            filename: filename,
            fullPath: fullPath,
            size: fs.statSync(fullPath).size,
            data: exportData
        };

    } catch (error) {
        console.error(`JSONファイル保存エラー: ${error.message}`);
        return { success: false, error: error.message };
    }
}

function generateStatistics(employees) {
    const stats = {
        totalEmployees: employees.length,
        departmentStats: {},
        teamStats: {},
        positionStats: {},
        supervisorStats: {}
    };

    employees.forEach(emp => {
        if (!stats.departmentStats[emp.department]) {
            stats.departmentStats[emp.department] = 0;
        }
        stats.departmentStats[emp.department]++;

        const teamKey = `${emp.department}/${emp.team}`;
        if (!stats.teamStats[teamKey]) {
            stats.teamStats[teamKey] = 0;
        }
        stats.teamStats[teamKey]++;

        if (!stats.positionStats[emp.position]) {
            stats.positionStats[emp.position] = 0;
        }
        stats.positionStats[emp.position]++;

        if (emp.supervisor) {
            if (!stats.supervisorStats[emp.supervisor]) {
                stats.supervisorStats[emp.supervisor] = 0;
            }
            stats.supervisorStats[emp.supervisor]++;
        }
    });

    return stats;
}

export function main() {
    console.log("=== KK Company 従業員データ生成システム ===");

    const employees = generateEmployees();
    console.log(`生成完了: ${employees.length}人`);

    const validation = validateEmployeeData(employees);

    if (validation.isValid) {
        console.log("✅ すべての検証をパスしました");
    } else {
        console.log("❌ 検証エラーがあります");
        validation.errors.forEach(error => console.log(`  - エラー: ${error}`));
    }

    if (validation.warnings.length > 0) {
        validation.warnings.forEach(warning => console.log(`  - 警告: ${warning}`));
    }

    const stats = generateStatistics(employees);

    console.log("部署別人数:");
    Object.entries(stats.departmentStats).forEach(([dept, count]) => {
        console.log(`  ${dept}: ${count}人`);
    });

    const jsonResult = exportToJSON(employees);
    if (!jsonResult.success) {
        console.log("❌ JSONファイル保存に失敗しました");
        if (jsonResult.error) {
            console.log(`エラー: ${jsonResult.error}`);
        }
    }

    const markdownResult = exportToMarkdown(employees);
    if (!markdownResult.success) {
        console.log("❌ Markdownファイル保存に失敗しました");
        if (markdownResult.error) {
            console.log(`エラー: ${markdownResult.error}`);
        }
    }

    return {
        employees,
        validation,
        statistics: stats,
        files: {
            json: jsonResult,
            markdown: markdownResult
        },
        performance: {
            employeeCount: employees.length
        }
    };
}

export {
    generateEmployees,
    validateEmployeeData,
    generateStatistics,
    exportToJSON,
    exportToMarkdown,
    checkOrganizationStructure,
    generateHierarchyTree
};

main();
```

```filename
js_combiner.js
```

```javascript
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

// ES6モジュールでの__dirname代替
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

class JSCodeCombiner {
    constructor() {
        // 除外するフォルダ名
        this.excludedFolders = [
            'node_modules',
            '.git',
            'dist',
            'build',
            '.next',
            'coverage',
            '.nyc_output',
            'tmp',
            'temp',
            '.cache',
            '.parcel-cache',
            'out',
            'public',
            'static'
        ];

        // 対象とするファイル拡張子
        this.targetExtensions = ['.js', '.jsx', '.ts', '.tsx', '.vue', '.mjs', '.ejs', '.cjs', `css`];
    }

    /**
     * 除外フォルダを追加
     * @param {string[]} folders - 除外するフォルダ名の配列
     */
    addExcludedFolders(folders) {
        this.excludedFolders.push(...folders);
    }

    /**
     * 対象拡張子を設定
     * @param {string[]} extensions - 対象とする拡張子の配列
     */
    setTargetExtensions(extensions) {
        this.targetExtensions = extensions;
    }

    /**
     * フォルダが除外対象かチェック
     * @param {string} folderName - フォルダ名
     * @returns {boolean} - 除外対象の場合true
     */
    isExcludedFolder(folderName) {
        return this.excludedFolders.includes(folderName);
    }

    /**
     * ファイルが対象かチェック
     * @param {string} fileName - ファイル名
     * @returns {boolean} - 対象ファイルの場合true
     */
    isTargetFile(fileName) {
        const ext = path.extname(fileName).toLowerCase();
        return this.targetExtensions.includes(ext);
    }

    /**
     * 指定されたディレクトリを再帰的に探索してJSファイルを収集
     * @param {string} dirPath - 探索するディレクトリパス
     * @param {string[]} files - ファイルパスを格納する配列
     * @param {string} basePath - ベースパス
     */
    collectJSFiles(dirPath, files = [], basePath = '') {
        try {
            const items = fs.readdirSync(dirPath);

            for (const item of items) {
                const fullPath = path.join(dirPath, item);
                const relativePath = basePath ? path.join(basePath, item) : item;
                const stat = fs.statSync(fullPath);

                if (stat.isDirectory()) {
                    // 除外フォルダでない場合は再帰的に探索
                    if (!this.isExcludedFolder(item)) {
                        this.collectJSFiles(fullPath, files, relativePath);
                    }
                } else if (stat.isFile() && this.isTargetFile(item)) {
                    files.push({
                        fullPath: fullPath,
                        relativePath: relativePath
                    });
                }
            }
        } catch (error) {
            console.error(`Error reading directory ${dirPath}:`, error.message);
        }

        return files;
    }

    /**
     * ファイル内容を読み取り、結合された内容を生成
     * @param {Object[]} files - ファイル情報の配列
     * @returns {string} - 結合されたコンテンツ
     */
    combineFiles(files) {
        let combinedContent = '';
        
        combinedContent += `# JavaScript Code Combination\n`;
        combinedContent += `# Generated at: ${new Date().toISOString()}\n`;
        combinedContent += `# Total files: ${files.length}\n\n`;

        for (const file of files) {
            try {
                const content = fs.readFileSync(file.fullPath, 'utf8');
                
                combinedContent += `\`\`\`filename\n${file.relativePath}\n\`\`\`\n\n`;
                combinedContent += `\`\`\`javascript\n${content}\n\`\`\`\n\n`;
                
                console.log(`Added: ${file.relativePath}`);
            } catch (error) {
                console.error(`Error reading file ${file.fullPath}:`, error.message);
                combinedContent += `\`\`\`filename\n${file.relativePath}\n\`\`\`\n\n`;
                combinedContent += `\`\`\`\nError reading file: ${error.message}\n\`\`\`\n\n`;
            }
        }

        return combinedContent;
    }

    /**
     * 指定されたディレクトリのJSコードを結合してファイルに出力
     * @param {string} inputDir - 入力ディレクトリパス
     * @param {string} outputFile - 出力ファイルパス
     */
    async combineJSCode(inputDir, outputFile = 'combined_js_code.txt') {
        console.log(`Starting JS code combination...`);
        console.log(`Input directory: ${inputDir}`);
        console.log(`Output file: ${outputFile}`);
        console.log(`Excluded folders: ${this.excludedFolders.join(', ')}`);
        console.log(`Target extensions: ${this.targetExtensions.join(', ')}\n`);

        // 入力ディレクトリの存在確認
        if (!fs.existsSync(inputDir)) {
            throw new Error(`Input directory does not exist: ${inputDir}`);
        }

        // JSファイルを収集
        console.log('Collecting JavaScript files...');
        const files = this.collectJSFiles(inputDir);
        
        if (files.length === 0) {
            console.log('No JavaScript files found.');
            return;
        }

        console.log(`Found ${files.length} JavaScript files.\n`);

        // ファイルを結合
        console.log('Combining files...');
        const combinedContent = this.combineFiles(files);

        // 出力ファイルに書き込み
        fs.writeFileSync(outputFile, combinedContent, 'utf8');
        
        console.log(`\nCombination completed successfully!`);
        console.log(`Output saved to: ${outputFile}`);
        console.log(`Total size: ${(combinedContent.length / 1024).toFixed(2)} KB`);
    }
}

// 使用例とメイン処理
async function main() {
    const combiner = new JSCodeCombiner();

    // 追加で除外したいフォルダがあれば設定
    // combiner.addExcludedFolders(['my_custom_folder', 'another_folder']);

    // 対象拡張子をカスタマイズしたい場合
    // combiner.setTargetExtensions(['.js', '.jsx', '.ts']);

    // コマンドライン引数から入力ディレクトリと出力ファイルを取得
    const inputDir = process.argv[2] || './';
    const outputFile = process.argv[3] || 'combined_js_code.txt';

    try {
        await combiner.combineJSCode(inputDir, outputFile);
    } catch (error) {
        console.error('Error:', error.message);
        process.exit(1);
    }
}

// スクリプトが直接実行された場合のみmainを実行

    main();


// ES6 default export
export default JSCodeCombiner;
```

```filename
scripts\debug-clients.js
```

```javascript
import { fileURLToPath } from 'url';
import path from 'path';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

class ClientViewer {
    constructor() {
        this.projectRoot = path.resolve(__dirname, '..');
    }

    async displayClients(options = {}) {
        const {
            format = 'table', // 'table', 'json', 'list'
            showSecrets = false, // セキュリティ上の理由でデフォルトは false
            includeInactive = true,
            sortBy = 'created_at' // 'name', 'client_id', 'created_at'
        } = options;

        console.log('🔑 SSO OAuth Client List');
        console.log('='.repeat(60));

        try {
            // データベース接続の初期化
            const pool = await this.initializeDatabase();
            
            // クライアント一覧の取得
            const clients = await this.fetchClients(pool, { includeInactive, sortBy });
            
            if (clients.length === 0) {
                console.log('📋 No OAuth clients found in the database.');
                return;
            }

            console.log(`📊 Found ${clients.length} OAuth client(s)\n`);
            
            // フォーマットに応じた表示
            switch (format) {
                case 'json':
                    this.displayAsJson(clients, showSecrets);
                    break;
                case 'list':
                    this.displayAsList(clients, showSecrets);
                    break;
                case 'table':
                default:
                    this.displayAsTable(clients, showSecrets);
                    break;
            }

            // 統計情報の表示
            this.displayStatistics(clients);

        } catch (error) {
            console.error('❌ Error:', error.message);
            throw error;
        }
    }

    async initializeDatabase() {
        try {
            const { default: pool } = await import('../config/database.js');
            
            // データベース接続のテスト
            await pool.query('SELECT 1');
            return pool;
        } catch (error) {
            throw new Error(`Database connection failed: ${error.message}`);
        }
    }

    async fetchClients(pool, options = {}) {
        const { includeInactive = true, sortBy = 'created_at' } = options;
        
        let query = `
            SELECT 
                client_id,
                client_secret,
                name,
                redirect_uris,
                allowed_scopes,
                is_active,
                created_at,
                updated_at
            FROM clients
        `;
        
        const params = [];
        
        // アクティブなクライアントのみ表示する場合
        if (!includeInactive) {
            query += ' WHERE is_active = ?';
            params.push(1);
        }
        
        // ソート順の設定
        const validSortFields = ['client_id', 'name', 'created_at', 'updated_at'];
        if (validSortFields.includes(sortBy)) {
            query += ` ORDER BY ${sortBy}`;
            if (sortBy.includes('_at')) {
                query += ' DESC'; // 日付は新しい順
            }
        }

        try {
            const result = await pool.query(query, params);
            
            // JSON文字列のパース
            return result.rows.map(client => ({
                ...client,
                redirect_uris: this.safeJsonParse(client.redirect_uris, []),
                allowed_scopes: client.allowed_scopes ? client.allowed_scopes.split(' ') : [],
                is_active: Boolean(client.is_active)
            }));
        } catch (error) {
            throw new Error(`Failed to fetch clients: ${error.message}`);
        }
    }

    safeJsonParse(jsonString, defaultValue = null) {
        try {
            return JSON.parse(jsonString);
        } catch (error) {
            return defaultValue;
        }
    }

    displayAsTable(clients, showSecrets = false) {
        console.log('📋 Client Table View');
        console.log('-'.repeat(100));
        
        // テーブルヘッダー
        const headers = ['Client ID', 'Name', 'Status', 'Scopes', 'Redirect URIs'];
        if (showSecrets) {
            headers.splice(2, 0, 'Client Secret');
        }
        
        console.log(headers.join(' | ').padEnd(100));
        console.log('-'.repeat(100));
        
        // クライアント行
        clients.forEach(client => {
            const row = [
                client.client_id.padEnd(20),
                client.name.substring(0, 25).padEnd(25),
                showSecrets ? this.maskSecret(client.client_secret).padEnd(20) : '',
                (client.is_active ? '✅ Active' : '❌ Inactive').padEnd(10),
                client.allowed_scopes.slice(0, 3).join(', ').substring(0, 20).padEnd(20),
                client.redirect_uris.length > 0 ? client.redirect_uris[0].substring(0, 30) : 'None'
            ];
            
            if (!showSecrets) {
                row.splice(2, 1); // client_secretを除去
            }
            
            console.log(row.join(' | '));
        });
        
        console.log('-'.repeat(100));
    }

    displayAsList(clients, showSecrets = false) {
        console.log('📋 Client List View\n');
        
        clients.forEach((client, index) => {
            console.log(`${index + 1}. ${client.name}`);
            console.log(`   Client ID: ${client.client_id}`);
            
            if (showSecrets) {
                console.log(`   Client Secret: ${this.maskSecret(client.client_secret)}`);
            }
            
            console.log(`   Status: ${client.is_active ? '✅ Active' : '❌ Inactive'}`);
            console.log(`   Allowed Scopes: ${client.allowed_scopes.join(', ')}`);
            console.log(`   Redirect URIs:`);
            
            if (client.redirect_uris.length === 0) {
                console.log(`     - None configured`);
            } else {
                client.redirect_uris.forEach(uri => {
                    console.log(`     - ${uri}`);
                });
            }
            
            console.log(`   Created: ${this.formatDate(client.created_at)}`);
            if (client.updated_at) {
                console.log(`   Updated: ${this.formatDate(client.updated_at)}`);
            }
            console.log('');
        });
    }

    displayAsJson(clients, showSecrets = false) {
        console.log('📋 Client JSON View\n');
        
        const outputClients = clients.map(client => {
            const output = { ...client };
            
            if (!showSecrets) {
                delete output.client_secret;
            } else {
                output.client_secret = this.maskSecret(client.client_secret);
            }
            
            return output;
        });
        
        console.log(JSON.stringify(outputClients, null, 2));
    }

    displayStatistics(clients) {
        console.log('\n📊 Client Statistics:');
        console.log('-'.repeat(30));
        
        const activeCount = clients.filter(c => c.is_active).length;
        const inactiveCount = clients.length - activeCount;
        
        console.log(`Total Clients: ${clients.length}`);
        console.log(`Active: ${activeCount}`);
        console.log(`Inactive: ${inactiveCount}`);
        
        // スコープ統計
        const scopeUsage = {};
        clients.forEach(client => {
            client.allowed_scopes.forEach(scope => {
                scopeUsage[scope] = (scopeUsage[scope] || 0) + 1;
            });
        });
        
        if (Object.keys(scopeUsage).length > 0) {
            console.log('\nScope Usage:');
            Object.entries(scopeUsage)
                .sort(([,a], [,b]) => b - a)
                .forEach(([scope, count]) => {
                    console.log(`  ${scope}: ${count} client(s)`);
                });
        }

        // リダイレクトURI統計
        const totalRedirectUris = clients.reduce((sum, client) => sum + client.redirect_uris.length, 0);
        console.log(`\nTotal Redirect URIs: ${totalRedirectUris}`);
        
        // ドメイン統計
        const domains = new Set();
        clients.forEach(client => {
            client.redirect_uris.forEach(uri => {
                try {
                    const url = new URL(uri);
                    domains.add(url.hostname);
                } catch (error) {
                    // 無効なURLはスキップ
                }
            });
        });
        
        if (domains.size > 0) {
            console.log(`Unique Domains: ${domains.size}`);
            console.log(`Domains: ${Array.from(domains).join(', ')}`);
        }
    }

    maskSecret(secret) {
        if (!secret || secret.length <= 8) {
            return '***';
        }
        return secret.substring(0, 4) + '*'.repeat(secret.length - 8) + secret.substring(secret.length - 4);
    }

    formatDate(dateString) {
        if (!dateString) return 'N/A';
        
        try {
            const date = new Date(dateString);
            return date.toLocaleString('ja-JP', {
                year: 'numeric',
                month: '2-digit',
                day: '2-digit',
                hour: '2-digit',
                minute: '2-digit',
                second: '2-digit'
            });
        } catch (error) {
            return dateString;
        }
    }

    // 特定のクライアント詳細表示
    async displayClientDetails(clientId) {
        console.log(`🔍 Client Details: ${clientId}`);
        console.log('='.repeat(60));

        try {
            const pool = await this.initializeDatabase();
            const result = await pool.query(
                'SELECT * FROM clients WHERE client_id = ?',
                [clientId]
            );

            if (result.rows.length === 0) {
                console.log(`❌ Client '${clientId}' not found.`);
                return;
            }

            const client = result.rows[0];
            client.redirect_uris = this.safeJsonParse(client.redirect_uris, []);
            client.allowed_scopes = client.allowed_scopes ? client.allowed_scopes.split(' ') : [];

            console.log(`Name: ${client.name}`);
            console.log(`Client ID: ${client.client_id}`);
            console.log(`Client Secret: ${this.maskSecret(client.client_secret)}`);
            console.log(`Status: ${client.is_active ? '✅ Active' : '❌ Inactive'}`);
            console.log(`Created: ${this.formatDate(client.created_at)}`);
            console.log(`Updated: ${this.formatDate(client.updated_at)}`);
            
            console.log('\nAllowed Scopes:');
            client.allowed_scopes.forEach(scope => {
                console.log(`  - ${scope}`);
            });
            
            console.log('\nRedirect URIs:');
            if (client.redirect_uris.length === 0) {
                console.log('  - None configured');
            } else {
                client.redirect_uris.forEach(uri => {
                    console.log(`  - ${uri}`);
                });
            }

        } catch (error) {
            console.error('❌ Error:', error.message);
            throw error;
        }
    }

    // クライアント検索
    async searchClients(searchTerm) {
        console.log(`🔍 Searching for clients: "${searchTerm}"`);
        console.log('='.repeat(60));

        try {
            const pool = await this.initializeDatabase();
            const result = await pool.query(`
                SELECT * FROM clients 
                WHERE client_id LIKE ? OR name LIKE ?
                ORDER BY name
            `, [`%${searchTerm}%`, `%${searchTerm}%`]);

            if (result.rows.length === 0) {
                console.log(`❌ No clients found matching "${searchTerm}".`);
                return;
            }

            const clients = result.rows.map(client => ({
                ...client,
                redirect_uris: this.safeJsonParse(client.redirect_uris, []),
                allowed_scopes: client.allowed_scopes ? client.allowed_scopes.split(' ') : [],
                is_active: Boolean(client.is_active)
            }));

            console.log(`📊 Found ${clients.length} matching client(s)\n`);
            this.displayAsList(clients, false);

        } catch (error) {
            console.error('❌ Error:', error.message);
            throw error;
        }
    }
}

// CLI interface
async function main() {
    const args = process.argv.slice(2);
    const viewer = new ClientViewer();

    // コマンドライン引数の解析
    const options = {
        format: 'table',
        showSecrets: false,
        includeInactive: true,
        sortBy: 'created_at'
    };

    let command = 'list';
    let searchTerm = '';
    let clientId = '';

    for (let i = 0; i < args.length; i++) {
        const arg = args[i];

        switch (arg) {
            case '--format':
                options.format = args[++i] || 'table';
                break;
            case '--show-secrets':
                options.showSecrets = true;
                break;
            case '--active-only':
                options.includeInactive = false;
                break;
            case '--sort':
                options.sortBy = args[++i] || 'created_at';
                break;
            case '--search':
                command = 'search';
                searchTerm = args[++i] || '';
                break;
            case '--details':
                command = 'details';
                clientId = args[++i] || '';
                break;
            case '--help':
                console.log('🔑 OAuth Client Viewer - Usage:');
                console.log('');
                console.log('Basic usage:');
                console.log('  node view-clients.js                    # Show all clients (table format)');
                console.log('');
                console.log('Options:');
                console.log('  --format <type>       Output format: table|list|json (default: table)');
                console.log('  --show-secrets        Show masked client secrets');
                console.log('  --active-only         Show only active clients');
                console.log('  --sort <field>        Sort by: client_id|name|created_at (default: created_at)');
                console.log('');
                console.log('Commands:');
                console.log('  --search <term>       Search clients by name or client_id');
                console.log('  --details <client_id> Show detailed info for specific client');
                console.log('  --help                Show this help');
                console.log('');
                console.log('Examples:');
                console.log('  node view-clients.js --format json');
                console.log('  node view-clients.js --show-secrets --active-only');
                console.log('  node view-clients.js --search demo');
                console.log('  node view-clients.js --details demo-client');
                return;
        }
    }

    // コマンド実行
    try {
        switch (command) {
            case 'search':
                if (!searchTerm) {
                    console.error('❌ Search term required. Use: --search <term>');
                    return;
                }
                await viewer.searchClients(searchTerm);
                break;
            case 'details':
                if (!clientId) {
                    console.error('❌ Client ID required. Use: --details <client_id>');
                    return;
                }
                await viewer.displayClientDetails(clientId);
                break;
            case 'list':
            default:
                await viewer.displayClients(options);
                break;
        }
    } catch (error) {
        console.error('❌ Command failed:', error.message);
        process.exit(1);
    }
}

// Export for use in other scripts
export { ClientViewer };

// Run if called directly
if (process.argv[1] === fileURLToPath(import.meta.url)) {
    main().catch(error => {
        console.error('❌ Script failed:', error.message);
        process.exit(1);
    });
}
```

```filename
scripts\import-employees.js
```

```javascript
import fs from 'fs';
import path from 'path';
import bcrypt from 'bcrypt';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

class EmployeeImporter {
    constructor() {
        this.projectRoot = path.resolve(__dirname, '..');
        this.importedCount = 0;
        this.skippedCount = 0;
        this.errorCount = 0;
        this.errors = [];
    }

    async importEmployees(options = {}) {
        const {
            filename = 'employee.json',
            batchSize = 50,
            defaultPassword = 'Welcome123!',
            passwordStrategy = 'default', // 'default', 'employeeId', 'name'
            dryRun = false,
            silent = false // 🆕 サイレントモード追加
        } = options;

        if (!silent) {
            console.log('👥 SSO Employee Import System');
            console.log('='.repeat(50));
            console.log(`📄 Source file: ${filename}`);
            console.log(`🔐 Password strategy: ${passwordStrategy}`);
            console.log(`📦 Batch size: ${batchSize}`);
            console.log(`🧪 Dry run: ${dryRun ? 'Yes' : 'No'}`);
            console.log('');
        }

        try {
            // 1. Load employee data
            const employees = await this.loadEmployeeData(filename, silent);
            if (!silent) {
                console.log(`📊 Loaded ${employees.length} employees from ${filename}`);
            }

            // 2. Initialize database
            const pool = await this.initializeDatabase(silent);

            // 3. Get config for password hashing
            const config = await this.getConfigSafely();
            const bcryptRounds = config.security?.bcrypt_rounds || 12;

            // 4. Process employees in batches
            const batches = this.createBatches(employees, batchSize);
            if (!silent) {
                console.log(`📦 Processing ${batches.length} batches of up to ${batchSize} employees each`);
                console.log('');
            }

            for (let i = 0; i < batches.length; i++) {
                const batch = batches[i];
                if (!silent) {
                    console.log(`🔄 Processing batch ${i + 1}/${batches.length} (${batch.length} employees)...`);
                }

                await this.processBatch(batch, pool, bcryptRounds, passwordStrategy, defaultPassword, dryRun);

                // Show progress
                if (!silent) {
                    const processed = (i + 1) * batchSize;
                    const total = employees.length;
                    const progress = Math.min(100, ((processed / total) * 100)).toFixed(1);
                    console.log(`   📈 Progress: ${progress}% (${Math.min(processed, total)}/${total})`);
                }

                // Small delay to prevent overwhelming the system
                if (i < batches.length - 1) {
                    await new Promise(resolve => setTimeout(resolve, 100));
                }
            }

            if (!silent) {
                console.log('');
                console.log('✅ Employee import completed!');
                console.log('📊 Import Statistics:');
                console.log(`   ✅ Imported: ${this.importedCount} employees`);
                console.log(`   ⏭️  Skipped: ${this.skippedCount} employees (already exist)`);
                console.log(`   ❌ Errors: ${this.errorCount} employees`);

                if (this.errors.length > 0) {
                    console.log('\n⚠️ Error Details:');
                    this.errors.slice(0, 10).forEach((error, index) => {
                        console.log(`   ${index + 1}. ${error.employee} - ${error.message}`);
                    });
                    if (this.errors.length > 10) {
                        console.log(`   ... and ${this.errors.length - 10} more errors`);
                    }
                }

                // Sample login info
                if (this.importedCount > 0 && !dryRun) {
                    console.log('\n🔐 Sample Login Credentials:');
                    const sampleEmployees = employees.slice(0, 3);
                    for (const emp of sampleEmployees) {
                        const username = this.generateUsername(emp);
                        const password = this.generatePassword(emp, passwordStrategy, defaultPassword);
                        console.log(`   👤 ${emp.name} (${emp.department} - ${emp.team}): ${username} / ${password}`);
                    }
                    console.log('   💡 All other employees use the same password pattern');
                }
            }

            return {
                success: true,
                imported: this.importedCount,
                skipped: this.skippedCount,
                errors: this.errorCount,
                total: employees.length
            };

        } catch (error) {
            if (!silent) {
                console.error('❌ Employee import failed:', error.message);
            }
            return {
                success: false,
                error: error.message,
                imported: this.importedCount,
                skipped: this.skippedCount,
                errors: this.errorCount
            };
        }
    }

    async loadEmployeeData(filename, silent = false) {
        const filePath = path.join(this.projectRoot, 'data', filename);

        if (!fs.existsSync(filePath)) {
            throw new Error(`Employee data file not found: ${filePath}\nPlease run: node create_employee.js first`);
        }

        try {
            const fileContent = fs.readFileSync(filePath, 'utf8');
            const data = JSON.parse(fileContent);

            // Handle both direct array and wrapped format
            const employees = data.employees || data;

            if (!Array.isArray(employees)) {
                throw new Error('Employee data should be an array');
            }

            if (employees.length === 0) {
                throw new Error('No employees found in data file');
            }

            // Validate employee data structure
            const requiredFields = ['name', 'email', 'employeeId'];
            const invalidEmployees = employees.filter(emp =>
                !requiredFields.every(field => emp[field])
            );

            if (invalidEmployees.length > 0 && !silent) {
                console.warn(`⚠️ Found ${invalidEmployees.length} employees with missing required fields (will be skipped)`);
            }

            const validEmployees = employees.filter(emp =>
                requiredFields.every(field => emp[field])
            );

            if (!silent) {
                console.log(`✅ Validated ${validEmployees.length} employees`);
            }
            return validEmployees;

        } catch (error) {
            if (error instanceof SyntaxError) {
                throw new Error(`Invalid JSON in employee data file: ${error.message}`);
            }
            throw error;
        }
    }

    async initializeDatabase(silent = false) {
        try {
            const { default: pool } = await import('../config/database.js');

            // Test database connection
            await pool.query('SELECT 1');
            if (!silent) {
                console.log('✅ Database connection established');
            }

            return pool;
        } catch (error) {
            throw new Error(`Database initialization failed: ${error.message}`);
        }
    }

    async getConfigSafely() {
        try {
            const { getConfig } = await import('../config/configLoader.js');
            return getConfig();
        } catch (error) {
            console.warn('⚠️ Config loading failed, using defaults');
            return {
                security: { bcrypt_rounds: 12 }
            };
        }
    }

    createBatches(employees, batchSize) {
        const batches = [];
        for (let i = 0; i < employees.length; i += batchSize) {
            batches.push(employees.slice(i, i + batchSize));
        }
        return batches;
    }

    async processBatch(batch, pool, bcryptRounds, passwordStrategy, defaultPassword, dryRun) {
        for (const employee of batch) {
            try {
                await this.processEmployee(employee, pool, bcryptRounds, passwordStrategy, defaultPassword, dryRun);
            } catch (error) {
                this.errorCount++;
                this.errors.push({
                    employee: employee.name || employee.email || 'Unknown',
                    message: error.message
                });
            }
        }
    }

    async processEmployee(employee, pool, bcryptRounds, passwordStrategy, defaultPassword, dryRun) {
        // Generate username and password
        const username = this.generateUsername(employee);
        const password = this.generatePassword(employee, passwordStrategy, defaultPassword);

        // Check for existing user
        const existingUser = await pool.query(
            'SELECT id FROM users WHERE username = ? OR email = ?',
            [username, employee.email]
        );

        if (existingUser.rows.length > 0) {
            this.skippedCount++;
            return;
        }

        if (dryRun) {
            this.importedCount++;
            return;
        }

        // Hash password
        const passwordHash = await bcrypt.hash(password, bcryptRounds);

        // Parse name
        const { firstName, lastName } = this.parseName(employee.name);

        // 🆕 Extract organization information
        const department = employee.department || '-';
        const team = employee.team || '-';
        const supervisor = employee.supervisor || '-';

        // Insert user with organization fields
        const result = await pool.query(
            `INSERT INTO users (username, email, password_hash, first_name, last_name, role, is_active, department, team, supervisor) 
       VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
            [
                username,
                employee.email,
                passwordHash,
                firstName,
                lastName,
                'user', // All employees are regular users
                1, // Active by default
                department,
                team,
                supervisor
            ]
        );

        if (result.rowCount > 0) {
            this.importedCount++;
        }
    }

    generateUsername(employee) {
        // Use employee email prefix or generate from name
        if (employee.email && employee.email.includes('@')) {
            const emailPrefix = employee.email.split('@')[0];

            // 🔧 修正: ドットやハイフンをアンダースコアに置き換え
            let username = emailPrefix.toLowerCase()
                .replace(/\./g, '_')        // ドット → アンダースコア
                .replace(/-/g, '_')         // ハイフン → アンダースコア  
                .replace(/[^a-z0-9_]/g, '') // その他特殊文字削除
                .replace(/_+/g, '_')        // 連続アンダースコア→1つに
                .replace(/^_|_$/g, '');     // 先頭末尾アンダースコア削除

            return username;
        }

        // Fallback: generate from name  
        const cleanName = employee.name
            .replace(/[^\u3040-\u309F\u30A0-\u30FF\u4E00-\u9FAF\u3400-\u4DBFa-zA-Z\s]/g, '')
            .trim();

        const parts = cleanName.split(/\s+/);
        if (parts.length >= 2) {
            return `${parts[0]}_${parts[1]}`.toLowerCase();
        }

        return cleanName.toLowerCase().replace(/\s/g, '');
    }

    generatePassword(employee, strategy, defaultPassword) {
        switch (strategy) {
            case 'employeeId':
                if (employee.employeeId) {
                    return `${employee.employeeId}@kk`;
                }
                return defaultPassword;

            case 'name':
                const nameParts = employee.name.split(/\s+/);
                if (nameParts.length >= 2) {
                    return `${nameParts[1]}${nameParts[0]}123`;
                }
                return defaultPassword;

            case 'default':
            default:
                return defaultPassword;
        }
    }

    parseName(fullName) {
        const parts = fullName.trim().split(/\s+/);

        if (parts.length >= 2) {
            // Japanese name format: 姓 名
            return {
                firstName: parts.slice(1).join(' '), // 名
                lastName: parts[0] // 姓
            };
        }

        return {
            firstName: fullName,
            lastName: ''
        };
    }

    async clearEmployees(keepAdmin = true) {
        console.log('🗑️ Clearing existing employee data...');

        try {
            const pool = await this.initializeDatabase(true); // silent = true

            let query = 'DELETE FROM users WHERE role = ?';
            let params = ['user'];

            if (!keepAdmin) {
                query = 'DELETE FROM users';
                params = [];
            }

            const result = await pool.query(query, params);
            console.log(`✅ Removed ${result.rowCount} employee records`);

            return result.rowCount;
        } catch (error) {
            console.error('❌ Failed to clear employees:', error.message);
            throw error;
        }
    }

    async getImportStatistics() {
        try {
            const pool = await this.initializeDatabase(true); // silent = true

            const stats = await pool.query(`
        SELECT 
          COUNT(*) as total_users,
          SUM(CASE WHEN role = 'admin' THEN 1 ELSE 0 END) as admin_count,
          SUM(CASE WHEN role = 'user' THEN 1 ELSE 0 END) as user_count,
          SUM(CASE WHEN is_active = 1 THEN 1 ELSE 0 END) as active_users,
          COUNT(DISTINCT department) as department_count,
          COUNT(DISTINCT team) as team_count
        FROM users
      `);

            return stats.rows[0];
        } catch (error) {
            console.error('❌ Failed to get statistics:', error.message);
            return null;
        }
    }

    // 🆕 部署別統計の取得
    async getDepartmentStatistics() {
        try {
            const pool = await this.initializeDatabase(true);

            const stats = await pool.query(`
        SELECT 
          department,
          COUNT(*) as employee_count,
          COUNT(DISTINCT team) as team_count
        FROM users 
        WHERE role = 'user' AND department != '-'
        GROUP BY department
        ORDER BY employee_count DESC
      `);

            return stats.rows;
        } catch (error) {
            console.error('❌ Failed to get department statistics:', error.message);
            return [];
        }
    }
}

// CLI interface
async function main() {
    const args = process.argv.slice(2);
    const importer = new EmployeeImporter();

    // Parse command line arguments
    const options = {
        filename: 'employee.json',
        batchSize: 50,
        defaultPassword: 'Welcome123!',
        passwordStrategy: 'default',
        dryRun: false
    };

    for (let i = 0; i < args.length; i += 2) {
        const key = args[i];
        const value = args[i + 1];

        switch (key) {
            case '--file':
                options.filename = value;
                break;
            case '--batch':
                options.batchSize = parseInt(value) || 50;
                break;
            case '--password':
                options.defaultPassword = value;
                break;
            case '--strategy':
                options.passwordStrategy = value;
                break;
            case '--dry-run':
                options.dryRun = true;
                i--; // No value for this flag
                break;
            case '--clear':
                await importer.clearEmployees(true);
                return;
            case '--clear-all':
                await importer.clearEmployees(false);
                return;
            case '--stats':
                const stats = await importer.getImportStatistics();
                if (stats) {
                    console.log('📊 User Statistics:');
                    console.log(`   Total Users: ${stats.total_users}`);
                    console.log(`   Admins: ${stats.admin_count}`);
                    console.log(`   Employees: ${stats.user_count}`);
                    console.log(`   Active: ${stats.active_users}`);
                    console.log(`   Departments: ${stats.department_count}`);
                    console.log(`   Teams: ${stats.team_count}`);
                }

                const deptStats = await importer.getDepartmentStatistics();
                if (deptStats.length > 0) {
                    console.log('\n📈 Department Breakdown:');
                    deptStats.forEach(dept => {
                        console.log(`   ${dept.department}: ${dept.employee_count} employees, ${dept.team_count} teams`);
                    });
                }
                return;
            case '--help':
                console.log('🔧 Employee Import Tool Usage:');
                console.log('');
                console.log('Import employees:');
                console.log('  node scripts/import-employees.js');
                console.log('');
                console.log('Options:');
                console.log('  --file <filename>       Source JSON file (default: employee.json)');
                console.log('  --batch <size>          Batch size (default: 50)');
                console.log('  --password <password>   Default password (default: Welcome123!)');
                console.log('  --strategy <strategy>   Password strategy: default|employeeId|name');
                console.log('  --dry-run              Test run without database changes');
                console.log('');
                console.log('Management:');
                console.log('  --clear                Clear employee users (keep admins)');
                console.log('  --clear-all            Clear all users');
                console.log('  --stats                Show user and department statistics');
                console.log('  --help                 Show this help');
                console.log('');
                console.log('Examples:');
                console.log('  node scripts/import-employees.js --dry-run');
                console.log('  node scripts/import-employees.js --password "Company2024!"');
                console.log('  node scripts/import-employees.js --strategy employeeId');
                console.log('  node scripts/import-employees.js --stats');
                return;
        }
    }

    // Run import
    await importer.importEmployees(options);
}

// Export for use in other scripts
export { EmployeeImporter };

// Run if called directly
if (process.argv[1] === fileURLToPath(import.meta.url)) {
    main().catch(error => {
        console.error('❌ Import failed:', error.message);
        process.exit(1);
    });
}
```

```filename
scripts\migrate.js
```

```javascript
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import dotenv from 'dotenv';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

dotenv.config({ path: path.join(__dirname, '..', 'auth-server', '.env') });

async function checkColumnExists(pool, tableName, columnName) {
  try {
    const result = pool.rawDb.prepare(`PRAGMA table_info(${tableName})`).all();
    return result.some(column => column.name === columnName);
  } catch (error) {
    console.error('Error checking column existence:', error);
    return false;
  }
}

async function runMigrations() {
  console.log('🔄 Running database migrations...');
  
  try {
    const { default: pool } = await import('../config/database.js');
    
    const migrationsDir = path.join(__dirname, '..', 'auth-server', 'database', 'migrations');
    if (!fs.existsSync(migrationsDir)) {
      console.log('Migrations directory not found');
      return;
    }

    const files = fs.readdirSync(migrationsDir).filter(f => f.endsWith('.sql')).sort();
    
    for (const file of files) {
      console.log(`Executing: ${file}`);
      
      // Special handling for the role column migration
      if (file === '006_add_user_roles.sql') {
        const roleColumnExists = await checkColumnExists(pool, 'users', 'role');
        
        if (!roleColumnExists) {
          // Add the role column
          try {
            pool.rawDb.exec('ALTER TABLE users ADD COLUMN role TEXT DEFAULT \'user\'');
            console.log('  ✅ Added role column to users table');
          } catch (error) {
            console.error(`  ❌ Failed to add role column: ${error.message}`);
            throw error;
          }
        } else {
          console.log('  ⚠️ Role column already exists, skipping column addition');
        }
        
        // Run the remaining SQL (updates and index creation)
        try {
          // Update existing admin user to have admin role
          pool.rawDb.exec("UPDATE users SET role = 'admin' WHERE username = 'admin' AND (role IS NULL OR role != 'admin')");
          
          // Update other users to have user role if they don't have one set
          pool.rawDb.exec("UPDATE users SET role = 'user' WHERE role IS NULL");
          
          // Create index for role field
          pool.rawDb.exec('CREATE INDEX IF NOT EXISTS idx_users_role ON users(role)');
          
          console.log('  ✅ Updated user roles and created index');
        } catch (error) {
          console.warn(`  ⚠️ Warning during role updates: ${error.message}`);
        }
        
        console.log(`  ✅ ${file} completed`);
        continue;
      }
      
      // Regular migration handling for other files
      const sql = fs.readFileSync(path.join(migrationsDir, file), 'utf8');
      
      try {
        const statements = sql.split(';').filter(stmt => stmt.trim());
        
        for (const statement of statements) {
          if (statement.trim()) {
            pool.rawDb.exec(statement.trim());
          }
        }
        
        console.log(`  ✅ ${file} completed`);
      } catch (error) {
        console.error(`  ❌ ${file} failed:`, error.message);
        throw error;
      }
    }
    
    console.log('✅ Migration completed');
  } catch (error) {
    console.error('Migration error:', error);
    throw error;
  }
}

if (process.argv[1] === fileURLToPath(import.meta.url)) {
  runMigrations().catch(console.error);
}

export { runMigrations };
```

```filename
scripts\seed.js
```

```javascript
import fs from 'fs';
import path from 'path';
import bcrypt from 'bcrypt';
import { fileURLToPath } from 'url';
import dotenv from 'dotenv';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

dotenv.config({ path: path.join(__dirname, '..', 'auth-server', '.env') });

async function getConfigSafely() {
  try {
    const { getConfig } = await import('../config/configLoader.js');
    return getConfig();
  } catch (error) {
    console.warn('Config loading failed, using defaults:', error.message);
    return {
      demo: { 
        admin: {
          username: 'admin',
          password: 'SecurePass123'
        },
        user: {
          username: 'user0',
          password: 'UserPass123'
        }
      },
      security: { bcrypt_rounds: 12 }
    };
  }
}

async function generatePasswordHash(password, rounds = 12) {
  try {
    const hash = await bcrypt.hash(password, rounds);
    console.log(`  🔐 Generated hash: ${hash.substring(0, 20)}...`);
    return hash;
  } catch (error) {
    console.error('❌ Password hash generation failed:', error);
    throw error;
  }
}

async function seedUsers(pool) {
  console.log('👥 Seeding users with dynamic password hashes...');
  
  try {
    const config = await getConfigSafely();
    const bcryptRounds = config.security?.bcrypt_rounds || 12;
    
    console.log(`  🔧 Bcrypt rounds: ${bcryptRounds}`);
    
    const users = [
      { 
        username: config.demo?.admin?.username || 'admin',
        email: 'admin@company.com', 
        firstName: 'System', 
        lastName: 'Administrator', 
        role: 'admin',
        password: config.demo?.admin?.password || 'SecurePass123',
        department: '-',
        team: '-',
        supervisor: '-'
      },
      { 
        username: config.demo?.user?.username || 'user0',
        email: 'user0@company.com', 
        firstName: 'Demo', 
        lastName: 'User', 
        role: 'user',
        password: config.demo?.user?.password || 'UserPass123',
        department: '-',
        team: '-',
        supervisor: '-'
      }
    ];
    
    for (const userData of users) {
      try {
        console.log(`  📝 Using password for ${userData.username}: "${userData.password}"`);
        const passwordHash = await generatePasswordHash(userData.password, bcryptRounds);
        
        const result = pool.query(
          `INSERT OR IGNORE INTO users (username, email, password_hash, first_name, last_name, role, department, team, supervisor) 
           VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)`,
          [userData.username, userData.email, passwordHash, userData.firstName, userData.lastName, userData.role, userData.department, userData.team, userData.supervisor]
        );
        
        if (result.rowCount > 0) {
          console.log(`  ✅ User '${userData.username}' created with role '${userData.role}' and organization fields`);
        } else {
          const updateResult = pool.query(
            'UPDATE users SET password_hash = ?, role = ?, department = ?, team = ?, supervisor = ? WHERE username = ?',
            [passwordHash, userData.role, userData.department, userData.team, userData.supervisor, userData.username]
          );
          console.log(`  🔄 User '${userData.username}' updated with role '${userData.role}' and organization fields`);
        }
      } catch (error) {
        console.error(`❌ Failed to create/update user '${userData.username}':`, error.message);
        throw error;
      }
    }
    
    console.log('✅ User seeding completed');
    
  } catch (error) {
    console.error('❌ User seeding failed:', error);
    throw error;
  }
}

async function seedClients(pool) {
  console.log('🔑 Seeding OAuth clients...');
  
  try {
    const clients = [
      {
        clientId: 'demo-client',
        clientSecret: 'demo-secret-change-in-production',
        name: 'Demo Application',
        // 🔧 修正: /oauth/callback に変更
        redirectUris: '["http://localhost:3000/oauth/callback"]',
        allowedScopes: 'openid profile email organization'
      },
      {
        clientId: 'test-app',
        clientSecret: 'test-secret-change-in-production',
        name: 'Test Application',
        // 🔧 修正: 両方のパターンをサポート
        redirectUris: '["http://localhost:3000/auth/callback", "http://localhost:3000/oauth/callback"]',
        allowedScopes: 'openid profile email organization'
      },
      {
        clientId: 'admin-panel',
        clientSecret: 'admin-secret-change-in-production',
        name: 'Admin Panel',
        redirectUris: '["http://localhost:3303/admin/callback"]',
        allowedScopes: 'openid profile email admin organization'
      }
    ];
    
    for (const client of clients) {
      try {
        const result = pool.query(
          `INSERT OR REPLACE INTO clients (client_id, client_secret, name, redirect_uris, allowed_scopes) 
           VALUES (?, ?, ?, ?, ?)`,
          [client.clientId, client.clientSecret, client.name, client.redirectUris, client.allowedScopes]
        );
        
        console.log(`  ✅ Client '${client.clientId}' updated with correct redirect URIs`);
        
      } catch (error) {
        console.error(`❌ Failed to update client '${client.clientId}':`, error.message);
        throw error;
      }
    }
    
    console.log('✅ Client seeding completed with fixed redirect URIs');
    
  } catch (error) {
    console.error('❌ Client seeding failed:', error);
    throw error;
  }
}

async function runSeeds() {
  console.log('🌱 Seeding database with dynamic data generation...');
  
  try {
    const { default: pool } = await import('../config/database.js');
    
    await seedUsers(pool);
    await seedClients(pool);
    
    console.log('✅ Database seeding completed successfully');
    console.log('💡 All password hashes generated fresh for maximum security');
    console.log('🔐 Admin user with admin role and user0 with user role created');
    console.log('🏢 Admin panel OAuth client created with proper callback URL');
    console.log('👥 Both admin and user demo accounts available on login page');
    console.log('🏢 Organization fields (department, team, supervisor) initialized to "-" for demo accounts');
    
  } catch (error) {
    console.error('❌ Seed error:', error);
    throw error;
  }
}

if (process.argv[1] === fileURLToPath(import.meta.url)) {
  runSeeds().catch(console.error);
}

export { runSeeds };
```

```filename
scripts\setup.js
```

```javascript
import { execSync } from 'child_process';
import fs from 'fs';
import path from 'path';
import os from 'os';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

class SystemSetup {
  constructor() {
    this.isWindows = os.platform() === 'win32';
    this.projectRoot = path.resolve(__dirname, '..');
    this.employeeImportStats = null; // 🆕 従業員インポート統計を保存

    this.config = {
      server: {
        auth_port: 3303
      },
      jwt: {
        private_key_path: './keys/private.pem',
        public_key_path: './keys/public.pem'
      }
    };
  }

  async setup() {
    console.log('🚀 SSO Authentication System - Complete Setup');
    console.log('⚠️  This will completely reset the system and database');

    try {
      await this.checkDependencies();
      await this.installDependencies();
      await this.cleanDatabase();
      await this.generateKeys();
      await this.setupDatabase();
      await this.runEmployeeDataCheck();
      await this.importEmployeeData(); // 🆕 従業員データインポートを追加

      console.log('\n✅ Complete setup finished!');
      console.log('🔄 Database reset and initialized with fresh data');
      console.log('👥 Demo accounts created:');
      console.log('   📋 Admin: admin / SecurePass123');
      console.log('   👤 User: user0 / UserPass123');
      console.log('📊 Employee data structure analyzed and exported');
      
      // 🆕 インポート統計を表示
      if (this.employeeImportStats) {
        console.log(`👥 Employee data imported: ${this.employeeImportStats.imported} users`);
        if (this.employeeImportStats.skipped > 0) {
          console.log(`   ⏭️  Skipped: ${this.employeeImportStats.skipped} (duplicates)`);
        }
        if (this.employeeImportStats.errors > 0) {
          console.log(`   ❌ Errors: ${this.employeeImportStats.errors}`);
        }
      }
      
      console.log('');
      console.log('🚀 Start command: npm start');
      console.log(`🌐 Access URL: http://localhost:${this.config.server.auth_port}`);
    } catch (error) {
      console.error('❌ Setup error:', error.message);
      process.exit(1);
    }
  }

  async checkDependencies() {
    try {
      const nodeVersion = execSync('node --version', { encoding: 'utf8' }).trim();
      const major = parseInt(nodeVersion.replace('v', '').split('.')[0]);
      if (major < 16) {
        throw new Error(`Node.js 16+ required (current: ${nodeVersion})`);
      }
      console.log(`✅ Node.js ${nodeVersion}`);
    } catch (error) {
      console.log('Please install Node.js 16 or higher');
      throw error;
    }
  }

  async installDependencies() {
    console.log('📦 Installing dependencies...');

    try {
      const packageJsonPath = path.join(this.projectRoot, 'package.json');
      if (!fs.existsSync(packageJsonPath)) {
        throw new Error(`package.json not found at ${packageJsonPath}`);
      }

      execSync('npm install', {
        stdio: 'inherit',
        cwd: this.projectRoot
      });

      console.log('✅ Dependencies installed');
    } catch (error) {
      console.error('npm package installation failed');
      throw error;
    }
  }

  async cleanDatabase() {
    console.log('🗄️ Cleaning existing database...');
    
    try {
      // 可能なデータベースファイルの場所を確認
      const possibleDbPaths = [
        path.join(this.projectRoot, 'auth-server', 'database', 'auth_db.sqlite'),
        path.join(this.projectRoot, 'database', 'auth_db.sqlite'),
        path.join(this.projectRoot, 'auth_db.sqlite')
      ];

      // .envファイルからDATABASE_PATHを読み取り
      const envPath = path.join(this.projectRoot, 'auth-server', '.env');
      if (fs.existsSync(envPath)) {
        const envContent = fs.readFileSync(envPath, 'utf8');
        const dbPathMatch = envContent.match(/DATABASE_PATH=(.+)/);
        if (dbPathMatch) {
          const envDbPath = dbPathMatch[1].replace(/["']/g, '');
          const resolvedPath = path.isAbsolute(envDbPath) 
            ? envDbPath 
            : path.resolve(this.projectRoot, envDbPath);
          possibleDbPaths.unshift(resolvedPath);
        }
      }

      let deletedCount = 0;
      
      for (const dbPath of possibleDbPaths) {
        if (fs.existsSync(dbPath)) {
          try {
            fs.unlinkSync(dbPath);
            console.log(`  🗑️ Deleted: ${path.relative(this.projectRoot, dbPath)}`);
            deletedCount++;
          } catch (error) {
            console.warn(`  ⚠️ Could not delete ${dbPath}: ${error.message}`);
          }
        }
      }

      // WALファイルとSHMファイルも削除
      for (const dbPath of possibleDbPaths) {
        const walPath = dbPath + '-wal';
        const shmPath = dbPath + '-shm';
        
        if (fs.existsSync(walPath)) {
          try {
            fs.unlinkSync(walPath);
            console.log(`  🗑️ Deleted WAL file: ${path.relative(this.projectRoot, walPath)}`);
          } catch (error) {
            console.warn(`  ⚠️ Could not delete WAL file: ${error.message}`);
          }
        }
        
        if (fs.existsSync(shmPath)) {
          try {
            fs.unlinkSync(shmPath);
            console.log(`  🗑️ Deleted SHM file: ${path.relative(this.projectRoot, shmPath)}`);
          } catch (error) {
            console.warn(`  ⚠️ Could not delete SHM file: ${error.message}`);
          }
        }
      }

      if (deletedCount === 0) {
        console.log('  ℹ️ No existing database files found (fresh installation)');
      } else {
        console.log(`✅ Database cleanup completed (${deletedCount} files removed)`);
      }

    } catch (error) {
      console.error('Database cleanup failed:', error);
      throw error;
    }
  }

  async generateKeys() {
    console.log('🔑 Generating RSA key pair...');
    const keysDir = path.join(this.projectRoot, 'keys');

    try {
      // キーディレクトリをクリーンアップ
      if (fs.existsSync(keysDir)) {
        const files = fs.readdirSync(keysDir);
        for (const file of files) {
          if (file.endsWith('.pem')) {
            fs.unlinkSync(path.join(keysDir, file));
            console.log(`  🗑️ Removed old key: ${file}`);
          }
        }
      } else {
        fs.mkdirSync(keysDir, { recursive: true });
      }

      const privateKeyPath = path.join(keysDir, path.basename(this.config.jwt.private_key_path));
      const publicKeyPath = path.join(keysDir, path.basename(this.config.jwt.public_key_path));

      try {
        execSync(`openssl genpkey -algorithm RSA -out "${privateKeyPath}" -pkcs8 -pass pass:`,
          { stdio: 'pipe' });

        execSync(`openssl rsa -pubout -in "${privateKeyPath}" -out "${publicKeyPath}"`,
          { stdio: 'pipe' });

        console.log('✅ RSA key pair generated (OpenSSL)');
      } catch (opensslError) {
        const crypto = await import('crypto');
        const { publicKey, privateKey } = crypto.generateKeyPairSync('rsa', {
          modulusLength: 2048,
          publicKeyEncoding: { type: 'spki', format: 'pem' },
          privateKeyEncoding: { type: 'pkcs8', format: 'pem' }
        });

        fs.writeFileSync(privateKeyPath, privateKey);
        fs.writeFileSync(publicKeyPath, publicKey);
        console.log('✅ RSA key pair generated (Node.js crypto)');
      }
    } catch (error) {
      console.error('RSA key pair generation failed');
      throw error;
    }
  }

  async setupDatabase() {
    console.log('🗄️ Setting up fresh database...');
    try {
      const envPath = path.join(this.projectRoot, 'auth-server', '.env');
      if (!fs.existsSync(envPath)) {
        const envExamplePath = envPath + '.example';
        if (fs.existsSync(envExamplePath)) {
          fs.copyFileSync(envExamplePath, envPath);
          console.log('✅ .env file created from template');
        }
      }

      // 🔧 パスワードハッシュ生成能力の確認
      try {
        const bcrypt = await import('bcrypt');
        const testHash = await bcrypt.hash('SecurePass123', 12);
        console.log('✅ Password hashing capability verified');
        console.log(`  Sample hash: ${testHash.substring(0, 20)}...`);
      } catch (hashError) {
        console.warn('⚠️ bcrypt not available for password hashing:', hashError.message);
      }

      // マイグレーション実行
      console.log('📋 Running database migrations...');
      const { runMigrations } = await import('./migrate.js');
      await runMigrations();
      console.log('✅ Database migrations completed');

      // シード実行  
      console.log('🌱 Seeding fresh database data...');
      const { runSeeds } = await import('./seed.js');
      await runSeeds();
      console.log('✅ Database seeding completed');

      console.log('✅ Fresh database setup completed');
    } catch (error) {
      console.error('Database setup failed');
      throw error;
    }
  }

  // 🆕 従業員データチェック機能を追加
  async runEmployeeDataCheck() {
    console.log('👥 Running employee data structure analysis...');
    
    try {
      const createEmployeeScriptPath = path.join(this.projectRoot, 'create_employee.js');
      
      // create_employee.jsファイルの存在確認
      if (!fs.existsSync(createEmployeeScriptPath)) {
        console.log('  ℹ️ create_employee.js not found, skipping employee data analysis');
        return;
      }

      console.log('  📊 Analyzing organization structure and generating employee data...');

      // create_employee.jsを実行
      try {
        execSync('node create_employee.js', {
          stdio: 'inherit',
          cwd: this.projectRoot,
          timeout: 30000 // 30秒タイムアウト
        });
        
        console.log('✅ Employee data analysis completed'); // data/employees.jsonが生成される
        
        // 生成されたファイルの確認
        const dataDir = path.join(this.projectRoot, 'data');
        if (fs.existsSync(dataDir)) {
          const files = fs.readdirSync(dataDir);
          const generatedFiles = files.filter(file => 
            file.endsWith('.json') || file.endsWith('.md')
          );
          
          if (generatedFiles.length > 0) {
            console.log('  📄 Generated files:');
            generatedFiles.forEach(file => {
              const filePath = path.join(dataDir, file);
              const stats = fs.statSync(filePath);
              const size = (stats.size / 1024).toFixed(2);
              console.log(`    - ${file} (${size} KB)`);
            });
          }
        }
        
      } catch (execError) {
        console.warn(`  ⚠️ Employee data check execution failed: ${execError.message}`);
        
        // より詳細なエラー情報
        if (execError.status) {
          console.warn(`    Exit code: ${execError.status}`);
        }
        if (execError.signal) {
          console.warn(`    Signal: ${execError.signal}`);
        }
      }
      
    } catch (error) {
      // 非致命的エラーとして処理
      console.warn(`  ⚠️ Employee data analysis warning: ${error.message}`);
    }
  }

  // 🆕 従業員データインポート機能を追加
  async importEmployeeData() {
    console.log('👤 Importing employee data to user database...');
    
    try {
      // employee.jsonファイルの存在確認
      const employeeJsonPath = path.join(this.projectRoot, 'data', 'employee.json');
      
      if (!fs.existsSync(employeeJsonPath)) {
        console.log('  ℹ️ employee.json not found, skipping employee data import');
        console.log('  💡 Employee data will only contain admin and demo users');
        return;
      }

      // EmployeeImporterクラスをインポート
      const { EmployeeImporter } = await import('./import-employees.js');
      const importer = new EmployeeImporter();

      // インポート設定
      const importOptions = {
        filename: 'employee.json',
        batchSize: 100,          // セットアップ時は高速処理
        defaultPassword: 'Employee2024!', // 従業員共通パスワード
        passwordStrategy: 'default',      // 全員同じパスワード
        dryRun: false           // 実際にインポート
      };

      console.log(`  📄 Source: ${importOptions.filename}`);
      console.log(`  🔐 Password: ${importOptions.defaultPassword} (for all employees)`);
      console.log(`  📦 Batch size: ${importOptions.batchSize}`);

      // インポート実行
      const result = await importer.importEmployees(importOptions);
      
      if (result.success) {
        this.employeeImportStats = result; // 統計を保存
        console.log('✅ Employee data import completed successfully');
        console.log(`  👥 Imported: ${result.imported} employees`);
        
        if (result.skipped > 0) {
          console.log(`  ⏭️  Skipped: ${result.skipped} (already exist)`);
        }
        
        if (result.errors > 0) {
          console.log(`  ❌ Errors: ${result.errors} employees failed to import`);
        }
        
        // サンプル従業員の認証情報を表示
        const sampleEmployees = await this.getSampleEmployees(5);
        if (sampleEmployees.length > 0) {
          console.log('  🔐 Sample employee login credentials:');
          sampleEmployees.forEach(emp => {
            console.log(`    👤 ${emp.name}: ${emp.username} / ${importOptions.defaultPassword}`);
          });
          console.log(`    💡 All ${result.imported} employees use password: ${importOptions.defaultPassword}`);
        }
        
      } else {
        console.warn(`⚠️ Employee data import failed: ${result.error}`);
        console.log('  📋 System will continue with admin and demo users only');
      }
      
    } catch (error) {
      // 非致命的エラーとして処理
      console.warn(`  ⚠️ Employee import warning: ${error.message}`);
      console.log('  📋 System will continue with admin and demo users only');
    }
  }

  // 🆕 サンプル従業員取得
  async getSampleEmployees(count = 5) {
    try {
      const employeeJsonPath = path.join(this.projectRoot, 'data', 'employee.json');
      
      if (!fs.existsSync(employeeJsonPath)) {
        return [];
      }

      const fileContent = fs.readFileSync(employeeJsonPath, 'utf8');
      const data = JSON.parse(fileContent);
      const employees = data.employees || data;
      
      if (!Array.isArray(employees)) {
        return [];
      }

      // 様々な部署から従業員をサンプリング
      const departments = [...new Set(employees.map(emp => emp.department))];
      const samples = [];
      
      for (const dept of departments) {
        const deptEmployees = employees.filter(emp => emp.department === dept);
        if (deptEmployees.length > 0) {
          const sample = deptEmployees[0];
          samples.push({
            name: sample.name,
            username: this.generateUsername(sample),
            department: sample.department,
            position: sample.position
          });
          
          if (samples.length >= count) break;
        }
      }
      
      return samples;
      
    } catch (error) {
      console.warn('Failed to get sample employees:', error.message);
      return [];
    }
  }

  // 🆕 ユーザー名生成（import-employees.jsと同じロジック）
  generateUsername(employee) {
    // Use employee email prefix or generate from name
    if (employee.email && employee.email.includes('@')) {
      const emailPrefix = employee.email.split('@')[0];
      // Clean up email prefix
      return emailPrefix.toLowerCase().replace(/[^a-z0-9]/g, '');
    }

    // Fallback: generate from name
    const cleanName = employee.name
      .replace(/[^\u3040-\u309F\u30A0-\u30FF\u4E00-\u9FAF\u3400-\u4DBFa-zA-Z\s]/g, '')
      .trim();
    
    const parts = cleanName.split(/\s+/);
    if (parts.length >= 2) {
      // For Japanese names: surname + given name
      return `${parts[0]}${parts[1]}`.toLowerCase().replace(/\s/g, '');
    }
    
    return cleanName.toLowerCase().replace(/\s/g, '');
  }

  async showCompletionInfo() {
    console.log('\n' + '='.repeat(60));
    console.log('🎉 SSO Authentication System Setup Complete!');
    console.log('='.repeat(60));
    console.log('');
    console.log('📋 System Status:');
    console.log('   ✅ Dependencies installed');
    console.log('   ✅ Database reset and initialized');
    console.log('   ✅ RSA keys generated');
    console.log('   ✅ Demo accounts created');
    console.log('   ✅ Employee data structure analyzed');
    
    // 🆕 インポート統計の表示
    if (this.employeeImportStats) {
      console.log(`   ✅ Employee users imported (${this.employeeImportStats.imported} users)`);
    } else {
      console.log('   ℹ️ No employee data imported (admin/demo only)');
    }
    
    console.log('');
    console.log('👥 Available User Accounts:');
    console.log('');
    console.log('   🔴 System Administrator:');
    console.log('      Username: admin');
    console.log('      Password: SecurePass123');
    console.log('      Access: Full admin panel access');
    console.log('');
    console.log('   🔵 Demo User:');
    console.log('      Username: user0');
    console.log('      Password: UserPass123');
    console.log('      Access: Standard user features');
    
    // 🆕 従業員アカウント情報
    if (this.employeeImportStats && this.employeeImportStats.imported > 0) {
      console.log('');
      console.log('   👥 Employee Accounts:');
      console.log(`      Count: ${this.employeeImportStats.imported} users`);
      console.log('      Password: Employee2024! (for all employees)');
      console.log('      Username: Generated from email or name');
      console.log('      Access: Standard user features');
      
      // サンプル従業員の表示
      const samples = await this.getSampleEmployees(3);
      if (samples.length > 0) {
        console.log('      Examples:');
        samples.forEach(emp => {
          console.log(`        ${emp.username} (${emp.name} - ${emp.department})`);
        });
      }
    }
    
    console.log('');
    console.log('📊 Generated Files:');
    console.log('   📄 Employee data and organization structure');
    console.log('   📋 Markdown reports in data/ folder');
    console.log('');
    console.log('🚀 Next Steps:');
    console.log('   1. Run: npm start');
    console.log(`   2. Open: http://localhost:${this.config.server.auth_port}`);
    console.log('   3. Test login with any available account');
    console.log('   4. Review generated organization reports');
    
    // 🆕 従業員管理の追加情報
    if (this.employeeImportStats && this.employeeImportStats.imported > 0) {
      console.log('   5. Access admin panel to manage employee accounts');
      console.log('   6. Import additional employees: node scripts/import-employees.js');
    }
    
    console.log('');
    console.log('🛡️ Security Notes:');
    console.log('   ⚠️ Change default passwords in production');
    console.log('   ⚠️ Update JWT secrets in config/config.yaml');
    console.log('   ⚠️ Configure proper CORS origins');
    
    // 🆕 従業員パスワードのセキュリティ注意
    if (this.employeeImportStats && this.employeeImportStats.imported > 0) {
      console.log('   ⚠️ Employee password (Employee2024!) should be changed');
      console.log('   💡 Use admin panel to update individual passwords');
    }
    
    console.log('');
  }
}

if (process.argv[1] === fileURLToPath(import.meta.url)) {
  const setup = new SystemSetup();
  setup.setup().then(() => {
    setup.showCompletionInfo();
  }).catch(console.error);
}

export default SystemSetup;
```

```filename
scripts\start.js
```

```javascript
import { spawn } from 'child_process';
import { fileURLToPath } from 'url';
import process from 'process';
import path from 'path';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

class ServerManager {
  constructor() {
    this.projectRoot = path.resolve(__dirname, '..');
    this.authProcess = null;
  }

  async start() {
    console.log('🚀 Starting SSO Authentication Server...');
    console.log('Press Ctrl+C to stop\n');
    
    try {
      await this.startAuthServer();
      this.setupGracefulShutdown();
      process.stdin.resume();
    } catch (error) {
      console.error('❌ Startup error:', error.message);
      process.exit(1);
    }
  }

  async startAuthServer() {
    return new Promise((resolve, reject) => {
      this.authProcess = spawn('node', ['auth-server/server.js'], {
        stdio: 'inherit',
        cwd: this.projectRoot
      });

      this.authProcess.on('error', (error) => {
        console.error('❌ Server error:', error.message);
        reject(error);
      });

      this.authProcess.on('exit', (code) => {
        if (code !== 0) {
          console.error(`❌ Server exited with code ${code}`);
        }
        process.exit(code);
      });

      setTimeout(() => {
        console.log('✅ Server started successfully');
        resolve();
      }, 2000);
    });
  }

  setupGracefulShutdown() {
    const shutdown = (signal) => {
      console.log(`\n🛑 Received ${signal}. Shutting down...`);
      
      if (this.authProcess) {
        this.authProcess.kill('SIGTERM');
        
        setTimeout(() => {
          if (this.authProcess && !this.authProcess.killed) {
            this.authProcess.kill('SIGKILL');
          }
          console.log('✅ Server stopped');
          process.exit(0);
        }, 2000);
      } else {
        process.exit(0);
      }
    };

    process.on('SIGINT', () => shutdown('SIGINT'));
    process.on('SIGTERM', () => shutdown('SIGTERM'));
    
    if (process.platform === 'win32') {
      import('readline').then(({ createInterface }) => {
        const rl = createInterface({
          input: process.stdin,
          output: process.stdout
        });

        rl.on('SIGINT', () => {
          process.emit('SIGINT');
        });
      }).catch(console.error);
    }
  }
}

if (process.argv[1] === fileURLToPath(import.meta.url)) {
  const manager = new ServerManager();
  manager.start().catch(console.error);
}

export default ServerManager;
```

